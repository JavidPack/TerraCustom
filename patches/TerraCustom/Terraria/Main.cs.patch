--- src/Terraria\Terraria\Main.cs
+++ src/TerraCustom\Terraria\Main.cs
@@ -3,19 +3,19 @@
 using Microsoft.Xna.Framework.Audio;
 using Microsoft.Xna.Framework.Graphics;
 using Microsoft.Xna.Framework.Input;
-
 #if MAC
 using SDL2;
 #endif
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
-
+using System.Drawing;
+using System.Drawing.Imaging;
 #if WINDOWS
 using System.Drawing;
 #endif
 using System.IO;
-
+using System.Reflection;
 #if !WINDOWS
 using System.Runtime.CompilerServices;
 #endif
@@ -44,163 +44,313 @@
 using Terraria.Map;
 using Terraria.Net;
 using Terraria.ObjectData;
-using Terraria.Social;
+//using Terraria.Social;
 using Terraria.UI;
 using Terraria.UI.Chat;
 using Terraria.Utilities;
 using Terraria.World.Generation;
-
 #if SERVER
 using Terraria.Server;
 #endif
+
 namespace Terraria
 {
-	#if CLIENT
+#if CLIENT
 	public class Main : Game
-
 #else
 	public class Main : Terraria.Server.Game
 #endif
 	{
+        public static bool CriticalMode = false;
+
 		public delegate void OnPlayerSelected(PlayerFileData player);
 
 		public const int offLimitBorderTiles = 40;
+
 		public const int maxItemTypes = 3602;
+
 		public const int maxProjectileTypes = 651;
+
 		public const int maxNPCTypes = 540;
+
 		public const int maxTileSets = 419;
+
 		public const int maxWallTypes = 225;
+
 		public const int maxBuffTypes = 191;
+
 		public const int maxGlowMasks = 214;
+
 		public const int maxExtras = 69;
+
 		public const int maxGoreTypes = 907;
+
 		public const int numBannerTypes = 251;
+
 		public const int numArmorHead = 194;
+
 		public const int numArmorBody = 195;
+
 		public const int numArmorLegs = 135;
+
 		public const int numAccHandsOn = 19;
+
 		public const int numAccHandsOff = 12;
+
 		public const int numAccNeck = 9;
+
 		public const int numAccBack = 10;
+
 		public const int numAccFront = 5;
+
 		public const int numAccShoes = 18;
+
 		public const int numAccWaist = 12;
+
 		public const int numAccShield = 6;
+
 		public const int numAccFace = 9;
+
 		public const int numAccBalloon = 16;
+
 		public const int maxWings = 37;
+
 		public const int maxBackgrounds = 207;
+
 		public const int numInfoIcons = 13;
+
 		private const int MF_BYPOSITION = 1024;
+
 		public const int sectionWidth = 200;
+
 		public const int sectionHeight = 150;
+
 		public const int maxDust = 6000;
+
 		public const int maxCombatText = 100;
+
 		public const int maxItemText = 20;
+
 		public const int maxPlayers = 255;
+
 		public const int maxChests = 1000;
+
 		public const int maxItems = 400;
+
 		public const int maxProjectiles = 1000;
+
 		public const int maxNPCs = 200;
+
 		private const double slimeRainMaxTime = 54000.0;
+
 		private const double slimeRainMinTime = 32400.0;
+
 		private const double slimeRainMaxDelay = 604800.0;
+
 		private const double slimeRainMinDelay = 302400.0;
+
 		private const double slimeRainChance = 1728000.0;
+
 		public const int maxGore = 500;
+
 		public const int realInventory = 50;
+
 		public const int maxInventory = 58;
+
 		public const int maxItemSounds = 125;
+
 		public const int maxNPCHitSounds = 57;
+
 		public const int maxNPCKilledSounds = 62;
+
 		public const int maxLiquidTypes = 12;
+
 		public const int maxMusic = 40;
+
 		public const double dayLength = 54000.0;
+
 		public const double nightLength = 32400.0;
+
 		public const int maxStars = 130;
+
 		public const int maxStarTypes = 5;
+
 		public const int maxClouds = 200;
+
 		public const int maxCloudTypes = 22;
+
 		public const int maxHair = 134;
+
 		public const int maxCharSelectHair = 51;
+
 		public const int MaxTimeout = 120;
+
 		public static bool HidePassword = false;
+
 		public static bool ThickMouse = false;
+
 		public static bool ReversedUpDownArmorSetBonuses = false;
+
 		public static uint ThickMousePackedColor = Microsoft.Xna.Framework.Color.White.PackedValue;
+
 		public static bool CaptureModeDisabled = false;
+
 		public bool unityMouseOver;
+
 		public static Main instance;
+
 		public static int curRelease = 156;
-		public static string versionNumber = "v1.3.0.8";
-		public static string versionNumber2 = "v1.3.0.8";
+
+		public static string versionNumber = "jopojelly's TerraCustom v0.2.1";
+
+		public static string versionNumber2 = "jopojelly's TerraCustom v0.2.1";
+
+		//
+		public static bool firstLoad = true;
+
+		public static string worldPrefix = null;
+
+		private static int worldCount = 0;
+
+		public static Setting setting = new Setting();
+
+		public static SettingSaver settingSaver = new SettingSaver();
+		//
+
 		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : PlatformUtilties.GetStoragePath();
+
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
+
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(Main.SavePath + "/favorites.json", false);
+
 		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);
+
 		public static FileMetadata WorldFileMetadata;
+
 		public static FileMetadata MapFileMetadata;
+
 		private AchievementManager _achievements;
+
 		private static List<SoundEffectInstance> ActiveSoundInstances = new List<SoundEffectInstance>(128);
+
 		public static UserInterface MenuUI = new UserInterface();
+
 		public static UserInterface InGameUI = new UserInterface();
+
 		private static Main.OnPlayerSelected _pendingCharacterSelect;
+
 		public static bool drawBackGore = false;
+
 		public static ulong LobbyId = 0uL;
+
 		private static object _audioLock = new object();
+
 		private static Microsoft.Xna.Framework.Color[] _mapColorCacheArray = new Microsoft.Xna.Framework.Color[30000];
+
 		public static float expertLife = 2f;
+
 		public static float expertDamage = 2f;
+
 		public static float expertDebuffTime = 2f;
+
 		public static float expertKnockBack = 0.9f;
+
 		public static float expertNPCDamage = 1.5f;
+
 		public static float knockBackMultiplier = 1f;
+
 		public static float damageMultiplier = 1f;
+
 		public WaterfallManager waterfallManager;
+
 		public static WorldSections sectionManager;
+
 		public static bool ServerSideCharacter = false;
+
 		public static string clientUUID;
+
 		public static bool ContentLoaded = false;
+
 		public static int maxMsg = 106;
+
 		private static int toolTipDistance = 6;
+
 		public static float GlobalTime = 0f;
+
 		public static bool GlobalTimerPaused = false;
+
 		private static ulong _tileFrameSeed = (ulong)((long)Guid.NewGuid().GetHashCode());
+
 		private static ulong _drawCycleCounter = 0uL;
+
 		public static Effect screenShader;
+
 		public static Effect pixelShader;
+
 		public static Effect tileShader;
+
 		public static int npcStreamSpeed = 60;
+
 		public static int musicError = 0;
+
 		public static bool dedServFPS = false;
+
 		public static int dedServCount1 = 0;
+
 		public static int dedServCount2 = 0;
+
 		public static bool superFast = false;
+
 		public static bool[] hairLoaded = new bool[134];
+
 		public static bool[] wingsLoaded = new bool[37];
+
 		public static bool[] goreLoaded = new bool[907];
+
 		public static bool[] projectileLoaded = new bool[651];
+
 		public static bool[] itemFlameLoaded = new bool[3602];
+
 		public static bool[] backgroundLoaded = new bool[207];
+
 		public static bool[] tileSetsLoaded = new bool[419];
+
 		public static bool[] wallLoaded = new bool[225];
+
 		public static bool[] NPCLoaded = new bool[540];
+
 		public static bool[] armorHeadLoaded = new bool[194];
+
 		public static bool[] armorBodyLoaded = new bool[195];
+
 		public static bool[] armorLegsLoaded = new bool[135];
+
 		public static bool[] accHandsOnLoaded = new bool[19];
+
 		public static bool[] accHandsOffLoaded = new bool[12];
+
 		public static bool[] accBackLoaded = new bool[10];
+
 		public static bool[] accFrontLoaded = new bool[5];
+
 		public static bool[] accShoesLoaded = new bool[18];
+
 		public static bool[] accWaistLoaded = new bool[12];
+
 		public static bool[] accShieldLoaded = new bool[6];
+
 		public static bool[] accNeckLoaded = new bool[9];
+
 		public static bool[] accFaceLoaded = new bool[9];
+
 		public static bool[] accballoonLoaded = new bool[16];
+
 		private static float cameraLerp = 0f;
+
 		private static int cameraLerpTimer = 0;
+
 		private static int cameraLerpTimeToggle = 0;
+
 		public static Vector2[] OffsetsNPCOffhand = new Vector2[]
 		{
 			new Vector2(14f, 34f),
@@ -209,6 +359,7 @@
 			new Vector2(14f, 22f),
 			new Vector2(14f, 18f)
 		};
+
 		public static Vector2[] OffsetsPlayerOffhand = new Vector2[]
 		{
 			new Vector2(14f, 20f),
@@ -232,6 +383,7 @@
 			new Vector2(16f, 16f),
 			new Vector2(16f, 16f)
 		};
+
 		public static Vector2[] OffsetsPlayerOnhand = new Vector2[]
 		{
 			new Vector2(6f, 19f),
@@ -255,6 +407,7 @@
 			new Vector2(7f, 17f),
 			new Vector2(7f, 17f)
 		};
+
 		public static Vector2[] OffsetsPlayerHeadgear = new Vector2[]
 		{
 			new Vector2(0f, 2f),
@@ -278,868 +431,1728 @@
 			new Vector2(0f, 2f),
 			new Vector2(0f, 2f)
 		};
+
 		public static float zoomX;
+
 		public static float zoomY;
+
 		public static float sunCircle;
+
 		public static int BlackFadeIn = 0;
+
 		public static bool noWindowBorder = false;
+
 		private Matrix Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
+
 		private RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;
+
 		private static string _cachedTitle;
+
 		public static int ugBack = 0;
+
 		public static int oldUgBack = 0;
+
 		public static int[] bgFrame = new int[1];
+
 		public static int[] bgFrameCounter = new int[1];
+
 		public static bool skipMenu = false;
+
 		public static bool verboseNetplay = false;
+
 		public static bool stopTimeOuts = false;
+
 		public static bool showSpam = false;
+
 		public static bool showItemOwner = false;
+
 		public static bool[] nextNPC = new bool[540];
+
 		public static int musicBox = -1;
+
 		public static int musicBox2 = -1;
+
 		public static byte hbPosition = 1;
+
 		public static bool cEd = false;
+
 		public static float wFrCounter = 0f;
+
 		public static float wFrame = 0f;
+
 		public static float upTimer;
+
 		public static float upTimerMax;
+
 		public static float upTimerMaxDelay;
+
 		public static bool drawDiag = false;
+
 		public static bool drawRelease = false;
+
 		public static bool drawBetterDebug = false;
+
 		public static bool betterDebugRelease = false;
+
 		public static bool renderNow = false;
+
 		public static bool drawToScreen = false;
+
 		public static bool targetSet = false;
+
 		public static int mouseX;
+
 		public static int mouseY;
+
 		public static int lastMouseX;
+
 		public static int lastMouseY;
+
 		public static bool mouseLeft;
+
 		public static bool mouseRight;
+
 		private static bool _isMouseLeftConsumedByUI = false;
+
 		public static float essScale = 1f;
+
 		public static int essDir = -1;
+
 		public static float[] cloudBGX = new float[2];
+
 		public static float cloudBGAlpha;
+
 		public static float cloudBGActive;
+
 		public static int[] cloudBG = new int[]
 		{
 			112,
 			113
 		};
+
 		public static int[] treeMntBG = new int[2];
+
 		public static int[] treeBG = new int[3];
+
 		public static int[] corruptBG = new int[3];
+
 		public static int[] jungleBG = new int[3];
+
 		public static int[] snowMntBG = new int[2];
+
 		public static int[] snowBG = new int[3];
+
 		public static int[] hallowBG = new int[3];
+
 		public static int[] crimsonBG = new int[3];
+
 		public static int[] desertBG = new int[2];
+
 		public static int oceanBG;
+
 		public static int[] treeX = new int[4];
-		public static int[] treeStyle = new int[4];
+
+		public static int[] treeStyle = new int[] { 6, 6, 6, 6 };
+
 		public static int[] caveBackX = new int[4];
+
 		public static int[] caveBackStyle = new int[4];
+
 		public static int iceBackStyle;
+
 		public static int hellBackStyle;
+
 		public static int jungleBackStyle;
+
 		public static string debugWords = "";
+
 		public static bool gamePad = false;
+
 		public static bool xMas = false;
+
 		public static bool halloween = false;
+
 		public static int snowDust = 0;
+
 		public static bool chTitle = false;
+
 		public static bool hairWindow = false;
+
 		public static bool clothesWindow = false;
+
 		public static bool ingameOptionsWindow = false;
+
 		public static bool achievementsWindow = false;
+
 		public static int keyCount = 0;
+
 		public static string[] keyString = new string[10];
+
 		public static int[] keyInt = new int[10];
+
 		public static byte gFade = 0;
+
 		public static float gFader = 0f;
+
 		public static byte gFadeDir = 1;
+
 		public static bool netDiag = false;
+
 		public static int txData = 0;
+
 		public static int rxData = 0;
+
 		public static int txMsg = 0;
+
 		public static int rxMsg = 0;
+
 		public static int[] rxMsgType = new int[Main.maxMsg];
+
 		public static int[] rxDataType = new int[Main.maxMsg];
+
 		public static int[] txMsgType = new int[Main.maxMsg];
+
 		public static int[] txDataType = new int[Main.maxMsg];
+
 		public static float uCarry = 0f;
+
 		public static bool drawSkip = false;
+
 		public static int fpsCount = 0;
+
 		public static Stopwatch fpsTimer = new Stopwatch();
+
 		public static Stopwatch updateTimer = new Stopwatch();
+
 		public bool gammaTest;
+
 		public static int fountainColor = -1;
+
 		public static int monolithType = -1;
+
 		public static bool showSplash = true;
+
 		public static bool ignoreErrors = true;
+
 		public static string defaultIP = "";
+
 		public static int dayRate = 1;
+
 		public static int maxScreenW = 1920;
+
 		public static int minScreenW = 800;
+
 		public static int maxScreenH = 1200;
+
 		public static int minScreenH = 600;
+
 		public static float iS = 1f;
+
 		public static bool render = false;
+
 		public static int qaStyle = 0;
+
 		public static int zoneX = 99;
+
 		public static int zoneY = 87;
+
 		public static float harpNote = 0f;
+
 		public static bool[] projHostile = new bool[651];
+
 		public static bool[] projHook = new bool[651];
+
 		public static bool[] pvpBuff = new bool[191];
+
 		public static bool[] persistentBuff = new bool[191];
+
 		public static bool[] vanityPet = new bool[191];
+
 		public static bool[] lightPet = new bool[191];
+
 		public static bool[] meleeBuff = new bool[191];
+
 		public static bool[] debuff = new bool[191];
+
 		public static string[] buffName = new string[191];
+
 		public static string[] buffTip = new string[191];
+
 		public static bool[] buffNoSave = new bool[191];
+
 		public static bool[] buffNoTimeDisplay = new bool[191];
+
 		public static bool[] buffDoubleApply = new bool[191];
+
 		public static int maxMP = 10;
+
 		public static string[] recentWorld = new string[Main.maxMP];
+
 		public static string[] recentIP = new string[Main.maxMP];
+
 		public static int[] recentPort = new int[Main.maxMP];
+
 		public static bool shortRender = true;
+
 		public static bool owBack = true;
+
+		public static int bgStylePreview = 1;
+
 		public static int quickBG = 2;
+
 		public static int bgDelay = 0;
+
 		public static int bgStyle = 0;
+
 		public static float[] bgAlpha = new float[10];
+
 		public static float[] bgAlpha2 = new float[10];
+
 		public static int EquipPage = 0;
+
 		public static int EquipPageSelected = 0;
+
 		public int mouseNPC = -1;
+
 		public static int wof = -1;
+
 		public static int wofT;
+
 		public static int wofB;
+
 		public static int wofF = 0;
+
 		public static int offScreenRange = 200;
+
 		private RenderTarget2D backWaterTarget;
+
 		private RenderTarget2D waterTarget;
+
 		private RenderTarget2D tileTarget;
+
 		private RenderTarget2D blackTarget;
+
 		private RenderTarget2D tile2Target;
+
 		private RenderTarget2D wallTarget;
+
 		private RenderTarget2D backgroundTarget;
+
 		private RenderTarget2D screenTarget;
+
 		public static int maxMapUpdates = 250000;
+
 		public static bool refreshMap = false;
+
 		public static int loadMapLastX = 0;
+
 		public static bool loadMapLock = false;
+
 		public static bool loadMap = false;
+
 		public static bool mapReady = false;
+
 		public static int textureMaxWidth = 2000;
+
 		public static int textureMaxHeight = 1800;
+
 		public static bool updateMap = false;
+
 		public static int mapMinX = 0;
+
 		public static int mapMaxX = 0;
+
 		public static int mapMinY = 0;
+
 		public static int mapMaxY = 0;
+
 		public static int mapTimeMax = 30;
+
 		public static int mapTime = Main.mapTimeMax;
+
 		public static bool clearMap;
+
 		public static int mapTargetX = 5;
+
 		public static int mapTargetY = 2;
+
 		private static bool flameRingLoaded;
+
 		private Texture2D flameRingTexture;
+
 		private Texture2D mapDeathTexture;
+
 		private RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
+
 		private RenderTarget2D mapSectionTexture;
+
 		public static bool[,] initMap = new bool[Main.mapTargetX, Main.mapTargetY];
+
 		public static bool[,] mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];
+
 		private Texture2D[] infoIconTexture = new Texture2D[13];
+
 		public static Texture2D[] clothesTexture = new Texture2D[4];
+
 		public static Texture2D[] mapIconTexture = new Texture2D[9];
+
 		private static Texture2D[] underworldTexture = new Texture2D[5];
+
 		public static Texture2D mapTexture;
+
 		private Texture2D mapBG1Texture;
+
 		private Texture2D mapBG2Texture;
+
 		private Texture2D mapBG3Texture;
+
 		private Texture2D mapBG4Texture;
+
 		private Texture2D mapBG5Texture;
+
 		private Texture2D mapBG6Texture;
+
 		private Texture2D mapBG7Texture;
+
 		private Texture2D mapBG8Texture;
+
 		private Texture2D mapBG9Texture;
+
 		private Texture2D mapBG10Texture;
+
 		private Texture2D mapBG11Texture;
+
 		private Texture2D mapBG12Texture;
+
 		private Texture2D mapBG13Texture;
+
 		private Texture2D mapBG14Texture;
+
 		private Texture2D mapBG15Texture;
+
 		private Texture2D hueTexture;
+
 		public static Texture2D colorSliderTexture;
+
 		public static Texture2D colorBarTexture;
+
 		public static Texture2D colorBlipTexture;
+
 		public static Texture2D smartDigTexture;
+
 		public static Microsoft.Xna.Framework.Color OurFavoriteColor = new Microsoft.Xna.Framework.Color(255, 231, 69);
+
 		public static Texture2D tileCrackTexture;
+
 		private Texture2D iceBarrierTexture;
+
 		public static bool mapInit = false;
+
 		public static bool mapEnabled = true;
+
 		public static int mapStyle = 1;
+
 		public static float grabMapX = 0f;
+
 		public static float grabMapY = 0f;
+
 		public static int miniMapX = 0;
+
 		public static int miniMapY = 0;
+
 		public static int miniMapWidth = 0;
+
 		public static int miniMapHeight = 0;
+
 		public static float mapMinimapScale = 1.25f;
+
 		public static float mapMinimapAlpha = 1f;
+
 		public static float mapOverlayScale = 2.5f;
+
 		public static float mapOverlayAlpha = 0.35f;
+
 		public static bool mapFullscreen = false;
+
 		public static bool resetMapFull = false;
+
 		public static float mapFullscreenScale = 4f;
+
 		public static Vector2 mapFullscreenPos = new Vector2(-1f, -1f);
+
 		private static bool IsEngineLoaded = false;
+
 		private int firstTileX;
+
 		private int lastTileX;
+
 		private int firstTileY;
+
 		private int lastTileY;
+
 		private double bgParallax;
+
 		private int bgStart;
+
 		private int bgLoops;
+
 		private int bgStartY;
+
 		private int bgLoopsY;
+
 		private int bgTop;
+
 		public static int renderCount = 99;
+
 		public static GraphicsDeviceManager graphics;
+
 		public static SpriteBatch spriteBatch;
+
 		public static TileBatch tileBatch;
+
 		public static GenerationProgress AutogenProgress = new GenerationProgress();
+
 		private Process tServer = new Process();
+
 		private static Stopwatch saveTime = new Stopwatch();
+
 		public static MouseState mouseState;
+
 		public static MouseState oldMouseState;
+
 		public static int oldMouseWheel;
+
 		public static KeyboardState keyState;
+
 		public static Microsoft.Xna.Framework.Color mcColor = new Microsoft.Xna.Framework.Color(125, 125, 255);
+
 		public static Microsoft.Xna.Framework.Color hcColor = new Microsoft.Xna.Framework.Color(200, 125, 255);
+
 		public static Microsoft.Xna.Framework.Color highVersionColor = new Microsoft.Xna.Framework.Color(255, 255, 0);
+
 		public static Microsoft.Xna.Framework.Color errorColor = new Microsoft.Xna.Framework.Color(255, 0, 0);
+
 		public static Microsoft.Xna.Framework.Color bgColor;
+
 		public static bool mouseHC = false;
+
 		public static bool craftingHide = false;
+
 		public static bool armorHide = false;
+
 		public static float craftingAlpha = 1f;
+
 		public static float armorAlpha = 1f;
+
 		public static float[] buffAlpha = new float[191];
+
 		public static bool hardMode = false;
+
 		public float chestLootScale = 1f;
+
 		public bool chestLootHover;
+
 		public float chestStackScale = 1f;
+
 		public bool chestStackHover;
+
 		public float chestDepositScale = 1f;
+
 		public bool chestDepositHover;
+
 		public float chestRenameScale = 1f;
+
 		public bool chestRenameHover;
+
 		public float chestCancelScale = 1f;
+
 		public bool chestCancelHover;
+
 		public static Vector2 sceneWaterPos = Vector2.Zero;
+
 		public static Vector2 sceneTilePos = Vector2.Zero;
+
 		public static Vector2 sceneTile2Pos = Vector2.Zero;
+
 		public static Vector2 sceneWallPos = Vector2.Zero;
+
 		public static Vector2 sceneBackgroundPos = Vector2.Zero;
+
 		public static bool maxQ = true;
+
 		public static float gfxQuality = 1f;
+
 		public static float gfxRate = 0.01f;
+
 		public int DiscoStyle;
+
 		public static int DiscoR = 255;
+
 		public static int DiscoB = 0;
+
 		public static int DiscoG = 0;
+
 		public static int teamCooldown = 0;
+
 		public static int teamCooldownLen = 300;
+
 		public static bool gamePaused = false;
+
 		public static bool gameInactive = false;
+
 		public static int updateTime = 0;
+
 		public static int drawTime = 0;
+
 		public static int uCount = 0;
+
 		public static int updateRate = 0;
+
 		public static int frameRate = 0;
+
 		public static bool RGBRelease = false;
+
 		public static bool qRelease = false;
+
 		public static bool netRelease = false;
+
 		public static bool frameRelease = false;
+
 		public static bool showFrameRate = false;
+
 		public static int magmaBGFrame = 0;
+
 		public static int magmaBGFrameCounter = 0;
+
 		public static int saveTimer = 0;
+
 		public static bool autoJoin = false;
+
 		public static bool serverStarting = false;
+
 		public static float leftWorld = 0f;
-		public static float rightWorld = 134400f;
+
+		public static float rightWorld = 134400f; // TODO changes here? *2   == 8400 * 16
+
 		public static float topWorld = 0f;
+
 		public static float bottomWorld = 38400f;
+
 		public static int maxTilesX = (int)Main.rightWorld / 16 + 1;
+
 		public static int maxTilesY = (int)Main.bottomWorld / 16 + 1;
+
 		public static int maxSectionsX = Main.maxTilesX / 200;
+
 		public static int maxSectionsY = Main.maxTilesY / 150;
+
 		public static int numDust = 6000;
+
 		public static int numPlayers = 0;
+
 		public static int maxNetPlayers = 255;
+
 		private static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
+
 		private static UIWorldSelect _worldSelectMenu = new UIWorldSelect();
+
 		public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();
+
 		public static int maxRain = 750;
+
 		public static int slimeWarningTime = 0;
+
 		public static int slimeWarningDelay = 420;
+
 		public static float slimeRainNPCSlots = 0.65f;
+
 		public static bool[] slimeRainNPC = new bool[540];
+
 		public static double slimeRainTime = 0.0;
+
 		public static bool slimeRain = false;
+
 		public static int slimeRainKillCount = 0;
+
 		public int invBottom = 210;
+
 		public static float cameraX = 0f;
+
 		public static bool drewLava = false;
+
 		public static float[] liquidAlpha = new float[12];
+
 		public static int waterStyle = 0;
+
 		public static int worldRate = 1;
+
 		public static float caveParallax = 0.88f;
+
 		public static int dungeonX;
+
 		public static int dungeonY;
+
 		public static Liquid[] liquid = new Liquid[Liquid.resLiquid];
+
 		public static LiquidBuffer[] liquidBuffer = new LiquidBuffer[10000];
+
 		public static bool dedServ = false;
+
 		public static int spamCount = 0;
+
 		public static int curMusic = 0;
+
 		public static int dayMusic = 0;
+
 		public static int ugMusic = 0;
+
 		public int newMusic;
+
 		public static bool showItemText = true;
+
 		public static bool autoSave = true;
+
 		public static bool validateSaves = true;
+
 		public static bool bannerMouseOver = false;
+
 		public static string buffString = "";
+
 		public static string libPath = "";
+
 		public static int lo = 0;
+
 		public static int LogoA = 255;
+
 		public static int LogoB = 0;
+
 		public static bool LogoT = false;
+
 		public static string statusText = "";
+
 		public static string worldName = "";
+
 		public static int worldID;
+
 		public static int background = 0;
+
 		public static int caveBackground = 0;
+
 		public static float ugBackTransition = 0f;
+
 		public static Microsoft.Xna.Framework.Color tileColor;
+
 		public static double worldSurface;
+
 		public static double rockLayer;
+
 		public static Microsoft.Xna.Framework.Color[] teamColor = new Microsoft.Xna.Framework.Color[6];
+
 		public static bool dayTime = true;
+
 		public static double time = 13500.0;
+
 		public static int moonPhase = 0;
+
 		public static short sunModY = 0;
+
 		public static short moonModY = 0;
+
 		public static bool grabSky = false;
+
 		public static bool bloodMoon = false;
+
 		public static bool pumpkinMoon = false;
+
 		public static bool snowMoon = false;
+
 		public static float cloudAlpha = 0f;
+
 		public static float maxRaining = 0f;
+
 		public static float oldMaxRaining = 0f;
+
 		public static int rainTime = 0;
+
 		public static bool raining = false;
+
 		public static bool eclipse = false;
+
 		public static float eclipseLight = 0f;
+
 		public static int checkForSpawns = 0;
+
 		public static int helpText = 0;
+
 		public static bool autoGen = false;
+
 		public static bool autoPause = false;
+
 		public static int[] projFrames = new int[651];
+
 		public static bool[] projPet = new bool[651];
+
 		public static float demonTorch = 1f;
+
 		public static int demonTorchDir = 1;
+
 		public static float martianLight = 1f;
+
 		public static int martianLightDir = 1;
+
 		public static bool placementPreview = true;
+
 		public static int numStars;
+
 		public static int weatherCounter = 0;
+
 		public static int cloudLimit = 200;
+
 		public static int numClouds = Main.cloudLimit;
+
 		public static int numCloudsTemp = Main.numClouds;
+
 		public static float windSpeedTemp = 0f;
+
 		public static float windSpeed = 0f;
+
 		public static float windSpeedSet = 0f;
+
 		public static float windSpeedSpeed = 0f;
+
 		public static Cloud[] cloud = new Cloud[200];
+
 		public static bool resetClouds = true;
+
 		public static int sandTiles;
+
 		public static int evilTiles;
+
 		public static int shroomTiles;
+
 		public static float shroomLight;
+
 		public static int snowTiles;
+
 		public static int holyTiles;
+
 		public static int waterCandles;
+
 		public static int peaceCandles;
+
 		public static int meteorTiles;
+
 		public static int bloodTiles;
+
 		public static int jungleTiles;
+
 		public static int dungeonTiles;
+
 		public static bool sunflower;
+
 		public static bool clock;
+
 		public static bool campfire;
+
 		public static bool starInBottle;
+
 		public static bool heartLantern;
+
 		public static int fadeCounter = 0;
+
 		public static float invAlpha = 1f;
+
 		public static float invDir = 1f;
+
 		[ThreadStatic]
 		public static Random rand;
+
 		public static Texture2D[] chestStackTexture = new Texture2D[2];
+
 		private static bool allChestStackHover = false;
+
 		public static Texture2D[] bannerTexture = new Texture2D[3];
+
 		public static Texture2D[] npcHeadTexture = new Texture2D[24];
+
 		public static Texture2D[] npcHeadBossTexture = new Texture2D[31];
+
 		public static Texture2D[] craftToggleTexture = new Texture2D[4];
+
 		public static Texture2D craftUpButtonTexture;
+
 		public static Texture2D craftDownButtonTexture;
+
 		public static Texture2D scrollLeftButtonTexture;
+
 		public static Texture2D scrollRightButtonTexture;
+
 		public static Texture2D frozenTexture;
+
 		public static Texture2D magicPixel;
+
 		public static Texture2D miniMapFrameTexture;
+
 		public static Texture2D miniMapFrame2Texture;
+
 		public static Texture2D[] miniMapButtonTexture = new Texture2D[3];
+
 		public static Texture2D[] destTexture = new Texture2D[3];
+
 		public static Texture2D[] gemTexture = new Texture2D[6];
+
 		public static Texture2D[] rudolphMountTexture = new Texture2D[3];
+
 		public static Texture2D bunnyMountTexture;
+
 		public static Texture2D pigronMountTexture;
+
 		public static Texture2D slimeMountTexture;
+
 		public static Texture2D minecartMountTexture;
+
 		public static Texture2D turtleMountTexture;
+
 		public static Texture2D[] beeMountTexture = new Texture2D[2];
+
 		public static Texture2D[] UFOMountTexture = new Texture2D[2];
+
 		public static Texture2D[] drillMountTexture = new Texture2D[6];
+
 		public static Texture2D[] scutlixMountTexture = new Texture2D[3];
+
 		public static Texture2D unicornMountTexture;
+
 		public static Texture2D[] minecartMechMountTexture = new Texture2D[2];
+
 		public static Texture2D[] cuteFishronMountTexture = new Texture2D[2];
+
 		public static Texture2D minecartWoodMountTexture;
+
 		public static Texture2D[] wingsTexture = new Texture2D[37];
+
 		public static Texture2D[] armorHeadTexture = new Texture2D[194];
+
 		public static Texture2D[] armorBodyTexture = new Texture2D[195];
+
 		public static Texture2D[] femaleBodyTexture = new Texture2D[195];
+
 		public static Texture2D[] armorArmTexture = new Texture2D[195];
+
 		public static Texture2D[] armorLegTexture = new Texture2D[135];
+
 		public static Texture2D[] accHandsOnTexture = new Texture2D[19];
+
 		public static Texture2D[] accHandsOffTexture = new Texture2D[12];
+
 		public static Texture2D[] accBackTexture = new Texture2D[10];
+
 		public static Texture2D[] accFrontTexture = new Texture2D[5];
+
 		public static Texture2D[] accShoesTexture = new Texture2D[18];
+
 		public static Texture2D[] accWaistTexture = new Texture2D[12];
+
 		public static Texture2D[] accShieldTexture = new Texture2D[6];
+
 		public static Texture2D[] accNeckTexture = new Texture2D[9];
+
 		public static Texture2D[] accFaceTexture = new Texture2D[9];
+
 		public static Texture2D[] accBalloonTexture = new Texture2D[16];
+
 		public static Texture2D pulleyTexture;
+
 		public static Texture2D[] xmasTree = new Texture2D[5];
+
 		public static Texture2D[] FlameTexture = new Texture2D[17];
+
 		public static Texture2D timerTexture;
+
 		public static Texture2D[] reforgeTexture = new Texture2D[2];
+
 		public static Texture2D wallOutlineTexture;
+
 		public static Texture2D actuatorTexture;
+
 		public static Texture2D wireTexture;
+
 		public static Texture2D wire2Texture;
+
 		public static Texture2D wire3Texture;
+
 		public static Texture2D[] cameraTexture = new Texture2D[8];
+
 		public static Texture2D flyingCarpetTexture;
+
 		public static Texture2D gridTexture;
+
 		public static Texture2D lightDiscTexture;
+
 		public static Texture2D EyeLaserTexture;
+
 		public static Texture2D BoneEyesTexture;
+
 		public static Texture2D BoneLaserTexture;
+
 		public static Texture2D trashTexture;
+
 		public static Texture2D fishingLineTexture;
+
 		public static Texture2D beetleTexture;
+
 		public static Texture2D probeTexture;
+
 		public static Texture2D eyeLaserSmallTexture;
+
 		public static Texture2D xmasLightTexture;
+
 		public static Texture2D[] golemTexture = new Texture2D[4];
+
 		public static Texture2D confuseTexture;
+
 		public static Texture2D sunOrbTexture;
+
 		public static Texture2D sunAltarTexture;
+
 		public static Texture2D[] chainsTexture = new Texture2D[16];
+
 		public static Texture2D chainTexture;
+
 		public static Texture2D[] gemChainTexture = new Texture2D[7];
+
 		public static Texture2D chain2Texture;
+
 		public static Texture2D chain3Texture;
+
 		public static Texture2D chain4Texture;
+
 		public static Texture2D chain5Texture;
+
 		public static Texture2D chain6Texture;
+
 		public static Texture2D chain7Texture;
+
 		public static Texture2D chain8Texture;
+
 		public static Texture2D chain9Texture;
+
 		public static Texture2D chain10Texture;
+
 		public static Texture2D chain11Texture;
+
 		public static Texture2D chain12Texture;
+
 		public static Texture2D chain13Texture;
+
 		public static Texture2D chain14Texture;
+
 		public static Texture2D chain15Texture;
+
 		public static Texture2D chain16Texture;
+
 		public static Texture2D chain17Texture;
+
 		public static Texture2D chain18Texture;
+
 		public static Texture2D chain19Texture;
+
 		public static Texture2D chain20Texture;
+
 		public static Texture2D chain21Texture;
+
 		public static Texture2D chain22Texture;
+
 		public static Texture2D chain23Texture;
+
 		public static Texture2D chain24Texture;
+
 		public static Texture2D chain25Texture;
+
 		public static Texture2D chain26Texture;
+
 		public static Texture2D chain27Texture;
+
 		public static Texture2D chain28Texture;
+
 		public static Texture2D chain29Texture;
+
 		public static Texture2D chain30Texture;
+
 		public static Texture2D chain31Texture;
+
 		public static Texture2D chain32Texture;
+
 		public static Texture2D chain33Texture;
+
 		public static Texture2D chain34Texture;
+
 		public static Texture2D chain35Texture;
+
 		public static Texture2D chain36Texture;
+
 		public static Texture2D chain37Texture;
+
 		public static Texture2D chain38Texture;
+
 		public static Texture2D chain39Texture;
+
 		public static Texture2D chain40Texture;
+
 		public static Texture2D hbTexture1;
+
 		public static Texture2D hbTexture2;
+
 		public static Texture2D chaosTexture;
+
 		public static Texture2D cdTexture;
+
 		public static Texture2D wofTexture;
+
 		public static Texture2D boneArmTexture;
+
 		public static Texture2D boneArm2Texture;
+
 		public static Texture2D pumpkingArmTexture;
+
 		public static Texture2D pumpkingCloakTexture;
+
 		public static Texture2D[] EquipPageTexture = new Texture2D[11];
+
 		public static Texture2D[] PVPTexture = new Texture2D[3];
+
 		public static Texture2D[] npcToggleTexture = new Texture2D[2];
+
 		public static Texture2D[] HBLockTexture = new Texture2D[2];
+
 		public static Texture2D[] buffTexture = new Texture2D[191];
+
 		public static Texture2D[] itemTexture = new Texture2D[3602];
+
 		public static Texture2D[] itemFlameTexture = new Texture2D[3602];
+
 		public static Texture2D[] npcTexture = new Texture2D[540];
+
 		public static Texture2D[] projectileTexture = new Texture2D[651];
+
 		public static Texture2D[] goreTexture = new Texture2D[907];
+
 		public static Texture2D[] BackPackTexture = new Texture2D[8];
+
 		public static Texture2D rainTexture;
+
 		public static Texture2D[] glowMaskTexture = new Texture2D[214];
+
 		public static Texture2D[] extraTexture = new Texture2D[69];
+
 		public static Texture2D[] coinTexture = new Texture2D[4];
+
 		public static Texture2D[] cursorTextures = new Texture2D[13];
+
 		public static Texture2D dustTexture;
+
 		public static Texture2D sunTexture;
+
 		public static Texture2D sun2Texture;
+
 		public static Texture2D sun3Texture;
+
 		public static int maxMoons = 3;
+
 		public static int moonType = 0;
+
 		public static Texture2D[] moonTexture = new Texture2D[Main.maxMoons];
+
 		public static Texture2D pumpkinMoonTexture;
+
 		public static Texture2D snowMoonTexture;
+
 		public static Texture2D oneDropLogo;
+
 		public static int numTileColors = 31;
+
 		public static RenderTarget2D[,] tileAltTexture = new RenderTarget2D[419, Main.numTileColors];
+
 		public static bool[,] tileAltTextureInit = new bool[419, Main.numTileColors];
+
 		public static bool[,] tileAltTextureDrawn = new bool[419, Main.numTileColors];
+
 		public static int numTreeStyles = 19;
+
 		public static RenderTarget2D[,] treeTopAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
+
 		public static RenderTarget2D[,] treeBranchAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
+
 		public static bool[,] treeAltTextureInit = new bool[Main.numTreeStyles, Main.numTileColors];
+
 		public static bool[,] treeAltTextureDrawn = new bool[Main.numTreeStyles, Main.numTileColors];
+
 		public static bool[,] checkTreeAlt = new bool[Main.numTreeStyles, Main.numTileColors];
+
 		public static RenderTarget2D[,] wallAltTexture = new RenderTarget2D[225, Main.numTileColors];
+
 		public static bool[,] wallAltTextureInit = new bool[225, Main.numTileColors];
+
 		public static bool[,] wallAltTextureDrawn = new bool[225, Main.numTileColors];
+
 		public static Texture2D[] tileTexture = new Texture2D[419];
+
 		public static Texture2D blackTileTexture;
+
 		public static Texture2D[] wallTexture = new Texture2D[225];
+
 		public static Texture2D[] backgroundTexture = new Texture2D[207];
+
 		public static Texture2D[] cloudTexture = new Texture2D[22];
+
 		public static Texture2D[] starTexture = new Texture2D[5];
+
 		public static Texture2D[] liquidTexture = new Texture2D[12];
+
 		public static Texture2D heartTexture;
+
 		public static Texture2D heart2Texture;
+
 		public static Texture2D manaTexture;
+
 		public static Texture2D bubbleTexture;
+
 		public static Texture2D flameTexture;
+
 		public static Texture2D[] treeTopTexture = new Texture2D[Main.numTreeStyles];
+
 		public static Texture2D[] treeBranchTexture = new Texture2D[Main.numTreeStyles];
+
 		public static Texture2D[] woodTexture = new Texture2D[7];
+
 		public static RenderTarget2D[,] woodAltTexture = new RenderTarget2D[Main.woodTexture.Length, Main.numTileColors];
+
 		public static Texture2D shroomCapTexture;
+
 		public static Texture2D inventoryBackTexture;
+
 		public static Texture2D inventoryBack2Texture;
+
 		public static Texture2D inventoryBack3Texture;
+
 		public static Texture2D inventoryBack4Texture;
+
 		public static Texture2D inventoryBack5Texture;
+
 		public static Texture2D inventoryBack6Texture;
+
 		public static Texture2D inventoryBack7Texture;
+
 		public static Texture2D inventoryBack8Texture;
+
 		public static Texture2D inventoryBack9Texture;
+
 		public static Texture2D inventoryBack10Texture;
+
 		public static Texture2D inventoryBack11Texture;
+
 		public static Texture2D inventoryBack12Texture;
+
 		public static Texture2D inventoryBack13Texture;
+
 		public static Texture2D inventoryBack14Texture;
+
 		public static Texture2D inventoryBack15Texture;
+
 		public static Texture2D hairStyleBackTexture;
+
 		public static Texture2D clothesStyleBackTexture;
+
 		public static Texture2D inventoryTickOnTexture;
+
 		public static Texture2D inventoryTickOffTexture;
+
 		public static Texture2D loTexture;
+
 		public static Texture2D logoTexture;
+
 		public static Texture2D logo2Texture;
+
 		public static Texture2D textBackTexture;
+
 		public static Texture2D chatTexture;
+
 		public static Texture2D chat2Texture;
+
 		public static Texture2D chatBackTexture;
+
 		public static Texture2D teamTexture;
+
 		public static Texture2D reTexture;
+
 		public static Texture2D raTexture;
+
 		public static Texture2D splashTexture;
+
 		public static Texture2D fadeTexture;
+
 		public static Texture2D ninjaTexture;
+
 		public static Texture2D antLionTexture;
+
 		public static Texture2D spikeBaseTexture;
+
 		public static Texture2D ghostTexture;
+
 		public static Texture2D evilCactusTexture;
+
 		public static Texture2D goodCactusTexture;
+
 		public static Texture2D crimsonCactusTexture;
+
 		public static Texture2D wraithEyeTexture;
+
 		public static Texture2D fireflyTexture;
+
 		public static Texture2D fireflyJarTexture;
+
 		public static Texture2D lightningbugTexture;
+
 		public static Texture2D lightningbugJarTexture;
+
 		public static Texture2D[] jellyfishBowlTexture = new Texture2D[3];
+
 		public static Texture2D glowSnailTexture;
+
 		public static Texture2D iceQueenTexture;
+
 		public static Texture2D santaTankTexture;
+
 		public static Texture2D reaperEyeTexture;
+
 		public static Texture2D jackHatTexture;
+
 		public static Texture2D treeFaceTexture;
+
 		public static Texture2D pumpkingFaceTexture;
+
 		public static Texture2D dukeFishronTexture;
+
 		public static Texture2D miniMinotaurTexture;
+
 		public static Texture2D[,] playerTextures;
+
 		public static Texture2D[] playerHairTexture = new Texture2D[134];
+
 		public static Texture2D[] playerHairAltTexture = new Texture2D[134];
+
 		public static SoundEffect[] soundDrip = new SoundEffect[3];
+
 		public static SoundEffectInstance[] soundInstanceDrip = new SoundEffectInstance[3];
+
 		public static SoundEffect[] soundLiquid = new SoundEffect[2];
+
 		public static SoundEffectInstance[] soundInstanceLiquid = new SoundEffectInstance[2];
+
 		public static SoundEffect[] soundMech = new SoundEffect[1];
+
 		public static SoundEffectInstance[] soundInstanceMech = new SoundEffectInstance[1];
+
 		public static SoundEffect[] soundDig = new SoundEffect[3];
+
 		public static SoundEffectInstance[] soundInstanceDig = new SoundEffectInstance[3];
+
 		public static SoundEffect[] soundTink = new SoundEffect[3];
+
 		public static SoundEffectInstance[] soundInstanceTink = new SoundEffectInstance[3];
+
 		public static SoundEffect[] soundCoin = new SoundEffect[5];
+
 		public static SoundEffectInstance[] soundInstanceCoin = new SoundEffectInstance[5];
+
 		public static SoundEffect[] soundPlayerHit = new SoundEffect[3];
+
 		public static SoundEffectInstance[] soundInstancePlayerHit = new SoundEffectInstance[3];
+
 		public static SoundEffect[] soundFemaleHit = new SoundEffect[3];
+
 		public static SoundEffectInstance[] soundInstanceFemaleHit = new SoundEffectInstance[3];
+
 		public static SoundEffect soundPlayerKilled;
+
 		public static SoundEffectInstance soundInstancePlayerKilled;
+
 		public static SoundEffect soundGrass;
+
 		public static SoundEffectInstance soundInstanceGrass;
+
 		public static SoundEffect soundGrab;
+
 		public static SoundEffectInstance soundInstanceGrab;
+
 		public static SoundEffect soundPixie;
+
 		public static SoundEffectInstance soundInstancePixie;
+
 		public static SoundEffect[] soundItem = new SoundEffect[126];
+
 		public static SoundEffectInstance[] soundInstanceItem = new SoundEffectInstance[126];
+
 		public static SoundEffect[] soundNPCHit = new SoundEffect[58];
+
 		public static SoundEffectInstance[] soundInstanceNPCHit = new SoundEffectInstance[58];
+
 		public static SoundEffect[] soundNPCKilled = new SoundEffect[63];
+
 		public static SoundEffectInstance[] soundInstanceNPCKilled = new SoundEffectInstance[63];
+
 		public static SoundEffectInstance soundInstanceMoonlordCry;
+
 		public static SoundEffect soundDoorOpen;
+
 		public static SoundEffectInstance soundInstanceDoorOpen;
+
 		public static SoundEffect soundDoorClosed;
+
 		public static SoundEffectInstance soundInstanceDoorClosed;
+
 		public static SoundEffect soundMenuOpen;
+
 		public static SoundEffectInstance soundInstanceMenuOpen;
+
 		public static SoundEffect soundMenuClose;
+
 		public static SoundEffectInstance soundInstanceMenuClose;
+
 		public static SoundEffect soundMenuTick;
+
 		public static SoundEffectInstance soundInstanceMenuTick;
+
 		public static SoundEffect soundShatter;
+
 		public static SoundEffectInstance soundInstanceShatter;
+
 		public static SoundEffect soundCamera;
+
 		public static SoundEffectInstance soundInstanceCamera;
+
 		public static SoundEffect[] soundZombie = new SoundEffect[106];
+
 		public static SoundEffectInstance[] soundInstanceZombie = new SoundEffectInstance[106];
+
 		public static SoundEffect[] soundRoar = new SoundEffect[3];
+
 		public static SoundEffectInstance[] soundInstanceRoar = new SoundEffectInstance[3];
+
 		public static SoundEffect[] soundSplash = new SoundEffect[2];
+
 		public static SoundEffectInstance[] soundInstanceSplash = new SoundEffectInstance[2];
+
 		public static SoundEffect soundDoubleJump;
+
 		public static SoundEffectInstance soundInstanceDoubleJump;
+
 		public static SoundEffect soundRun;
+
 		public static SoundEffectInstance soundInstanceRun;
+
 		public static SoundEffect soundCoins;
+
 		public static SoundEffectInstance soundInstanceCoins;
+
 		public static SoundEffect soundUnlock;
+
 		public static SoundEffectInstance soundInstanceUnlock;
+
 		public static SoundEffect soundChat;
+
 		public static SoundEffectInstance soundInstanceChat;
+
 		public static SoundEffect soundMaxMana;
+
 		public static SoundEffectInstance soundInstanceMaxMana;
+
 		public static SoundEffect soundDrown;
+
 		public static SoundEffectInstance soundInstanceDrown;
+
 		public static AudioEngine engine;
+
 		public static SoundBank soundBank;
+
 		public static WaveBank waveBank;
+
 		public static Cue[] music = new Cue[40];
+
 		public static float[] musicFade = new float[40];
+
 		public static float musicVolume = 0.75f;
+
 		public static float ambientVolume = 0.75f;
+
 		public static float soundVolume = 1f;
+
 		public static SpriteFont fontItemStack;
+
 		public static SpriteFont fontMouseText;
+
 		public static SpriteFont fontDeathText;
+
 		public static SpriteFont[] fontCombatText = new SpriteFont[2];
+
 		public static ServerMode MenuServerMode = ServerMode.Lobby | ServerMode.FriendsCanJoin;
+
 		public static bool[] tileLighted = new bool[419];
+
 		public static bool[] tileMergeDirt = new bool[419];
+
 		public static bool[] tileCut = new bool[419];
+
 		public static bool[] tileAlch = new bool[419];
+
 		public static int[] tileShine = new int[419];
+
 		public static bool[] tileShine2 = new bool[419];
+
 		public static bool[] wallHouse = new bool[225];
+
 		public static bool[] wallDungeon = new bool[225];
+
 		public static bool[] wallLight = new bool[225];
+
 		public static int[] wallBlend = new int[225];
+
 		public static bool[] tileStone = new bool[419];
+
 		public static bool[] tileAxe = new bool[419];
+
 		public static bool[] tileHammer = new bool[419];
+
 		public static bool[] tileWaterDeath = new bool[419];
+
 		public static bool[] tileLavaDeath = new bool[419];
+
 		public static bool[] tileTable = new bool[419];
+
 		public static bool[] tileBlockLight = new bool[419];
+
 		public static bool[] tileNoSunLight = new bool[419];
+
 		public static bool[] tileDungeon = new bool[419];
+
 		public static bool[] tileSpelunker = new bool[419];
+
 		public static bool[] tileSolidTop = new bool[419];
+
 		public static bool[] tileSolid = new bool[419];
+
 		public static bool[] tileBouncy = new bool[419];
+
 		public static short[] tileValue = new short[419];
+
 		public static byte[] tileLargeFrames = new byte[419];
+
 		public static byte[] wallLargeFrames = new byte[225];
+
 		public static bool[] tileRope = new bool[419];
+
 		public static bool[] tileBrick = new bool[419];
+
 		public static bool[] tileMoss = new bool[419];
+
 		public static bool[] tileNoAttach = new bool[419];
+
 		public static bool[] tileNoFail = new bool[419];
+
 		public static bool[] tileObsidianKill = new bool[419];
+
 		public static bool[] tileFrameImportant = new bool[419];
+
 		public static bool[] tilePile = new bool[419];
+
 		public static bool[] tileBlendAll = new bool[419];
+
 		public static short[] tileGlowMask = new short[419];
+
 		public static bool[] tileContainer = new bool[419];
+
 		public static bool[] tileSign = new bool[419];
+
 		public static bool[][] tileMerge = new bool[419][];
+
 		public static int cageFrames = 25;
+
 		public static bool critterCage = false;
+
 		public static int[] bunnyCageFrame = new int[Main.cageFrames];
+
 		public static int[] bunnyCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[] squirrelCageFrame = new int[Main.cageFrames];
+
 		public static int[] squirrelCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[] squirrelCageFrameOrange = new int[Main.cageFrames];
+
 		public static int[] squirrelCageFrameCounterOrange = new int[Main.cageFrames];
+
 		public static int[] mallardCageFrame = new int[Main.cageFrames];
+
 		public static int[] mallardCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[] duckCageFrame = new int[Main.cageFrames];
+
 		public static int[] duckCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[] birdCageFrame = new int[Main.cageFrames];
+
 		public static int[] birdCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[] redBirdCageFrame = new int[Main.cageFrames];
+
 		public static int[] redBirdCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[] blueBirdCageFrame = new int[Main.cageFrames];
+
 		public static int[] blueBirdCageFrameCounter = new int[Main.cageFrames];
+
 		public static byte[,] butterflyCageMode = new byte[9, Main.cageFrames];
+
 		public static int[,] butterflyCageFrame = new int[9, Main.cageFrames];
+
 		public static int[,] butterflyCageFrameCounter = new int[9, Main.cageFrames];
+
 		public static int[,] scorpionCageFrame = new int[2, Main.cageFrames];
+
 		public static int[,] scorpionCageFrameCounter = new int[2, Main.cageFrames];
+
 		public static int[] snailCageFrame = new int[Main.cageFrames];
+
 		public static int[] snailCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[] snail2CageFrame = new int[Main.cageFrames];
+
 		public static int[] snail2CageFrameCounter = new int[Main.cageFrames];
+
 		public static byte[] fishBowlFrameMode = new byte[Main.cageFrames];
+
 		public static int[] fishBowlFrame = new int[Main.cageFrames];
+
 		public static int[] fishBowlFrameCounter = new int[Main.cageFrames];
+
 		public static int[] frogCageFrame = new int[Main.cageFrames];
+
 		public static int[] frogCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[] mouseCageFrame = new int[Main.cageFrames];
+
 		public static int[] mouseCageFrameCounter = new int[Main.cageFrames];
+
 		public static byte[,] jellyfishCageMode = new byte[3, Main.cageFrames];
+
 		public static int[,] jellyfishCageFrame = new int[3, Main.cageFrames];
+
 		public static int[,] jellyfishCageFrameCounter = new int[3, Main.cageFrames];
+
 		public static int[] wormCageFrame = new int[Main.cageFrames];
+
 		public static int[] wormCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[] penguinCageFrame = new int[Main.cageFrames];
+
 		public static int[] penguinCageFrameCounter = new int[Main.cageFrames];
+
 		public static int[,] slugCageFrame = new int[3, Main.cageFrames];
+
 		public static int[,] slugCageFrameCounter = new int[3, Main.cageFrames];
+
 		public static int[] grasshopperCageFrame = new int[Main.cageFrames];
+
 		public static int[] grasshopperCageFrameCounter = new int[Main.cageFrames];
+
 		public static bool[] tileSand = new bool[419];
+
 		public static bool[] tileFlame = new bool[419];
+
 		public static bool[] npcCatchable = new bool[540];
+
 		public static int[] tileFrame = new int[419];
+
 		public static int[] tileFrameCounter = new int[419];
+
 		public static byte[] wallFrame = new byte[225];
+
 		public static byte[] wallFrameCounter = new byte[225];
+
 		public static int[] backgroundWidth = new int[207];
+
 		public static int[] backgroundHeight = new int[207];
+
 		public static bool tilesLoaded = false;
+
 		public static WorldMap Map = new WorldMap(Main.maxTilesX, Main.maxTilesY);
-		public static Tile[,] tile = new Tile[Main.maxTilesX, Main.maxTilesY];
+
+		public static Tile[,] tile = new Tile[Main.maxTilesX, Main.maxTilesY]; // Adjust
+
 		public static Dust[] dust = new Dust[6001];
+
 		public static Star[] star = new Star[130];
+
 		public static Item[] item = new Item[401];
+
 		public static int[] itemLockoutTime = new int[401];
+
 		public static NPC[] npc = new NPC[201];
+
 		public static Gore[] gore = new Gore[501];
+
 		public static Rain[] rain = new Rain[Main.maxRain + 1];
+
 		public static Projectile[] projectile = new Projectile[1001];
+
 		public static int[,] projectileIdentity = new int[256, 1001];
+
 		public static CombatText[] combatText = new CombatText[100];
+
 		public static ItemText[] itemText = new ItemText[20];
+
 		public static Chest[] chest = new Chest[1000];
+
 		public static Sign[] sign = new Sign[1000];
+
 		public static int[] itemFrame = new int[401];
+
 		public static int[] itemFrameCounter = new int[401];
+
 		public static DrawAnimation[] itemAnimations = new DrawAnimation[3602];
+
 		public static List<int> itemAnimationsRegistered = new List<int>();
+
 		public static Vector2 screenPosition;
+
 		public static Vector2 screenLastPosition;
+
 		public static int screenWidth = 1152;
+
 		public static int screenHeight = 864;
+
 		public static bool screenMaximized = false;
+
 		public static int chatLength = 600;
+
 		public static bool chatMode = false;
+
 		public static bool chatRelease = false;
+
 		public static int showCount = 10;
+
 		public static int numChatLines = 500;
+
 		public static int startChatLine = 0;
+
 		public static string chatText = "";
+
 		public static ChatLine[] chatLine = new ChatLine[Main.numChatLines];
+
 		public static bool inputTextEnter = false;
+
 		public static bool inputTextEscape = false;
+
 		public static float[] hotbarScale = new float[]
 		{
 			1f,
@@ -1153,53 +2166,101 @@
 			0.75f,
 			0.75f
 		};
+
 		public static byte mouseTextColor = 0;
+
 		public static int mouseTextColorChange = 1;
+
 		public static bool mouseLeftRelease = false;
+
 		public static bool mouseRightRelease = false;
+
 		public static bool playerInventory = false;
+
 		public static int stackSplit;
+
 		public static int stackCounter = 0;
+
 		public static int stackDelay = 7;
+
 		public static int superFastStack = 0;
+
 		public static Item mouseItem = new Item();
+
 		public static Item guideItem = new Item();
+
 		public static Item reforgeItem = new Item();
+
 		public static float inventoryScale = 0.75f;
+
 		public static bool hasFocus = true;
+
 		public static bool recFastScroll = false;
+
 		public static bool recBigList = false;
+
 		public static int recStart = 0;
-		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];
+
+//		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];
+
 		public static int[] availableRecipe = new int[Recipe.maxRecipes];
+
 		public static float[] availableRecipeY = new float[Recipe.maxRecipes];
+
 		public static int numAvailableRecipes;
+
 		public static int focusRecipe;
+
 		public static int myPlayer = 0;
+
 		public static Player[] player = new Player[256];
+
 		public static List<DrawData> playerDrawData = new List<DrawData>();
+
 		public static List<int> playerDrawDust = new List<int>();
+
 		public static List<int> playerDrawGore = new List<int>();
+
 		public static int spawnTileX;
+
 		public static int spawnTileY;
+
 		public static bool npcChatRelease = false;
+
 		public static bool editSign = false;
+
 		public static bool editChest = false;
+
 		public static bool blockInput = false;
+
 		public static Microsoft.Xna.Framework.Input.Keys blockKey = Microsoft.Xna.Framework.Input.Keys.None;
+
 		public static string defaultChestName = string.Empty;
+
 		public static string npcChatText = "";
+
 		public static bool npcChatFocus1 = false;
+
 		public static bool npcChatFocus2 = false;
+
 		public static bool npcChatFocus3 = false;
+
 		public static int npcShop = 0;
+
 		public static int numShops = 21;
+
 		public static int npcChatCornerItem = 0;
+
 		public Chest[] shop = new Chest[Main.numShops];
+
 		public static int[] travelShop = new int[40];
+
 		public static List<string> anglerWhoFinishedToday = new List<string>();
+
 		public static bool anglerQuestFinished;
+
 		public static int anglerQuest = 0;
+
 		public static int[] anglerQuestItemNetIDs = new int[]
 		{
 			2450,
@@ -1242,48 +2303,99 @@
 			2487,
 			2488
 		};
+
 		public static bool craftGuide = false;
+
 		public static bool reforge = false;
+
 		public static Item toolTip = new Item();
+
 		private static int backSpaceCount = 0;
+
 		public static string motd = "";
+
 		public static bool toggleFullscreen;
+
 		public static int numDisplayModes = 0;
+
 		public static int[] displayWidth = new int[99];
+
 		public static int[] displayHeight = new int[99];
+
 		public static bool gameMenu = true;
+
 		private static int maxLoadPlayer = 1000;
+
 		private static int maxLoadWorld = 1000;
+
 		public static List<PlayerFileData> PlayerList = new List<PlayerFileData>();
+
 		public static PlayerFileData ActivePlayerFileData = new PlayerFileData();
+
 		public static Player PendingPlayer = null;
+
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
+
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
+
 		public static string WorldPath = Main.SavePath + Path.DirectorySeparatorChar + "Worlds";
-		public static string CloudWorldPath = "worlds";
-		public static string PlayerPath = Main.SavePath + Path.DirectorySeparatorChar + "Players";
+
+		public static string TModLoaderWorldPath = Main.SavePath + Path.DirectorySeparatorChar + "ModLoader" + Path.DirectorySeparatorChar + "Worlds";
+
+        public static string LeveledWorldPath = Main.SavePath.Substring(0, Main.SavePath.Length - 8) + "Terraria Leveled" + Path.DirectorySeparatorChar + "Worlds";
+
+        public static string CloudWorldPath = "worlds";
+
+        public static string CloudLeveledWorldPath = "leveled worlds";
+
+        public static string PlayerPath = Main.SavePath + Path.DirectorySeparatorChar + "Players";
+
 		public static string CloudPlayerPath = "players";
+
 		public static Preferences Configuration = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "config.json", false, false);
+
+		public static string SettingPath = Main.SavePath + Path.DirectorySeparatorChar + "TerraCustom";
+
 		public static string[] itemName = new string[3602];
+
 		public static string[] npcName = new string[540];
+
 		private static KeyboardState inputText;
+
 		private static KeyboardState oldInputText;
+
 		public static int PendingResolutionWidth = 800;
+
 		public static int PendingResolutionHeight = 600;
+
 		public static int invasionType = 0;
+
 		public static double invasionX = 0.0;
+
 		public static int invasionSize = 0;
+
 		public static int invasionDelay = 0;
+
 		public static int invasionWarn = 0;
+
 		public static int invasionSizeStart = 0;
+
 		public static bool invasionProgressNearInvasion = false;
+
 		public static int invasionProgressMode = 2;
+
 		public static int invasionProgressIcon = 0;
+
 		public static int invasionProgress = 0;
+
 		public static int invasionProgressMax = 0;
+
 		public static int invasionProgressWave = 0;
+
 		public static int invasionProgressDisplayLeft = 0;
+
 		public static float invasionProgressAlpha = 0f;
+
 		public static int[] npcFrameCount = new int[]
 		{
 			1,
@@ -1827,136 +2939,267 @@
 			6,
 			6
 		};
+
 		public static Dictionary<int, byte> npcLifeBytes = new Dictionary<int, byte>();
+
 		private static bool mouseExit = false;
+
 		private static float exitScale = 0.8f;
+
 		private static bool mouseReforge = false;
+
 		private static float reforgeScale = 0.8f;
+
 		public static Player clientPlayer = new Player();
+
 		public static string getIP = Main.defaultIP;
+
 		public static string getPort = Convert.ToString(Netplay.ListenPort);
+
 		public static bool menuMultiplayer = false;
+
 		public static bool menuServer = false;
+
 		public static int netMode = 0;
+
 		private static int _targetNetMode = 0;
+
 		private static bool _hasPendingNetmodeChange = false;
+
 		public static int netPlayCounter;
+
 		public static int lastNPCUpdate;
+
 		public static int lastItemUpdate;
+
 		public static int maxNPCUpdates = 5;
+
 		public static int maxItemUpdates = 5;
+
 		public static string cUp = "W";
+
 		public static string cLeft = "A";
+
 		public static string cDown = "S";
+
 		public static string cRight = "D";
+
 		public static string cJump = "Space";
+
 		public static string cThrowItem = "T";
+
 		public static string cHeal = "H";
+
 		public static string cMana = "J";
+
 		public static string cBuff = "B";
+
 		public static string cHook = "E";
+
 		public static string cTorch = "LeftShift";
+
 		public static string cInv = "Escape";
+
 		public static string cSmart = "LeftControl";
+
 		public static string cMount = "R";
+
 		public static string cFavoriteKey = "LeftAlt";
+
 		public static bool cSmartToggle = true;
+
 		public static bool smartDigEnabled = false;
+
 		public static bool smartDigShowing = false;
+
 		public static int smartDigX;
+
 		public static int smartDigY;
+
 		public static int cursorOverride = -1;
+
 		public static int signHover = -1;
+
 		public static string cMapZoomIn = "Add";
+
 		public static string cMapZoomOut = "Subtract";
+
 		public static string cMapAlphaUp = "PageUp";
+
 		public static string cMapAlphaDown = "PageDown";
+
 		public static string cMapFull = "M";
+
 		public static string cMapStyle = "Tab";
+
 		public static Microsoft.Xna.Framework.Input.Keys FavoriteKey = Microsoft.Xna.Framework.Input.Keys.LeftAlt;
+
 		public static Microsoft.Xna.Framework.Color mouseColor = new Microsoft.Xna.Framework.Color(255, 50, 95);
+
 		public static Microsoft.Xna.Framework.Color cursorColor = Microsoft.Xna.Framework.Color.White;
+
 		public static int cursorColorDirection = 1;
+
 		public static float cursorAlpha = 0f;
+
 		public static float cursorScale = 0f;
+
 		public static bool signBubble = false;
+
 		public static int signX = 0;
+
 		public static int signY = 0;
+
 		public static bool hideUI = false;
+
 		public static bool releaseUI = false;
+
 		public static bool terrariasFixedTiming = true;
+
 		private int splashCounter;
+
 		public List<int> DrawCacheNPCsMoonMoon = new List<int>(200);
+
 		public List<int> DrawCacheNPCsOverPlayers = new List<int>(200);
+
 		public List<int> DrawCacheProjsBehindNPCsAndTiles = new List<int>(1000);
+
 		public List<int> DrawCacheProjsBehindNPCs = new List<int>(1000);
+
 		public List<int> DrawCacheProjsBehindProjectiles = new List<int>(1000);
+
 		public List<int> DrawCacheNPCProjectiles = new List<int>(200);
+
 		public static string oldStatusText = "";
+
 		public static bool autoShutdown = false;
+
 		public static bool serverGenLock = false;
+
 		public static int sundialCooldown = 0;
+
 		public static bool fastForwardTime = false;
+
 		public static float ambientWaterfallX = -1f;
+
 		public static float ambientWaterfallY = -1f;
+
 		public static float ambientWaterfallStrength = 0f;
+
 		public static float ambientLavafallX = -1f;
+
 		public static float ambientLavafallY = -1f;
+
 		public static float ambientLavafallStrength = 0f;
+
 		public static float ambientLavaX = -1f;
+
 		public static float ambientLavaY = -1f;
+
 		public static float ambientLavaStrength = 0f;
+
 		public static int ambientCounter = 0;
+
 		public static int ProjectileUpdateLoopIndex = -1;
+
 		private float logoRotation;
+
 		private float logoRotationDirection = 1f;
+
 		private float logoRotationSpeed = 1f;
+
 		private float logoScale = 1f;
+
 		private float logoScaleDirection = 1f;
+
 		private float logoScaleSpeed = 1f;
-		private static int maxMenuItems = 16;
+
+		public static int maxMenuItems = 16;
+
 		private float[] menuItemScale = new float[Main.maxMenuItems];
+
 		private int focusMenu = -1;
-		private int selectedMenu = -1;
-		private int selectedMenu2 = -1;
+
+		public int selectedMenu = -1;
+
+		public int selectedMenu2 = -1;
+
 		public static int selectedPlayer = 0;
+
 		public static int selectedWorld = 0;
+
 		public static int menuMode = 0;
+
 		public static int menuSkip = 0;
+
 		private static Item cpItem = new Item();
+
 		public int textBlinkerCount;
+
 		public int textBlinkerState;
+
 		public static string newWorldName = "";
+
 		private static int[] specX = new int[1000];
+
 		private static int[] specY = new int[1000];
+
 		public static string hoverItemName = "";
+
 		public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
+
 		public static bool mouseText = false;
+
 		private static int mH = 0;
+
 		private static int sX = Main.screenWidth - 800;
+
 		private static int starMana = 20;
+
 		private static float heartLife = 20f;
+
 		private static int rare = 0;
+
 		private static int hairStart = 0;
+
 		private static int oldHairStyle;
+
 		private static Microsoft.Xna.Framework.Color oldHairColor;
+
 		private static int selClothes = 0;
+
 		private static Microsoft.Xna.Framework.Color[] oldClothesColor = new Microsoft.Xna.Framework.Color[4];
+
 		public static int dresserX;
+
 		public static int dresserY;
+
 		public static Microsoft.Xna.Framework.Color selColor = Microsoft.Xna.Framework.Color.White;
+
 		public static int focusColor = 0;
+
 		public static int colorDelay = 0;
+
 		public static int setKey = -1;
+
 		public static int bgScroll = 0;
+
 		public static bool autoPass = false;
+
 		public static int menuFocus = 0;
+
 		private static float hBar = -1f;
+
 		private static float sBar = -1f;
+
 		private static float lBar = 1f;
+
 		private int grabColorSlider;
+
 		public static bool blockMouse = false;
+
 		private bool[] menuWide = new bool[100];
+
 		private static string[] MonolithFilterNames = new string[]
 		{
 			"MonolithVortex",
@@ -1964,6 +3207,7 @@
 			"MonolithStardust",
 			"MonolithSolar"
 		};
+
 		private static string[] MonolithSkyNames = new string[]
 		{
 			"MonolithVortex",
@@ -1971,17 +3215,36 @@
 			"MonolithStardust",
 			"MonolithSolar"
 		};
+
 		private static float tranSpeed = 0.05f;
+
 		private static float atmo = 0f;
+
 		private static float bgScale = 1f;
+
 		private static int bgW = (int)(1024f * Main.bgScale);
+
 		private static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
+
 		private static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;
+
 		private float screenOff;
+
 		private float scAdj;
+
 		private float cTop;
 
+
+		public static Texture2D TCTreeTops;
+		public static Texture2D TCMossColors;
+		public static Texture2D TCDungeonColors;
+
+
+
+		public int lastSelectedMenu = -1;
+
 		public static event Action OnEngineLoad;
+
 		public static event Action OnTick;
 
 		public static bool expertMode
@@ -2144,11 +3407,13 @@
 				flag = false;
 				Main.anglerQuest = Main.rand.Next(Main.anglerQuestItemNetIDs.Length);
 				int num = Main.anglerQuestItemNetIDs[Main.anglerQuest];
-				if (num == 2454 && (!Main.hardMode || WorldGen.crimson))
+				//if (num == 2454 && (!Main.hardMode || WorldGen.crimson))
+				if (num == 2454 && (!Main.hardMode || WorldGen.crimson || Main.setting.IsCorruption == 2 || Main.setting.IsCorruption != 4))
 				{
 					flag = true;
 				}
-				if (num == 2457 && WorldGen.crimson)
+				//if (num == 2457 && WorldGen.crimson)
+				if (num == 2457 && (WorldGen.crimson || Main.setting.IsCorruption == 2 || Main.setting.IsCorruption != 4))
 				{
 					flag = true;
 				}
@@ -2156,7 +3421,8 @@
 				{
 					flag = true;
 				}
-				if (num == 2463 && (!Main.hardMode || !WorldGen.crimson))
+				//if (num == 2463 && (!Main.hardMode || !WorldGen.crimson))
+				if (num == 2463 && (!Main.hardMode || !WorldGen.crimson || Main.setting.IsCorruption == 2 || Main.setting.IsCorruption != 4))
 				{
 					flag = true;
 				}
@@ -2176,7 +3442,8 @@
 				{
 					flag = true;
 				}
-				if (num == 2477 && !WorldGen.crimson)
+				//if (num == 2477 && !WorldGen.crimson)
+				if (num == 2477 && (!WorldGen.crimson || Main.setting.IsCorruption == 2 || Main.setting.IsCorruption != 4))
 				{
 					flag = true;
 				}
@@ -2192,7 +3459,8 @@
 				{
 					flag = true;
 				}
-				if (num == 2485 && WorldGen.crimson)
+				//if (num == 2485 && WorldGen.crimson)
+				if (num == 2485 && (WorldGen.crimson || Main.setting.IsCorruption == 2 || Main.setting.IsCorruption != 4))
 				{
 					flag = true;
 				}
@@ -2218,6 +3486,7 @@
 					Main.WorldList.Add(WorldFileData.FromInvalidWorld(files[i], false));
 				}
 			}
+			/*
 			if (SocialAPI.Cloud != null)
 			{
 				List<string> files2 = SocialAPI.Cloud.GetFiles(Regex.Escape(Main.CloudWorldPath) + "/.+\\.wld");
@@ -2234,6 +3503,7 @@
 					}
 				}
 			}
+			*/
 			Main.WorldList.Sort(new Comparison<WorldFileData>(Main.WorldListSortMethod));
 		}
 
@@ -2256,6 +3526,7 @@
 					Main.PlayerList.Add(fileData);
 				}
 			}
+			/*
 			if (SocialAPI.Cloud != null)
 			{
 				List<string> files2 = SocialAPI.Cloud.GetFiles(Regex.Escape(Main.CloudPlayerPath) + "/.+\\.plr");
@@ -2268,6 +3539,7 @@
 					}
 				}
 			}
+			*/
 			Main.PlayerList.Sort(new Comparison<PlayerFileData>(Main.PlayerListSortMethod));
 		}
 
@@ -2367,7 +3639,7 @@
 			Main.Configuration.Put("KeyMapAlphaUp", Main.cMapAlphaUp);
 			Main.Configuration.Put("KeyMapAlphaDown", Main.cMapAlphaDown);
 			Main.Configuration.Put("KeyFavoriteModifier", Main.cFavoriteKey);
-			Main.Configuration.Put("Fullscreen", Main.graphics.IsFullScreen);
+			//Main.Configuration.Put("Fullscreen", Main.graphics.IsFullScreen);
 			Main.Configuration.Put("WindowMaximized", Main.screenMaximized);
 			Main.Configuration.Put("DisplayWidth", Main.graphics.PreferredBackBufferWidth);
 			Main.Configuration.Put("DisplayHeight", Main.graphics.PreferredBackBufferHeight);
@@ -2486,7 +3758,7 @@
 			bool fullscreen = false;
 			int preferredBackBufferWidth = Main.graphics.PreferredBackBufferWidth;
 			int preferredBackBufferHeight = Main.graphics.PreferredBackBufferHeight;
-			Main.Configuration.Get<bool>("Fullscreen", ref fullscreen);
+			//Main.Configuration.Get<bool>("Fullscreen", ref fullscreen);
 			Main.Configuration.Get<int>("DisplayWidth", ref preferredBackBufferWidth);
 			Main.Configuration.Get<int>("DisplayHeight", ref preferredBackBufferHeight);
 			Main.mouseColor.R = Main.Configuration.Get<byte>("MouseColorR", Main.mouseColor.R);
@@ -2577,9 +3849,9 @@
 #endif
 								}
 #else
-								if (num < 91 || binaryReader.ReadBoolean())
-								{
-								}
+                                if (num < 91 || binaryReader.ReadBoolean())
+                                {
+                                }
 #endif
 								if (num >= 4)
 								{
@@ -2694,14 +3966,14 @@
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path);
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path + ".bak");
 #else
-					File.Delete(Main.WorldList[i].Path);
-					File.Delete(Main.WorldList[i].Path + ".bak");
+                    File.Delete(Main.WorldList[i].Path);
+                    File.Delete(Main.WorldList[i].Path + ".bak");
 #endif
 				}
-				else if (SocialAPI.Cloud != null)
-				{
-					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
-				}
+				//else if (SocialAPI.Cloud != null)
+				//{
+				//	SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
+				//}
 				Main.LoadWorlds();
 			}
 			catch
@@ -2732,46 +4004,46 @@
 			}
 			string text3 = cloudSave ? Main.CloudPlayerPath : Main.PlayerPath;
 			string path = string.Concat(new object[]
+			{
+				text3,
+				Path.DirectorySeparatorChar,
+				text,
+				".plr"
+			});
+			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
+			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
+			{
+				text += "_";
+			}
+			if (FileUtilities.Exists(string.Concat(new object[]
+			{
+				text3,
+				Path.DirectorySeparatorChar,
+				text,
+				".plr"
+			}), cloudSave))
+			{
+				int num = 2;
+				while (FileUtilities.Exists(string.Concat(new object[]
 				{
 					text3,
 					Path.DirectorySeparatorChar,
 					text,
+					num,
 					".plr"
-				});
-			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
-			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
-			{
-				text += "_";
-			}
-			if (FileUtilities.Exists(string.Concat(new object[]
-					{
-						text3,
-						Path.DirectorySeparatorChar,
-						text,
-						".plr"
-					}), cloudSave))
-			{
-				int num = 2;
-				while (FileUtilities.Exists(string.Concat(new object[]
-						{
-							text3,
-							Path.DirectorySeparatorChar,
-							text,
-							num,
-							".plr"
-						}), cloudSave))
+				}), cloudSave))
 				{
 					num++;
 				}
 				text += num;
 			}
 			return string.Concat(new object[]
-				{
-					text3,
-					Path.DirectorySeparatorChar,
-					text,
-					".plr"
-				});
+			{
+				text3,
+				Path.DirectorySeparatorChar,
+				text,
+				".plr"
+			});
 		}
 
 		public static string GetWorldPathFromName(string worldName, bool cloudSave)
@@ -2795,48 +4067,48 @@
 				}
 				text += str;
 			}
-			string text3 = cloudSave ? Main.CloudWorldPath : Main.WorldPath;
+			string text3 = cloudSave ? (Main.setting.generateLeveledRPGSave ? Main.CloudLeveledWorldPath : Main.CloudWorldPath) : (Main.setting.SaveInTModFolder ? Main.TModLoaderWorldPath : (Main.setting.generateLeveledRPGSave ? Main.LeveledWorldPath : Main.WorldPath));
 			string path = string.Concat(new object[]
+			{
+				text3,
+				Path.DirectorySeparatorChar,
+				text,
+				".wld"
+			});
+			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
+			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
+			{
+				text += "_";
+			}
+			if (FileUtilities.Exists(string.Concat(new object[]
+			{
+				text3,
+				Path.DirectorySeparatorChar,
+				text,
+				".wld"
+			}), cloudSave))
+			{
+				int num = 2;
+				while (FileUtilities.Exists(string.Concat(new object[]
 				{
 					text3,
 					Path.DirectorySeparatorChar,
 					text,
+					num,
 					".wld"
-				});
-			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
-			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
-			{
-				text += "_";
-			}
-			if (FileUtilities.Exists(string.Concat(new object[]
-					{
-						text3,
-						Path.DirectorySeparatorChar,
-						text,
-						".wld"
-					}), cloudSave))
-			{
-				int num = 2;
-				while (FileUtilities.Exists(string.Concat(new object[]
-						{
-							text3,
-							Path.DirectorySeparatorChar,
-							text,
-							num,
-							".wld"
-						}), cloudSave))
+				}), cloudSave))
 				{
 					num++;
 				}
 				text += num;
 			}
 			return string.Concat(new object[]
-				{
-					text3,
-					Path.DirectorySeparatorChar,
-					text,
-					".wld"
-				});
+			{
+				text3,
+				Path.DirectorySeparatorChar,
+				text,
+				".wld"
+			});
 		}
 
 		public void autoCreate(string worldSize)
@@ -3111,306 +4383,94 @@
 
 		public void DedServ()
 		{
-			Main.rand = new Random();
-			if (Main.autoShutdown)
-			{
-				string text = "terraria" + Main.rand.Next(2147483647);
-				Console.Title = text;
-#if WINDOWS
-				IntPtr intPtr = Main.FindWindow(null, text);
-				if (intPtr != IntPtr.Zero)
-				{
-					Main.ShowWindow(intPtr, 0);
-				}
-#endif
-			}
-			else
-			{
-				Console.Title = "Terraria Server " + Main.versionNumber2;
-			}
-			Main.dedServ = true;
-			Main.showSplash = false;
-			this.Initialize();
-			if (Lang.lang > 1)
-			{
-				Lang.setLang(true);
-			}
-			Lang.setLang(false);
-			for (int i = 0; i < 540; i++)
-			{
-				NPC nPC = new NPC();
-				nPC.SetDefaults(i, -1f);
-				Main.npcName[i] = nPC.name;
-			}
-			while (Main.worldPathName == null || Main.worldPathName == "")
-			{
-				bool flag = true;
-				while (flag)
-				{
-					Main.LoadWorlds();
-					Console.WriteLine("Terraria Server " + Main.versionNumber2);
-					Console.WriteLine("");
-					for (int j = 0; j < Main.WorldList.Count; j++)
-					{
-						Console.WriteLine(string.Concat(new object[]
-								{
-									j + 1,
+			/*
+						Main.rand = new Random();
+						if (Main.autoShutdown)
+						{
+							string text = "terraria" + Main.rand.Next(2147483647);
+							Console.Title = text;
+			#if WINDOWS
+							IntPtr intPtr = Main.FindWindow(null, text);
+							if (intPtr != IntPtr.Zero)
+							{
+								Main.ShowWindow(intPtr, 0);
+							}
+			#endif
+						}
+						else
+						{
+							Console.Title = "Terraria Server " + Main.versionNumber2;
+						}
+						Main.dedServ = true;
+						Main.showSplash = false;
+						this.Initialize();
+						if (Lang.lang > 1)
+						{
+							Lang.setLang(true);
+						}
+						Lang.setLang(false);
+						for (int i = 0; i < 540; i++)
+						{
+							NPC nPC = new NPC();
+							nPC.SetDefaults(i, -1f);
+							Main.npcName[i] = nPC.name;
+						}
+						while (Main.worldPathName == null || Main.worldPathName == "")
+						{
+							bool flag = true;
+							while (flag)
+							{
+								Main.LoadWorlds();
+								Console.WriteLine("Terraria Server " + Main.versionNumber2);
+								Console.WriteLine("");
+								for (int j = 0; j < Main.WorldList.Count; j++)
+								{
+									Console.WriteLine(string.Concat(new object[]
+									{
+										j + 1,
+										'\t',
+										'\t',
+										Main.WorldList[j].Name
+									}));
+								}
+								Console.WriteLine(string.Concat(new object[]
+								{
+									"n",
 									'\t',
 									'\t',
-									Main.WorldList[j].Name
+									"New World"
 								}));
-					}
-					Console.WriteLine(string.Concat(new object[]
-							{
-								"n",
-								'\t',
-								'\t',
-								"New World"
-							}));
-					Console.WriteLine("d <number>" + '\t' + "Delete World");
-					Console.WriteLine("");
-					Console.Write("Choose World: ");
-					string text2 = Console.ReadLine();
-					if (text2 == null)
-					{
-						text2 = "";
-					}
-					try
-					{
-						Console.Clear();
-					}
-					catch
-					{
-					}
-					if (text2.Length >= 2 && text2.Substring(0, 2).ToLower() == "d ")
-					{
-						try
-						{
-							int num = Convert.ToInt32(text2.Substring(2)) - 1;
-							if (num < Main.WorldList.Count)
-							{
-								Console.WriteLine("Terraria Server " + Main.versionNumber2);
+								Console.WriteLine("d <number>" + '\t' + "Delete World");
 								Console.WriteLine("");
-								Console.WriteLine("Really delete " + Main.WorldList[num].Name + "?");
-								Console.Write("(y/n): ");
-								string text3 = Console.ReadLine();
-								if (text3.ToLower() == "y")
-								{
-									Main.EraseWorld(num);
-								}
-							}
-						}
-						catch
-						{
-						}
-						try
-						{
-							Console.Clear();
-							continue;
-						}
-						catch
-						{
-							continue;
-						}
-					}
-					if (text2 == "n" || text2 == "N")
-					{
-						bool flag2 = true;
-						while (flag2)
-						{
-							Console.WriteLine("Terraria Server " + Main.versionNumber2);
-							Console.WriteLine("");
-							Console.WriteLine("1" + '\t' + "Small");
-							Console.WriteLine("2" + '\t' + "Medium");
-							Console.WriteLine("3" + '\t' + "Large");
-							Console.WriteLine("");
-							Console.Write("Choose size: ");
-							string value = Console.ReadLine();
-							try
-							{
-								int num2 = Convert.ToInt32(value);
-								if (num2 == 1)
-								{
-									Main.maxTilesX = 4200;
-									Main.maxTilesY = 1200;
-									flag2 = false;
-								}
-								else if (num2 == 2)
-								{
-									Main.maxTilesX = 6400;
-									Main.maxTilesY = 1800;
-									flag2 = false;
-								}
-								else if (num2 == 3)
-								{
-									Main.maxTilesX = 8400;
-									Main.maxTilesY = 2400;
-									flag2 = false;
-								}
-							}
-							catch
-							{
-							}
-							try
-							{
-								Console.Clear();
-							}
-							catch
-							{
-							}
-						}
-						flag2 = true;
-						while (flag2)
-						{
-							Console.WriteLine("Terraria Server " + Main.versionNumber2);
-							Console.WriteLine("");
-							Console.WriteLine("1" + '\t' + "Normal");
-							Console.WriteLine("2" + '\t' + "Expert");
-							Console.WriteLine("");
-							Console.Write("Choose difficulty: ");
-							string value = Console.ReadLine();
-							try
-							{
-								int num3 = Convert.ToInt32(value);
-								if (num3 == 1)
-								{
-									Main.expertMode = false;
-									flag2 = false;
-								}
-								else if (num3 == 2)
-								{
-									Main.expertMode = true;
-									flag2 = false;
-								}
-							}
-							catch
-							{
-							}
-							try
-							{
-								Console.Clear();
-							}
-							catch
-							{
-							}
-						}
-						flag2 = true;
-						while (flag2)
-						{
-							Console.WriteLine("Terraria Server " + Main.versionNumber2);
-							Console.WriteLine("");
-							Console.Write("Enter world name: ");
-							Main.newWorldName = Console.ReadLine();
-							if (Main.newWorldName != "" && Main.newWorldName != " " && Main.newWorldName != null)
-							{
-								flag2 = false;
-							}
-							try
-							{
-								Console.Clear();
-							}
-							catch
-							{
-							}
-						}
-						Main.worldName = Main.newWorldName;
-						Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.expertMode);
-						Main.menuMode = 10;
-						Main.serverGenLock = true;
-						GenerationProgress generationProgress = new GenerationProgress();
-						WorldGen.CreateNewWorld(generationProgress);
-						flag2 = false;
-						while (Main.menuMode == 10)
-						{
-							if (Main.oldStatusText != Main.statusText)
-							{
-								Main.oldStatusText = Main.statusText;
-								Console.WriteLine(Main.statusText);
-							}
-						}
-						try
-						{
-							Console.Clear();
-							goto IL_5DA;
-						}
-						catch
-						{
-							goto IL_5DA;
-						}
-						goto IL_57D;
-						IL_5DA:
-						if (!Main.serverGenLock)
-						{
-							continue;
-						}
-						IL_57D:
-						Main.statusText = string.Format("{0:0.0%} - " + generationProgress.Message + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
-						if (Main.oldStatusText != Main.statusText)
-						{
-							Main.oldStatusText = Main.statusText;
-							Console.WriteLine(Main.statusText);
-							goto IL_5DA;
-						}
-						goto IL_5DA;
-					}
-					else
-					{
-						try
-						{
-							int num4 = Convert.ToInt32(text2);
-							num4--;
-							if (num4 >= 0 && num4 < Main.WorldList.Count)
-							{
-								bool flag3 = true;
-								while (flag3)
-								{
-									Console.WriteLine("Terraria Server " + Main.versionNumber2);
-									Console.WriteLine("");
-									Console.Write("Max players (press enter for 8): ");
-									string text4 = Console.ReadLine();
+								Console.Write("Choose World: ");
+								string text2 = Console.ReadLine();
+								if (text2 == null)
+								{
+									text2 = "";
+								}
+								try
+								{
+									Console.Clear();
+								}
+								catch
+								{
+								}
+								if (text2.Length >= 2 && text2.Substring(0, 2).ToLower() == "d ")
+								{
 									try
 									{
-										if (text4 == "")
+										int num = Convert.ToInt32(text2.Substring(2)) - 1;
+										if (num < Main.WorldList.Count)
 										{
-											text4 = "8";
-										}
-										int num5 = Convert.ToInt32(text4);
-										if (num5 <= 255 && num5 >= 1)
-										{
-											Main.maxNetPlayers = num5;
-											flag3 = false;
-										}
-										flag3 = false;
-									}
-									catch
-									{
-									}
-									try
-									{
-										Console.Clear();
-									}
-									catch
-									{
-									}
-								}
-								flag3 = true;
-								while (flag3)
-								{
-									Console.WriteLine("Terraria Server " + Main.versionNumber2);
-									Console.WriteLine("");
-									Console.Write("Server port (press enter for 7777): ");
-									string text5 = Console.ReadLine();
-									try
-									{
-										if (text5 == "")
-										{
-											text5 = "7777";
-										}
-										int num6 = Convert.ToInt32(text5);
-										if (num6 <= 65535)
-										{
-											Netplay.ListenPort = num6;
-											flag3 = false;
+											Console.WriteLine("Terraria Server " + Main.versionNumber2);
+											Console.WriteLine("");
+											Console.WriteLine("Really delete " + Main.WorldList[num].Name + "?");
+											Console.Write("(y/n): ");
+											string text3 = Console.ReadLine();
+											if (text3.ToLower() == "y")
+											{
+												Main.EraseWorld(num);
+											}
 										}
 									}
 									catch
@@ -3419,148 +4479,362 @@
 									try
 									{
 										Console.Clear();
+										continue;
 									}
 									catch
 									{
+										continue;
 									}
 								}
-								flag3 = true;
-								while (flag3)
-								{
-									Console.WriteLine("Terraria Server " + Main.versionNumber2);
-									Console.WriteLine("");
-									Console.Write("Automatically forward port? (y/n): ");
-									string text6 = Console.ReadLine();
+								if (text2 == "n" || text2 == "N")
+								{
+									bool flag2 = true;
+									while (flag2)
+									{
+										Console.WriteLine("Terraria Server " + Main.versionNumber2);
+										Console.WriteLine("");
+										Console.WriteLine("1" + '\t' + "Small");
+										Console.WriteLine("2" + '\t' + "Medium");
+										Console.WriteLine("3" + '\t' + "Large");
+										Console.WriteLine("");
+										Console.Write("Choose size: ");
+										string value = Console.ReadLine();
+										try
+										{
+											int num2 = Convert.ToInt32(value);
+											if (num2 == 1)
+											{
+												Main.maxTilesX = 4200;
+												Main.maxTilesY = 1200;
+												flag2 = false;
+											}
+											else if (num2 == 2)
+											{
+												Main.maxTilesX = 6400;
+												Main.maxTilesY = 1800;
+												flag2 = false;
+											}
+											else if (num2 == 3)
+											{
+												Main.maxTilesX = 8400;
+												Main.maxTilesY = 2400;
+												flag2 = false;
+											}
+										}
+										catch
+										{
+										}
+										try
+										{
+											Console.Clear();
+										}
+										catch
+										{
+										}
+									}
+									flag2 = true;
+									while (flag2)
+									{
+										Console.WriteLine("Terraria Server " + Main.versionNumber2);
+										Console.WriteLine("");
+										Console.WriteLine("1" + '\t' + "Normal");
+										Console.WriteLine("2" + '\t' + "Expert");
+										Console.WriteLine("");
+										Console.Write("Choose difficulty: ");
+										string value = Console.ReadLine();
+										try
+										{
+											int num3 = Convert.ToInt32(value);
+											if (num3 == 1)
+											{
+												Main.expertMode = false;
+												flag2 = false;
+											}
+											else if (num3 == 2)
+											{
+												Main.expertMode = true;
+												flag2 = false;
+											}
+										}
+										catch
+										{
+										}
+										try
+										{
+											Console.Clear();
+										}
+										catch
+										{
+										}
+									}
+									flag2 = true;
+									while (flag2)
+									{
+										Console.WriteLine("Terraria Server " + Main.versionNumber2);
+										Console.WriteLine("");
+										Console.Write("Enter world name: ");
+										Main.newWorldName = Console.ReadLine();
+										if (Main.newWorldName != "" && Main.newWorldName != " " && Main.newWorldName != null)
+										{
+											flag2 = false;
+										}
+										try
+										{
+											Console.Clear();
+										}
+										catch
+										{
+										}
+									}
+									Main.worldName = Main.newWorldName;
+									Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.expertMode);
+									Main.menuMode = 10;
+									Main.serverGenLock = true;
+									GenerationProgress generationProgress = new GenerationProgress();
+									WorldGen.CreateNewWorld(generationProgress);
+									flag2 = false;
+									while (Main.menuMode == 10)
+									{
+										if (Main.oldStatusText != Main.statusText)
+										{
+											Main.oldStatusText = Main.statusText;
+											Console.WriteLine(Main.statusText);
+										}
+									}
 									try
 									{
-										if (text6 == "" || text6.ToLower() == "y" || text6.ToLower() == "yes")
+										Console.Clear();
+										goto IL_5DA;
+									}
+									catch
+									{
+										goto IL_5DA;
+									}
+									goto IL_57D;
+									IL_5DA:
+									if (!Main.serverGenLock)
+									{
+										continue;
+									}
+									IL_57D:
+									Main.statusText = string.Format("{0:0.0%} - " + generationProgress.Message + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
+									if (Main.oldStatusText != Main.statusText)
+									{
+										Main.oldStatusText = Main.statusText;
+										Console.WriteLine(Main.statusText);
+										goto IL_5DA;
+									}
+									goto IL_5DA;
+								}
+								else
+								{
+									try
+									{
+										int num4 = Convert.ToInt32(text2);
+										num4--;
+										if (num4 >= 0 && num4 < Main.WorldList.Count)
 										{
-											Netplay.UseUPNP = true;
-											flag3 = false;
-										}
-										else if (text6.ToLower() == "n" || text6.ToLower() == "no")
-										{
-											Netplay.UseUPNP = false;
-											flag3 = false;
+											bool flag3 = true;
+											while (flag3)
+											{
+												Console.WriteLine("Terraria Server " + Main.versionNumber2);
+												Console.WriteLine("");
+												Console.Write("Max players (press enter for 8): ");
+												string text4 = Console.ReadLine();
+												try
+												{
+													if (text4 == "")
+													{
+														text4 = "8";
+													}
+													int num5 = Convert.ToInt32(text4);
+													if (num5 <= 255 && num5 >= 1)
+													{
+														Main.maxNetPlayers = num5;
+														flag3 = false;
+													}
+													flag3 = false;
+												}
+												catch
+												{
+												}
+												try
+												{
+													Console.Clear();
+												}
+												catch
+												{
+												}
+											}
+											flag3 = true;
+											while (flag3)
+											{
+												Console.WriteLine("Terraria Server " + Main.versionNumber2);
+												Console.WriteLine("");
+												Console.Write("Server port (press enter for 7777): ");
+												string text5 = Console.ReadLine();
+												try
+												{
+													if (text5 == "")
+													{
+														text5 = "7777";
+													}
+													int num6 = Convert.ToInt32(text5);
+													if (num6 <= 65535)
+													{
+														Netplay.ListenPort = num6;
+														flag3 = false;
+													}
+												}
+												catch
+												{
+												}
+												try
+												{
+													Console.Clear();
+												}
+												catch
+												{
+												}
+											}
+											flag3 = true;
+											while (flag3)
+											{
+												Console.WriteLine("Terraria Server " + Main.versionNumber2);
+												Console.WriteLine("");
+												Console.Write("Automatically forward port? (y/n): ");
+												string text6 = Console.ReadLine();
+												try
+												{
+													if (text6 == "" || text6.ToLower() == "y" || text6.ToLower() == "yes")
+													{
+														Netplay.UseUPNP = true;
+														flag3 = false;
+													}
+													else if (text6.ToLower() == "n" || text6.ToLower() == "no")
+													{
+														Netplay.UseUPNP = false;
+														flag3 = false;
+													}
+												}
+												catch
+												{
+												}
+												try
+												{
+													Console.Clear();
+												}
+												catch
+												{
+												}
+											}
+											Console.WriteLine("Terraria Server " + Main.versionNumber2);
+											Console.WriteLine("");
+											Console.Write("Server password (press enter for none): ");
+											Netplay.ServerPassword = Console.ReadLine();
+											Main.ActiveWorldFileData = Main.WorldList[num4];
+											flag = false;
+											try
+											{
+												Console.Clear();
+											}
+											catch
+											{
+											}
 										}
 									}
 									catch
 									{
 									}
-									try
+								}
+							}
+						}
+						try
+						{
+							Console.Clear();
+						}
+						catch
+						{
+						}
+						WorldGen.serverLoadWorld();
+						Console.WriteLine("Terraria Server " + Main.versionNumber);
+						Console.WriteLine("");
+						while (!Netplay.IsServerRunning)
+						{
+							if (Main.AutogenProgress.TotalProgress != 0f)
+							{
+								Main.statusText = string.Format("{0:0.0%} - " + Main.AutogenProgress.Message + " - {1:0.0%}", Main.AutogenProgress.TotalProgress, Main.AutogenProgress.Value);
+							}
+							if (Main.oldStatusText != Main.statusText)
+							{
+								Main.oldStatusText = Main.statusText;
+								Console.WriteLine(Main.statusText);
+							}
+						}
+						try
+						{
+							Console.Clear();
+						}
+						catch
+						{
+						}
+						Console.WriteLine("Terraria Server " + Main.versionNumber);
+						Console.WriteLine("");
+						Console.WriteLine("Listening on port " + Netplay.ListenPort);
+						Console.WriteLine("Type 'help' for a list of commands.");
+						Console.WriteLine("");
+						Console.Title = "Terraria Server: " + Main.worldName;
+						Stopwatch stopwatch = new Stopwatch();
+						if (!Main.autoShutdown)
+						{
+							Main.startDedInput();
+						}
+						stopwatch.Start();
+						double num7 = 16.666666666666668;
+						double num8 = 0.0;
+						int num9 = 0;
+						Stopwatch stopwatch2 = new Stopwatch();
+						stopwatch2.Start();
+						while (!Netplay.disconnect)
+						{
+							double num10 = (double)stopwatch.ElapsedMilliseconds;
+							if (num10 + num8 >= num7)
+							{
+								num9++;
+								num8 += num10 - num7;
+								stopwatch.Reset();
+								stopwatch.Start();
+								if (Main.oldStatusText != Main.statusText)
+								{
+									Main.oldStatusText = Main.statusText;
+									Console.WriteLine(Main.statusText);
+								}
+								if (Netplay.anyClients)
+								{
+									this.Update(new GameTime());
+								}
+								if (Main.OnTick != null)
+								{
+									Main.OnTick();
+								}
+								double num11 = (double)stopwatch.ElapsedMilliseconds + num8;
+								if (num11 < num7)
+								{
+									int num12 = (int)(num7 - num11) - 1;
+									if (num12 > 1)
 									{
-										Console.Clear();
+										Thread.Sleep(num12 - 1);
+										if (!Netplay.anyClients)
+										{
+											num8 = 0.0;
+											Thread.Sleep(10);
+										}
 									}
-									catch
-									{
-									}
-								}
-								Console.WriteLine("Terraria Server " + Main.versionNumber2);
-								Console.WriteLine("");
-								Console.Write("Server password (press enter for none): ");
-								Netplay.ServerPassword = Console.ReadLine();
-								Main.ActiveWorldFileData = Main.WorldList[num4];
-								flag = false;
-								try
-								{
-									Console.Clear();
-								}
-								catch
-								{
-								}
-							}
-						}
-						catch
-						{
-						}
-					}
-				}
-			}
-			try
-			{
-				Console.Clear();
-			}
-			catch
-			{
-			}
-			WorldGen.serverLoadWorld();
-			Console.WriteLine("Terraria Server " + Main.versionNumber);
-			Console.WriteLine("");
-			while (!Netplay.IsServerRunning)
-			{
-				if (Main.AutogenProgress.TotalProgress != 0f)
-				{
-					Main.statusText = string.Format("{0:0.0%} - " + Main.AutogenProgress.Message + " - {1:0.0%}", Main.AutogenProgress.TotalProgress, Main.AutogenProgress.Value);
-				}
-				if (Main.oldStatusText != Main.statusText)
-				{
-					Main.oldStatusText = Main.statusText;
-					Console.WriteLine(Main.statusText);
-				}
-			}
-			try
-			{
-				Console.Clear();
-			}
-			catch
-			{
-			}
-			Console.WriteLine("Terraria Server " + Main.versionNumber);
-			Console.WriteLine("");
-			Console.WriteLine("Listening on port " + Netplay.ListenPort);
-			Console.WriteLine("Type 'help' for a list of commands.");
-			Console.WriteLine("");
-			Console.Title = "Terraria Server: " + Main.worldName;
-			Stopwatch stopwatch = new Stopwatch();
-			if (!Main.autoShutdown)
-			{
-				Main.startDedInput();
-			}
-			stopwatch.Start();
-			double num7 = 16.666666666666668;
-			double num8 = 0.0;
-			int num9 = 0;
-			Stopwatch stopwatch2 = new Stopwatch();
-			stopwatch2.Start();
-			while (!Netplay.disconnect)
-			{
-				double num10 = (double)stopwatch.ElapsedMilliseconds;
-				if (num10 + num8 >= num7)
-				{
-					num9++;
-					num8 += num10 - num7;
-					stopwatch.Reset();
-					stopwatch.Start();
-					if (Main.oldStatusText != Main.statusText)
-					{
-						Main.oldStatusText = Main.statusText;
-						Console.WriteLine(Main.statusText);
-					}
-					if (Netplay.anyClients)
-					{
-						this.Update(new GameTime());
-					}
-					if (Main.OnTick != null)
-					{
-						Main.OnTick();
-					}
-					double num11 = (double)stopwatch.ElapsedMilliseconds + num8;
-					if (num11 < num7)
-					{
-						int num12 = (int)(num7 - num11) - 1;
-						if (num12 > 1)
-						{
-							Thread.Sleep(num12 - 1);
-							if (!Netplay.anyClients)
-							{
-								num8 = 0.0;
-								Thread.Sleep(10);
-							}
-						}
-					}
-				}
-				Thread.Sleep(0);
-			}
+								}
+							}
+							Thread.Sleep(0);
+			}
+			*/
 		}
 
 		public static void startDedInput()
@@ -3583,99 +4857,99 @@
 						Console.WriteLine("Available commands:");
 						Console.WriteLine("");
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"help ",
-									'\t',
-									'\t',
-									" Displays a list of commands."
-								}));
+						{
+							"help ",
+							'\t',
+							'\t',
+							" Displays a list of commands."
+						}));
 						Console.WriteLine("playing " + '\t' + " Shows the list of players");
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"clear ",
-									'\t',
-									'\t',
-									" Clear the console window."
-								}));
+						{
+							"clear ",
+							'\t',
+							'\t',
+							" Clear the console window."
+						}));
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"exit ",
-									'\t',
-									'\t',
-									" Shutdown the server and save."
-								}));
+						{
+							"exit ",
+							'\t',
+							'\t',
+							" Shutdown the server and save."
+						}));
 						Console.WriteLine("exit-nosave " + '\t' + " Shutdown the server without saving.");
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"save ",
-									'\t',
-									'\t',
-									" Save the game world."
-								}));
+						{
+							"save ",
+							'\t',
+							'\t',
+							" Save the game world."
+						}));
 						Console.WriteLine("kick <player> " + '\t' + " Kicks a player from the server.");
 						Console.WriteLine("ban <player> " + '\t' + " Bans a player from the server.");
 						Console.WriteLine("password" + '\t' + " Show password.");
 						Console.WriteLine("password <pass>" + '\t' + " Change password.");
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"version",
-									'\t',
-									'\t',
-									" Print version number."
-								}));
+						{
+							"version",
+							'\t',
+							'\t',
+							" Print version number."
+						}));
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"time",
-									'\t',
-									'\t',
-									" Display game time."
-								}));
+						{
+							"time",
+							'\t',
+							'\t',
+							" Display game time."
+						}));
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"port",
-									'\t',
-									'\t',
-									" Print the listening port."
-								}));
+						{
+							"port",
+							'\t',
+							'\t',
+							" Print the listening port."
+						}));
 						Console.WriteLine("maxplayers" + '\t' + " Print the max number of players.");
 						Console.WriteLine("say <words>" + '\t' + " Send a message.");
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"motd",
-									'\t',
-									'\t',
-									" Print MOTD."
-								}));
+						{
+							"motd",
+							'\t',
+							'\t',
+							" Print MOTD."
+						}));
 						Console.WriteLine("motd <words>" + '\t' + " Change MOTD.");
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"dawn",
-									'\t',
-									'\t',
-									" Change time to dawn."
-								}));
+						{
+							"dawn",
+							'\t',
+							'\t',
+							" Change time to dawn."
+						}));
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"noon",
-									'\t',
-									'\t',
-									" Change time to noon."
-								}));
+						{
+							"noon",
+							'\t',
+							'\t',
+							" Change time to noon."
+						}));
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"dusk",
-									'\t',
-									'\t',
-									" Change time to dusk."
-								}));
+						{
+							"dusk",
+							'\t',
+							'\t',
+							" Change time to dusk."
+						}));
 						Console.WriteLine("midnight" + '\t' + " Change time to midnight.");
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"settle",
-									'\t',
-									'\t',
-									" Settle all water."
-								}));
+						{
+							"settle",
+							'\t',
+							'\t',
+							" Settle all water."
+						}));
 					}
 					else if (text == "settle")
 					{
@@ -3720,7 +4994,7 @@
 					{
 						WorldFile.saveWorld();
 						Netplay.disconnect = true;
-						SocialAPI.Shutdown();
+						//SocialAPI.Shutdown();
 					}
 					else if (text == "fps")
 					{
@@ -3776,14 +5050,14 @@
 							num3 = 12;
 						}
 						Console.WriteLine(string.Concat(new object[]
-								{
-									"Time: ",
-									num3,
-									":",
-									text4,
-									" ",
-									text3
-								}));
+						{
+							"Time: ",
+							num3,
+							":",
+							text4,
+							" ",
+							text3
+						}));
 					}
 					else if (text == "maxplayers")
 					{
@@ -3820,12 +5094,12 @@
 								{
 									num5++;
 									Console.WriteLine(string.Concat(new object[]
-											{
-												Main.player[i].name,
-												" (",
-												Netplay.Clients[i].Socket.GetRemoteAddress(),
-												")"
-											}));
+									{
+										Main.player[i].name,
+										" (",
+										Netplay.Clients[i].Socket.GetRemoteAddress(),
+										")"
+									}));
 								}
 							}
 							if (num5 == 0)
@@ -3994,6 +5268,17 @@
 			Main.graphics = new GraphicsDeviceManager((Game)this);
 			base.Content.RootDirectory = "Content";
 #endif
+			// Terraria.app/Contents/MacOS/Terraria.exe
+			// Terraria.app/Contents/MacOS/Content/
+#if MAC
+			//base.Content.RootDirectory = ".."+ Path.DirectorySeparatorChar + 
+			//	".." + Path.DirectorySeparatorChar +
+			//	".." + Path.DirectorySeparatorChar +
+			//	"Terraria.app" +Path.DirectorySeparatorChar +
+			//	"Contents" + Path.DirectorySeparatorChar +
+			//	"MacOS" +Path.DirectorySeparatorChar + 
+			//	"Content";
+#endif
 		}
 
 		protected void SetTitle()
@@ -4001,7 +5286,7 @@
 #if CLIENT
 			if (Main._cachedTitle == null)
 			{
-				Main._cachedTitle = Lang.title();
+				Main._cachedTitle = "TerraCustom";// Lang.title();
 			}
 			base.Window.Title = Main._cachedTitle;
 #endif
@@ -5165,10 +6450,10 @@
 			this.SetTitle();
 			Main.lo = Main.rand.Next(6);
 			Main.critterCage = true;
-			for (int num3 = 0; num3 < 3600; num3++)
-			{
-				Main.CritterCages();
-			}
+			//for (int num3 = 0; num3 < 3600; num3++)
+			//{
+			//	Main.CritterCages();
+			//}
 			Main.critterCage = false;
 			Main.tileBrick[1] = true;
 			Main.tileBrick[54] = true;
@@ -6184,11 +7469,11 @@
 			}
 			for (int num12 = 0; num12 < 1001; num12++)
 			{
-				Main.projectile[num12] = new Projectile();
+			//	Main.projectile[num12] = new Projectile();
 			}
 			for (int num13 = 0; num13 < 501; num13++)
 			{
-				Main.gore[num13] = new Gore();
+			//	Main.gore[num13] = new Gore();
 			}
 			for (int num14 = 0; num14 < Main.maxRain + 1; num14++)
 			{
@@ -6207,7 +7492,7 @@
 				Main.itemText[num17] = new ItemText();
 			}
 			int num18 = 0;
-			while (num18 < 3602)
+			while (false/*num18 < 3602*/)
 			{
 				Item item = new Item();
 				item.SetDefaults(num18, false);
@@ -6338,23 +7623,23 @@
 							goto IL_59E0;
 					}
 				}
-				IL_59FE:
+			IL_59FE:
 				num18++;
 				continue;
-				IL_59E0:
+			IL_59E0:
 				Item.staff[item.type] = true;
 				goto IL_59FE;
-				IL_59F0:
+			IL_59F0:
 				Item.claw[item.type] = true;
 				goto IL_59FE;
 			}
 			Main.InitLifeBytes();
 			for (int num19 = 0; num19 < Recipe.maxRecipes; num19++)
 			{
-				Main.recipe[num19] = new Recipe();
-				Main.availableRecipeY[num19] = (float)(65 * num19);
-			}
-			Recipe.SetupRecipes();
+				//Main.recipe[num19] = new Recipe();
+			//	Main.availableRecipeY[num19] = (float)(65 * num19);
+			}
+		//	Recipe.SetupRecipes();
 			for (int num20 = 0; num20 < Main.numChatLines; num20++)
 			{
 				Main.chatLine[num20] = new ChatLine();
@@ -6384,7 +7669,7 @@
 			Main.teamColor[5] = new Microsoft.Xna.Framework.Color(224, 100, 242);
 			if (Main.menuMode == 1)
 			{
-				Main.LoadPlayers();
+				//Main.LoadPlayers();
 			}
 			for (int num24 = 1; num24 < 651; num24++)
 			{
@@ -6428,7 +7713,7 @@
 			}
 			Main.clientUUID = Guid.NewGuid().ToString();
 #if CLIENT
-			keyBoardInput.newKeyEvent += delegate(char keyStroke)
+			keyBoardInput.newKeyEvent += delegate (char keyStroke)
 			{
 				if (Main.keyCount < 10)
 				{
@@ -6517,7 +7802,9 @@
 				for (int i = 1; i < 40; i++)
 				{
 					Main.music[i] = Main.soundBank.GetCue("Music_" + i);
-				}
+					//  Main.music[6] = Main.soundBank.GetCue("Music_" + 6);
+				}
+				/*
 				Main.soundMech[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Mech_0");
 				Main.soundInstanceMech[0] = Main.soundMech[0].CreateInstance();
 				Main.soundGrab = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Grab");
@@ -6557,13 +7844,13 @@
 				Main.soundDoorOpen = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Opened");
 				Main.soundInstanceDoorOpen = Main.soundDoorOpen.CreateInstance();
 				Main.soundDoorClosed = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Closed");
-				Main.soundInstanceDoorClosed = Main.soundDoorClosed.CreateInstance();
+				Main.soundInstanceDoorClosed = Main.soundDoorClosed.CreateInstance();*/
 				Main.soundMenuTick = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Tick");
 				Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
 				Main.soundMenuOpen = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Open");
 				Main.soundInstanceMenuOpen = Main.soundMenuOpen.CreateInstance();
 				Main.soundMenuClose = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Close");
-				Main.soundInstanceMenuClose = Main.soundMenuClose.CreateInstance();
+				Main.soundInstanceMenuClose = Main.soundMenuClose.CreateInstance();/*
 				Main.soundShatter = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Shatter");
 				Main.soundInstanceShatter = Main.soundShatter.CreateInstance();
 				Main.soundCamera = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Camera");
@@ -6571,56 +7858,56 @@
 				for (int j = 0; j < Main.soundCoin.Length; j++)
 				{
 					Main.soundCoin[j] = base.Content.Load<SoundEffect>(string.Concat(new object[]
-							{
-								"Sounds",
-								Path.DirectorySeparatorChar,
-								"Coin_",
-								j
-							}));
+					{
+						"Sounds",
+						Path.DirectorySeparatorChar,
+						"Coin_",
+						j
+					}));
 					Main.soundInstanceCoin[j] = Main.soundCoin[j].CreateInstance();
 				}
 				for (int k = 0; k < Main.soundDrip.Length; k++)
 				{
 					Main.soundDrip[k] = base.Content.Load<SoundEffect>(string.Concat(new object[]
-							{
-								"Sounds",
-								Path.DirectorySeparatorChar,
-								"Drip_",
-								k
-							}));
+					{
+						"Sounds",
+						Path.DirectorySeparatorChar,
+						"Drip_",
+						k
+					}));
 					Main.soundInstanceDrip[k] = Main.soundDrip[k].CreateInstance();
 				}
 				for (int l = 0; l < Main.soundZombie.Length; l++)
 				{
 					Main.soundZombie[l] = base.Content.Load<SoundEffect>(string.Concat(new object[]
-							{
-								"Sounds",
-								Path.DirectorySeparatorChar,
-								"Zombie_",
-								l
-							}));
+					{
+						"Sounds",
+						Path.DirectorySeparatorChar,
+						"Zombie_",
+						l
+					}));
 					Main.soundInstanceZombie[l] = Main.soundZombie[l].CreateInstance();
-				}
+				}*/
 				for (int m = 0; m < Main.soundLiquid.Length; m++)
 				{
 					Main.soundLiquid[m] = base.Content.Load<SoundEffect>(string.Concat(new object[]
-							{
-								"Sounds",
-								Path.DirectorySeparatorChar,
-								"Liquid_",
-								m
-							}));
+					{
+						"Sounds",
+						Path.DirectorySeparatorChar,
+						"Liquid_",
+						m
+					}));
 					Main.soundInstanceLiquid[m] = Main.soundLiquid[m].CreateInstance();
-				}
+				}/*
 				for (int n = 0; n < Main.soundRoar.Length; n++)
 				{
 					Main.soundRoar[n] = base.Content.Load<SoundEffect>(string.Concat(new object[]
-							{
-								"Sounds",
-								Path.DirectorySeparatorChar,
-								"Roar_",
-								n
-							}));
+					{
+						"Sounds",
+						Path.DirectorySeparatorChar,
+						"Roar_",
+						n
+					}));
 					Main.soundInstanceRoar[n] = Main.soundRoar[n].CreateInstance();
 				}
 				Main.soundSplash[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_0");
@@ -6642,37 +7929,38 @@
 				for (int num = 1; num < 126; num++)
 				{
 					Main.soundItem[num] = base.Content.Load<SoundEffect>(string.Concat(new object[]
-							{
-								"Sounds",
-								Path.DirectorySeparatorChar,
-								"Item_",
-								num
-							}));
+					{
+						"Sounds",
+						Path.DirectorySeparatorChar,
+						"Item_",
+						num
+					}));
 					Main.soundInstanceItem[num] = Main.soundItem[num].CreateInstance();
 				}
 				for (int num2 = 1; num2 < 58; num2++)
 				{
 					Main.soundNPCHit[num2] = base.Content.Load<SoundEffect>(string.Concat(new object[]
-							{
-								"Sounds",
-								Path.DirectorySeparatorChar,
-								"NPC_Hit_",
-								num2
-							}));
+					{
+						"Sounds",
+						Path.DirectorySeparatorChar,
+						"NPC_Hit_",
+						num2
+					}));
 					Main.soundInstanceNPCHit[num2] = Main.soundNPCHit[num2].CreateInstance();
 				}
 				for (int num3 = 1; num3 < 63; num3++)
 				{
 					Main.soundNPCKilled[num3] = base.Content.Load<SoundEffect>(string.Concat(new object[]
-							{
-								"Sounds",
-								Path.DirectorySeparatorChar,
-								"NPC_Killed_",
-								num3
-							}));
+					{
+						"Sounds",
+						Path.DirectorySeparatorChar,
+						"NPC_Killed_",
+						num3
+					}));
 					Main.soundInstanceNPCKilled[num3] = Main.soundNPCKilled[num3].CreateInstance();
 				}
 				Main.soundInstanceMoonlordCry = Main.soundNPCKilled[10].CreateInstance();
+				*/
 			}
 			catch
 			{
@@ -6688,74 +7976,74 @@
 			for (int num4 = 0; num4 < Main.PVPTexture.Length; num4++)
 			{
 				Main.PVPTexture[num4] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"UI",
-							Path.DirectorySeparatorChar,
-							"PVP_",
-							num4
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"UI",
+					Path.DirectorySeparatorChar,
+					"PVP_",
+					num4
+				}));
 			}
 			for (int num5 = 0; num5 < Main.EquipPageTexture.Length; num5++)
 			{
 				Main.EquipPageTexture[num5] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"UI",
-							Path.DirectorySeparatorChar,
-							"DisplaySlots_",
-							num5
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"UI",
+					Path.DirectorySeparatorChar,
+					"DisplaySlots_",
+					num5
+				}));
 			}
 			for (int num6 = 0; num6 < Main.craftToggleTexture.Length; num6++)
 			{
 				Main.craftToggleTexture[num6] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"UI",
-							Path.DirectorySeparatorChar,
-							"Craft_Toggle_",
-							num6
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"UI",
+					Path.DirectorySeparatorChar,
+					"Craft_Toggle_",
+					num6
+				}));
 			}
 			for (int num7 = 0; num7 < this.infoIconTexture.Length; num7++)
 			{
 				this.infoIconTexture[num7] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"UI",
-							Path.DirectorySeparatorChar,
-							"InfoIcon_",
-							num7
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"UI",
+					Path.DirectorySeparatorChar,
+					"InfoIcon_",
+					num7
+				}));
 			}
 			for (int num8 = 0; num8 < Main.reforgeTexture.Length; num8++)
 			{
 				Main.reforgeTexture[num8] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"UI",
-							Path.DirectorySeparatorChar,
-							"Reforge_",
-							num8
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"UI",
+					Path.DirectorySeparatorChar,
+					"Reforge_",
+					num8
+				}));
 			}
 			for (int num9 = 0; num9 < Main.cameraTexture.Length; num9++)
 			{
 				Main.cameraTexture[num9] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"UI",
-							Path.DirectorySeparatorChar,
-							"Camera_",
-							num9
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"UI",
+					Path.DirectorySeparatorChar,
+					"Camera_",
+					num9
+				}));
 			}
 			Main.craftUpButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecUp");
 			Main.craftDownButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecDown");
@@ -6780,12 +8068,12 @@
 			for (int num10 = 1; num10 <= 3; num10++)
 			{
 				Main.jellyfishBowlTexture[num10 - 1] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"jellyfishBowl",
-							num10
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"jellyfishBowl",
+					num10
+				}));
 			}
 			Main.glowSnailTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "GlowSnail");
 			Main.iceQueenTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceQueen");
@@ -6821,32 +8109,32 @@
 			for (int num11 = 0; num11 < 214; num11++)
 			{
 				Main.glowMaskTexture[num11] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Glow_",
-							num11
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Glow_",
+					num11
+				}));
 			}
 			for (int num12 = 0; num12 < 69; num12++)
 			{
 				Main.extraTexture[num12] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Extra_",
-							num12
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Extra_",
+					num12
+				}));
 			}
 			for (int num13 = 0; num13 < 4; num13++)
 			{
 				Main.coinTexture[num13] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Coin_",
-							num13
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Coin_",
+					num13
+				}));
 			}
 			Main.magicPixel = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MagicPixel");
 			Main.miniMapFrameTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame");
@@ -6854,52 +8142,52 @@
 			for (int num14 = 0; num14 < Main.xmasTree.Length; num14++)
 			{
 				Main.xmasTree[num14] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Xmas_",
-							num14
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Xmas_",
+					num14
+				}));
 			}
 			for (int num15 = 0; num15 < 4; num15++)
 			{
 				Main.clothesTexture[num15] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Clothes_",
-							num15
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Clothes_",
+					num15
+				}));
 			}
 			for (int num16 = 0; num16 < Main.FlameTexture.Length; num16++)
 			{
 				Main.FlameTexture[num16] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Flame_",
-							num16
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Flame_",
+					num16
+				}));
 			}
 			for (int num17 = 0; num17 < 3; num17++)
 			{
 				Main.miniMapButtonTexture[num17] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"MiniMapButton_",
-							num17
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"MiniMapButton_",
+					num17
+				}));
 			}
 			for (int num18 = 0; num18 < 8; num18++)
 			{
 				Main.mapIconTexture[num18] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Map_",
-							num18
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Map_",
+					num18
+				}));
 			}
 			for (int num19 = 0; num19 < Main.underworldTexture.Length; num19++)
 			{
@@ -6916,76 +8204,79 @@
 			Main.hbTexture1 = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar1");
 			Main.hbTexture2 = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar2");
 			Main.loTexture = base.Content.Load<Texture2D>(string.Concat(new object[]
-					{
-						"Images",
-						Path.DirectorySeparatorChar,
-						"logo_",
-						Main.rand.Next(1, 9)
-					}));
+			{
+				"Images",
+				Path.DirectorySeparatorChar,
+				"logo_",
+				Main.rand.Next(1, 9)
+			}));
 			Main.spriteBatch = new SpriteBatch(base.GraphicsDevice);
 			Main.tileBatch = new TileBatch(base.GraphicsDevice);
+			/*
 			for (int num20 = 1; num20 < 2; num20++)
 			{
 				Main.bannerTexture[num20] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"House_Banner_",
-							num20
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"House_Banner_",
+					num20
+				}));
 			}
 			for (int num21 = 0; num21 < Main.npcHeadTexture.Length; num21++)
 			{
 				Main.npcHeadTexture[num21] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"NPC_Head_",
-							num21
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"NPC_Head_",
+					num21
+				}));
 			}
 			for (int num22 = 0; num22 < Main.npcHeadBossTexture.Length; num22++)
 			{
 				Main.npcHeadBossTexture[num22] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"NPC_Head_Boss_",
-							num22
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"NPC_Head_Boss_",
+					num22
+				}));
 			}
 			for (int num23 = 1; num23 < Main.BackPackTexture.Length; num23++)
 			{
 				Main.BackPackTexture[num23] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"BackPack_",
-							num23
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"BackPack_",
+					num23
+				}));
 			}
 			for (int num24 = 1; num24 < 191; num24++)
 			{
 				Main.buffTexture[num24] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Buff_",
-							num24
-						}));
-			}
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Buff_",
+					num24
+				}));
+			}
+			*/
 			this.LoadBackground(0);
 			this.LoadBackground(49);
 			Main.minecartMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Minecart");
+			/*
 			for (int num25 = 0; num25 < Main.rudolphMountTexture.Length; num25++)
 			{
 				Main.rudolphMountTexture[num25] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Rudolph_",
-							num25
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Rudolph_",
+					num25
+				}));
 			}
 			Main.bunnyMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Bunny");
 			Main.pigronMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Pigron");
@@ -7013,59 +8304,60 @@
 			for (int num26 = 0; num26 < 3602; num26++)
 			{
 				Main.itemTexture[num26] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Item_",
-							num26
-						}));
-			}
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Item_",
+					num26
+				}));
+			}
+			*/
 			for (int num27 = 0; num27 < 6; num27++)
 			{
 				Main.gemTexture[num27] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Gem_",
-							num27
-						}));
-			}
-			for (int num28 = 0; num28 < 540; num28++)
-			{
-				NPC nPC = new NPC();
-				nPC.SetDefaults(num28, -1f);
-				Main.npcName[num28] = nPC.name;
-			}
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Gem_",
+					num27
+				}));
+			}
+			//for (int num28 = 0; num28 < 540; num28++)
+			//{
+			//	NPC nPC = new NPC();
+			//	nPC.SetDefaults(num28, -1f);
+			//	Main.npcName[num28] = nPC.name;
+			//}
 			for (int num29 = 0; num29 < 22; num29++)
 			{
 				Main.cloudTexture[num29] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Cloud_",
-							num29
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Cloud_",
+					num29
+				}));
 			}
 			for (int num30 = 0; num30 < 5; num30++)
 			{
 				Main.starTexture[num30] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Star_",
-							num30
-						}));
-			}
-			for (int num31 = 0; num31 < 12; num31++)
-			{
-				Main.liquidTexture[num31] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Liquid_",
-							num31
-						}));
-			}
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Star_",
+					num30
+				}));
+			}
+			//for (int num31 = 0; num31 < 12; num31++)
+			//{
+			//	Main.liquidTexture[num31] = base.Content.Load<Texture2D>(string.Concat(new object[]
+			//	{
+			//		"Images",
+			//		Path.DirectorySeparatorChar,
+			//		"Liquid_",
+			//		num31
+			//	}));
+			//}
 			this.waterfallManager.LoadContent(base.Content);
 			Main.npcToggleTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_1");
 			Main.npcToggleTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_2");
@@ -7074,8 +8366,22 @@
 			Main.gridTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Grid");
 			Main.trashTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Trash");
 			Main.cdTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "CoolDown");
-			Main.logoTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo");
-			Main.logo2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo2");
+			//	Main.logoTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo");
+			//	Main.logo2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo2");
+			Assembly executingAssembly = Assembly.GetExecutingAssembly();
+			Stream manifestResourceStream = executingAssembly.GetManifestResourceStream("Terraria.TerraCustom.Logo.png");
+			Bitmap image = new Bitmap(manifestResourceStream);
+			Main.logoTexture = this.BitmapToTexture2D(image);
+			Main.logo2Texture = this.BitmapToTexture2D(image);
+
+			manifestResourceStream = executingAssembly.GetManifestResourceStream("Terraria.TerraCustom.TreeTops.png");
+			image = new Bitmap(manifestResourceStream);
+			Main.TCTreeTops = this.BitmapToTexture2D(image);
+
+			Main.TCMossColors = this.BitmapToTexture2D(new Bitmap(executingAssembly.GetManifestResourceStream("Terraria.TerraCustom.MossColors.png")));
+			Main.TCDungeonColors = this.BitmapToTexture2D(new Bitmap(executingAssembly.GetManifestResourceStream("Terraria.TerraCustom.DungeonColors.png")));
+
+
 			Main.dustTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dust");
 			Main.sunTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun");
 			Main.sun2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun2");
@@ -7089,18 +8395,18 @@
 			for (int num32 = 0; num32 < Main.cursorTextures.Length; num32++)
 			{
 				Main.cursorTextures[num32] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"UI",
-							Path.DirectorySeparatorChar,
-							"Cursor_",
-							num32
-						}));
-			}
-			Main.ninjaTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ninja");
-			Main.antLionTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "AntlionBody");
-			Main.spikeBaseTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Spike_Base");
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"UI",
+					Path.DirectorySeparatorChar,
+					"Cursor_",
+					num32
+				}));
+			}
+			//Main.ninjaTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ninja");
+			//Main.antLionTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "AntlionBody");
+			//Main.spikeBaseTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Spike_Base");
 			Main.woodTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_0");
 			Main.woodTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_1");
 			Main.woodTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_2");
@@ -7113,33 +8419,34 @@
 			for (int num33 = 0; num33 < Main.moonTexture.Length; num33++)
 			{
 				Main.moonTexture[num33] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Moon_",
-							num33
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Moon_",
+					num33
+				}));
 			}
 			for (int num34 = 0; num34 < Main.treeTopTexture.Length; num34++)
 			{
 				Main.treeTopTexture[num34] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Tree_Tops_",
-							num34
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Tree_Tops_",
+					num34
+				}));
 			}
 			for (int num35 = 0; num35 < Main.treeBranchTexture.Length; num35++)
 			{
 				Main.treeBranchTexture[num35] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Tree_Branches_",
-							num35
-						}));
-			}
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Tree_Branches_",
+					num35
+				}));
+			}
+			/*
 			Main.shroomCapTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Shroom_Tops");
 			Main.inventoryBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back");
 			Main.inventoryBack2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back2");
@@ -7158,6 +8465,7 @@
 			Main.inventoryBack15Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back15");
 			Main.hairStyleBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HairStyleBack");
 			Main.clothesStyleBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ClothesStyleBack");
+			*/
 			Main.inventoryTickOffTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_Off");
 			Main.inventoryTickOnTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_On");
 			Main.textBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Text_Back");
@@ -7177,15 +8485,16 @@
 			Main.sunAltarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SunAltar");
 			Main.xmasLightTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "XmasLight");
 			Main.beetleTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "BeetleOrb");
+			/*
 			for (int num36 = 0; num36 < 16; num36++)
 			{
 				Main.chainsTexture[num36] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Chains_",
-							num36
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Chains_",
+					num36
+				}));
 			}
 			Main.chain20Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
 			Main.fishingLineTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "FishingLine");
@@ -7237,29 +8546,30 @@
 			for (int num37 = 1; num37 < Main.gemChainTexture.Length; num37++)
 			{
 				Main.gemChainTexture[num37] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"GemChain_",
-							num37
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"GemChain_",
+					num37
+				}));
 			}
 			for (int num38 = 1; num38 < Main.golemTexture.Length; num38++)
 			{
 				Main.golemTexture[num38] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"GolemLights",
-							num38
-						}));
-			}
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"GolemLights",
+					num38
+				}));
+			}
+			*/
 			Main.fontItemStack = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Item_Stack");
 			Main.fontMouseText = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Mouse_Text");
 			Main.fontDeathText = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Death_Text");
 			Main.fontCombatText[0] = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Text");
 			Main.fontCombatText[1] = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Crit");
-			Mount.Initialize();
+			//Mount.Initialize();
 			Minecart.Initialize();
 		}
 
@@ -7470,7 +8780,7 @@
 											}
 											break;
 									}
-									IL_341:
+								IL_341:
 									num2 = 11;
 								}
 								else if (type <= 145)
@@ -7617,10 +8927,10 @@
 								}
 								num2 = 9;
 								goto IL_394;
-								IL_370:
+							IL_370:
 								num2 = 10;
 							}
-							IL_394:
+						IL_394:
 							if (num2 == 0 && Main.npc[k].boss)
 							{
 								num2 = 1;
@@ -7690,15 +9000,14 @@
 								break;
 							}
 							break;
-							IL_34C:
+						IL_34C:
 							num2 = 3;
 							goto IL_394;
-							IL_351:
+						IL_351:
 							num2 = 8;
 							goto IL_394;
 						}
-						IL_488:
-						;
+					IL_488:;
 					}
 					int num3 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
 					if (Main.musicVolume == 0f)
@@ -10712,7 +12021,7 @@
 				}
 				Main.snowing();
 			}
-			IL_12C:
+		IL_12C:
 			if (Main.chTitle)
 			{
 				Main.chTitle = false;
@@ -10740,12 +12049,12 @@
 						Main.dedServCount2++;
 						float num = (float)Main.dedServCount1 / (float)Main.dedServCount2;
 						Console.WriteLine(string.Concat(new object[]
-								{
-									Main.updateTime,
-									"  (",
-									num,
-									")"
-								}));
+						{
+							Main.updateTime,
+							"  (",
+							num,
+							")"
+						}));
 						Main.updateTime = 0;
 						Main.fpsTimer.Restart();
 					}
@@ -10863,10 +12172,10 @@
 				Animation.UpdateAll();
 				AchievementCompleteUI.Update();
 				this.UpdateMusic();
-				if (Main.showSplash)
-				{
-					return;
-				}
+				//if (Main.showSplash)
+				//{
+				//	return;
+				//}
 				if (!Main.gameMenu && Main.netMode == 1)
 				{
 					if (!Main.saveTime.IsRunning)
@@ -11794,7 +13103,7 @@
 						Main.tileFrame[410] = 0;
 					}
 				}
-				Main.CritterCages();
+				//Main.CritterCages();
 				Main.UpdateDrawAnimations();
 				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !Main.chatMode && !Main.editSign && !Main.editChest)
 				{
@@ -12404,10 +13713,10 @@
 					goto IL_3BFE;
 				}
 				goto IL_3BFE;
-				IL_3C0D:
+			IL_3C0D:
 				num21++;
 				continue;
-				IL_3BFE:
+			IL_3BFE:
 				Main.player[num21].Update(num21);
 				goto IL_3C0D;
 			}
@@ -12461,10 +13770,10 @@
 					goto IL_3D19;
 				}
 				goto IL_3D19;
-				IL_3D28:
+			IL_3D28:
 				num23++;
 				continue;
-				IL_3D19:
+			IL_3D19:
 				Main.npc[num23].UpdateNPC(num23);
 				goto IL_3D28;
 			}
@@ -12486,10 +13795,10 @@
 					goto IL_3D62;
 				}
 				goto IL_3D62;
-				IL_3D6F:
+			IL_3D6F:
 				num24++;
 				continue;
-				IL_3D62:
+			IL_3D62:
 				Main.gore[num24].Update();
 				goto IL_3D6F;
 			}
@@ -12512,10 +13821,10 @@
 					goto IL_3DB2;
 				}
 				goto IL_3DB2;
-				IL_3DC1:
+			IL_3DC1:
 				num25++;
 				continue;
-				IL_3DB2:
+			IL_3DB2:
 				Main.projectile[num25].Update(num25);
 				goto IL_3DC1;
 			}
@@ -12538,10 +13847,10 @@
 					goto IL_3E03;
 				}
 				goto IL_3E03;
-				IL_3E12:
+			IL_3E12:
 				num26++;
 				continue;
-				IL_3E03:
+			IL_3E03:
 				Main.item[num26].UpdateItem(num26);
 				goto IL_3E12;
 			}
@@ -12562,7 +13871,7 @@
 				}
 			}
 			Dust.UpdateDust();
-			IL_3E58:
+		IL_3E58:
 			if (Main.netMode != 2)
 			{
 				CombatText.UpdateCombatText();
@@ -12582,7 +13891,7 @@
 				}
 			}
 			Main.UpdateTime();
-			IL_3E86:
+		IL_3E86:
 			Main.tileSolid[379] = true;
 			if (Main.netMode != 1)
 			{
@@ -12602,7 +13911,7 @@
 				WorldGen.UpdateWorld();
 				Main.UpdateInvasion();
 			}
-			IL_3EBA:
+		IL_3EBA:
 			if (Main.ignoreErrors)
 			{
 				try
@@ -12631,7 +13940,7 @@
 			{
 				Main.UpdateClient();
 			}
-			IL_3F02:
+		IL_3F02:
 			if (Main.ignoreErrors)
 			{
 				try
@@ -12661,7 +13970,7 @@
 					Main.chatLine[num30].showTime--;
 				}
 			}
-			IL_3FA1:
+		IL_3FA1:
 			Main.upTimer = (float)stopwatch.Elapsed.TotalMilliseconds;
 			if (Main.upTimerMaxDelay > 0f)
 			{
@@ -12939,12 +14248,12 @@
 					int arg_1BD_1 = 0;
 					object obj = array4[0];
 					expr_179[arg_1BD_1] = string.Concat(new object[]
-						{
-							obj,
-							" (",
-							Main.toolTip.stack,
-							")"
-						});
+					{
+						obj,
+						" (",
+						Main.toolTip.stack,
+						")"
+					});
 				}
 				if (Main.toolTip.favorited)
 				{
@@ -13203,37 +14512,37 @@
 					if (Main.toolTip.healLife > 0)
 					{
 						array[num6] = string.Concat(new object[]
-							{
-								Lang.tip[29],
-								" ",
-								Main.toolTip.healLife,
-								" ",
-								Lang.tip[30]
-							});
+						{
+							Lang.tip[29],
+							" ",
+							Main.toolTip.healLife,
+							" ",
+							Lang.tip[30]
+						});
 						num6++;
 					}
 					if (Main.toolTip.healMana > 0)
 					{
 						array[num6] = string.Concat(new object[]
-							{
-								Lang.tip[29],
-								" ",
-								Main.toolTip.healMana,
-								" ",
-								Lang.tip[31]
-							});
+						{
+							Lang.tip[29],
+							" ",
+							Main.toolTip.healMana,
+							" ",
+							Lang.tip[31]
+						});
 						num6++;
 					}
 					if (Main.toolTip.mana > 0 && (Main.toolTip.type != 127 || !Main.player[Main.myPlayer].spaceGun))
 					{
 						array[num6] = string.Concat(new object[]
-							{
-								Lang.tip[32],
-								" ",
-								(int)((float)Main.toolTip.mana * Main.player[Main.myPlayer].manaCost),
-								" ",
-								Lang.tip[31]
-							});
+						{
+							Lang.tip[32],
+							" ",
+							(int)((float)Main.toolTip.mana * Main.player[Main.myPlayer].manaCost),
+							" ",
+							Lang.tip[31]
+						});
 						num6++;
 					}
 					if (Main.toolTip.createWall > 0 || Main.toolTip.createTile > -1)
@@ -13614,49 +14923,49 @@
 						{
 							object obj = text2;
 							text2 = string.Concat(new object[]
-								{
-									obj,
-									num21,
-									" ",
-									Lang.inter[15],
-									" "
-								});
+							{
+								obj,
+								num21,
+								" ",
+								Lang.inter[15],
+								" "
+							});
 						}
 						if (num22 > 0)
 						{
 							object obj = text2;
 							text2 = string.Concat(new object[]
-								{
-									obj,
-									num22,
-									" ",
-									Lang.inter[16],
-									" "
-								});
+							{
+								obj,
+								num22,
+								" ",
+								Lang.inter[16],
+								" "
+							});
 						}
 						if (num23 > 0)
 						{
 							object obj = text2;
 							text2 = string.Concat(new object[]
-								{
-									obj,
-									num23,
-									" ",
-									Lang.inter[17],
-									" "
-								});
+							{
+								obj,
+								num23,
+								" ",
+								Lang.inter[17],
+								" "
+							});
 						}
 						if (num24 > 0)
 						{
 							object obj = text2;
 							text2 = string.Concat(new object[]
-								{
-									obj,
-									num24,
-									" ",
-									Lang.inter[18],
-									" "
-								});
+							{
+								obj,
+								num24,
+								" ",
+								Lang.inter[18],
+								" "
+							});
 						}
 						if (!Main.toolTip.buy)
 						{
@@ -14044,20 +15353,20 @@
 				string text = string.Concat(Main.frameRate);
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
-						" (",
-						Liquid.numLiquid + LiquidBuffer.numLiquidBuffer,
-						")"
-					});
+				{
+					obj,
+					" (",
+					Liquid.numLiquid + LiquidBuffer.numLiquidBuffer,
+					")"
+				});
 				object obj2 = text;
 				text = string.Concat(new object[]
-					{
-						obj2,
-						" (",
-						(int)(Main.gfxQuality * 100f),
-						"%)"
-					});
+				{
+					obj2,
+					" (",
+					(int)(Main.gfxQuality * 100f),
+					"%)"
+				});
 				int num = 4;
 				if (!Main.gameMenu)
 				{
@@ -15520,7 +16829,7 @@
 												goto IL_27C6;
 										}
 										num52 = -1;
-										IL_27C6:
+									IL_27C6:
 										if (num52 != -1)
 										{
 											int num53 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 + 2)), 4, 4, num52, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
@@ -15534,12 +16843,12 @@
 											goto IL_2863;
 										}
 										goto IL_2863;
-										IL_27B8:
+									IL_27B8:
 										num52 = 6;
 										goto IL_27C6;
 									}
 								}
-								IL_2863:
+							IL_2863:
 								if (type == 100 && Main.rand.Next(40) == 0 && num10 < 36)
 								{
 									int num54 = (int)(frameY / 36);
@@ -15577,7 +16886,7 @@
 											default:
 												goto IL_290D;
 										}
-										IL_2910:
+									IL_2910:
 										if (num55 != -1)
 										{
 											Vector2 position2;
@@ -15611,12 +16920,12 @@
 											goto IL_2A1C;
 										}
 										goto IL_2A1C;
-										IL_290D:
+									IL_290D:
 										num55 = -1;
 										goto IL_2910;
 									}
 								}
-								IL_2A1C:
+							IL_2A1C:
 								if (type == 98 && Main.rand.Next(40) == 0 && frameY == 0 && num10 == 0)
 								{
 									int num57 = Dust.NewDust(new Vector2((float)(j * 16 + 12), (float)(i * 16 + 2)), 4, 4, 6, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
@@ -15708,7 +17017,7 @@
 												}
 												break;
 										}
-										IL_2D59:
+									IL_2D59:
 										if (num63 != -1)
 										{
 											int num64 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 + 2)), 14, 6, num63, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
@@ -15722,15 +17031,15 @@
 											goto IL_2DF5;
 										}
 										goto IL_2DF5;
-										IL_2D56:
+									IL_2D56:
 										num63 = -1;
 										goto IL_2D59;
-										IL_2D4B:
+									IL_2D4B:
 										num63 = 6;
 										goto IL_2D59;
 									}
 								}
-								IL_2DF5:
+							IL_2DF5:
 								if (type == 22 && Main.rand.Next(400) == 0)
 								{
 									Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
@@ -16094,7 +17403,7 @@
 											}
 											flag5 = true;
 										}
-										IL_3C15:
+									IL_3C15:
 										if (!flag5)
 										{
 											Main.specX[num3] = j;
@@ -18256,21 +19565,26 @@
 							int num315 = num293;
 							while (num315 < num293 + 100)
 							{
+								// 19 total: 6 grass, 1 mush, 1 crim, 1 corrup, 
+								//TileID.Grass -- 0, 6,7,8,9,10, 
 								if (Main.tile[num292, num315].type == 2)
 								{
 									num310 = Main.GetTreeStyle(num292);
 									break;
 								}
+								// corrup -- 1
 								if (Main.tile[num292, num315].type == 23)
 								{
 									num310 = 1;
 									break;
 								}
-								if (Main.tile[num292, num315].type == 70)
+								//TileID.MushroomGrass -- 14
+                                if (Main.tile[num292, num315].type == 70)
 								{
 									num310 = 14;
 									break;
 								}
+								// Jungle -- 2,11,13
 								if (Main.tile[num292, num315].type == 60)
 								{
 									num310 = 2;
@@ -18287,6 +19601,7 @@
 									num313 = 48;
 									break;
 								}
+								// Snow -- 4,12,16,17,18
 								if (Main.tile[num292, num315].type == 147)
 								{
 									num310 = 4;
@@ -18323,6 +19638,7 @@
 										break;
 									}
 								}
+								// Hallow == 5,3
 								else
 								{
 									if (Main.tile[num292, num315].type == 199)
@@ -19278,7 +20594,7 @@
 										num4 = -num2;
 										goto IL_7AF;
 								}
-								IL_7AF:
+							IL_7AF:
 								position = new Vector2(player.position.X + num3, player.position.Y + player.gfxOffY + num4);
 								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
 							}
@@ -27551,10 +28867,10 @@
 						default:
 							goto IL_2940;
 					}
-					IL_2A0A:
+				IL_2A0A:
 					j++;
 					continue;
-					IL_2940:
+				IL_2940:
 					for (int k = 0; k < num41; k++)
 					{
 						int num42 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, type, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
@@ -28169,7 +29485,7 @@
 			{
 				goto IL_5B88;
 			}
-			IL_5852:
+		IL_5852:
 			if (drawPlayer.legs > 0 && drawPlayer.legs < 135 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
 			{
 				if (!drawPlayer.invis)
@@ -28196,7 +29512,7 @@
 			{
 				goto IL_5C63;
 			}
-			IL_5B88:
+		IL_5B88:
 			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
 			{
 				value = new DrawData(Main.accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
@@ -28207,7 +29523,7 @@
 			{
 				goto IL_5852;
 			}
-			IL_5C63:
+		IL_5C63:
 			if (skinVariant == 3 && (drawPlayer.body <= 0 || drawPlayer.body >= 195) && !drawPlayer.invis)
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 14], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
@@ -29489,103 +30805,103 @@
 			}
 			Main.npcChatText = Lang.dialog(177, false);
 			return;
-			Block_32:
+		Block_32:
 			Main.npcChatText = Lang.dialog(178, false);
 			return;
-			Block_33:
+		Block_33:
 			Main.npcChatText = Lang.dialog(179, false);
 			return;
-			Block_34:
+		Block_34:
 			Main.npcChatText = Lang.dialog(180, false);
 			return;
-			Block_35:
+		Block_35:
 			Main.npcChatText = Lang.dialog(181, false);
 			return;
-			Block_36:
+		Block_36:
 			Main.npcChatText = Lang.dialog(182, false);
 			return;
-			Block_40:
+		Block_40:
 			Main.npcChatText = Lang.dialog(183, false);
 			return;
-			Block_44:
+		Block_44:
 			Main.npcChatText = Lang.dialog(184, false);
 			return;
-			Block_45:
+		Block_45:
 			Main.npcChatText = Lang.dialog(185, false);
 			return;
-			Block_48:
+		Block_48:
 			Main.npcChatText = Lang.dialog(186, false);
 			return;
-			Block_49:
+		Block_49:
 			Main.npcChatText = Lang.dialog(187, false);
 			return;
-			Block_51:
+		Block_51:
 			Main.npcChatText = Lang.dialog(188, false);
 			return;
-			Block_53:
+		Block_53:
 			Main.npcChatText = Lang.dialog(189, false);
 			return;
-			Block_56:
+		Block_56:
 			Main.npcChatText = Lang.dialog(190, false);
 			return;
-			Block_59:
+		Block_59:
 			Main.npcChatText = Lang.dialog(191, false);
 			return;
-			Block_60:
+		Block_60:
 			Main.npcChatText = Lang.dialog(192, false);
 			return;
-			Block_61:
+		Block_61:
 			Main.npcChatText = Lang.dialog(193, false);
 			return;
-			Block_62:
+		Block_62:
 			Main.npcChatText = Lang.dialog(194, false);
 			return;
-			Block_64:
+		Block_64:
 			Main.npcChatText = Lang.dialog(195, false);
 			return;
-			Block_66:
+		Block_66:
 			Main.npcChatText = Lang.dialog(196, false);
 			return;
-			Block_68:
+		Block_68:
 			Main.npcChatText = Lang.dialog(197, false);
 			return;
-			Block_70:
+		Block_70:
 			Main.npcChatText = Lang.dialog(198, false);
 			return;
-			Block_73:
+		Block_73:
 			Main.npcChatText = Lang.dialog(199, false);
 			return;
-			Block_76:
+		Block_76:
 			Main.npcChatText = Lang.dialog(200, false);
 			return;
-			Block_78:
+		Block_78:
 			Main.npcChatText = Lang.dialog(201, false);
 			return;
-			Block_81:
+		Block_81:
 			Main.npcChatText = Lang.dialog(202, false);
 			return;
-			Block_84:
+		Block_84:
 			Main.npcChatText = Lang.dialog(203, false);
 			return;
-			Block_86:
+		Block_86:
 			Main.npcChatText = Lang.dialog(204, false);
 			return;
-			Block_88:
+		Block_88:
 			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 403 : 205, false);
 			return;
-			Block_91:
+		Block_91:
 			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 402 : 206, false);
 			return;
-			Block_97:
+		Block_97:
 			Main.npcChatText = Lang.dialog(207, false);
 			return;
-			Block_100:
+		Block_100:
 			Main.npcChatText = Lang.dialog(208, false);
 			return;
-			Block_103:
+		Block_103:
 			Main.npcChatText = Lang.dialog(209, false);
 			return;
-			Block_105:
+		Block_105:
 			if (WorldGen.crimson)
 			{
 				Main.npcChatText = Lang.dialog(331, false);
@@ -29593,43 +30909,43 @@
 			}
 			Main.npcChatText = Lang.dialog(210, false);
 			return;
-			Block_109:
+		Block_109:
 			Main.npcChatText = Lang.dialog(211, false);
 			return;
-			Block_112:
+		Block_112:
 			Main.npcChatText = Lang.dialog(212, false);
 			return;
-			Block_116:
+		Block_116:
 			Main.npcChatText = Lang.dialog(213, false);
 			return;
-			Block_120:
+		Block_120:
 			Main.npcChatText = Lang.dialog(214, false);
 			return;
-			Block_124:
+		Block_124:
 			Main.npcChatText = Lang.dialog(215, false);
 			return;
-			Block_128:
+		Block_128:
 			Main.npcChatText = Lang.dialog(216, false);
 			return;
-			Block_132:
+		Block_132:
 			Main.npcChatText = Lang.dialog(217, false);
 			return;
-			Block_138:
+		Block_138:
 			Main.npcChatText = Lang.dialog(218, false);
 			return;
-			Block_144:
+		Block_144:
 			Main.npcChatText = Lang.dialog(219, false);
 			return;
-			Block_150:
+		Block_150:
 			Main.npcChatText = Lang.dialog(220, false);
 			return;
-			Block_156:
+		Block_156:
 			Main.npcChatText = Lang.dialog(221, false);
 			return;
-			Block_158:
+		Block_158:
 			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 401 : 222, false);
 			return;
-			Block_161:
+		Block_161:
 			Main.npcChatText = Lang.dialog(223, false);
 		}
 
@@ -29840,49 +31156,49 @@
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
-								num6,
-								" ",
-								Lang.inter[15],
-								" "
-							});
+						{
+							obj,
+							num6,
+							" ",
+							Lang.inter[15],
+							" "
+						});
 					}
 					if (num7 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
-								num7,
-								" ",
-								Lang.inter[16],
-								" "
-							});
+						{
+							obj,
+							num7,
+							" ",
+							Lang.inter[16],
+							" "
+						});
 					}
 					if (num8 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
-								num8,
-								" ",
-								Lang.inter[17],
-								" "
-							});
+						{
+							obj,
+							num8,
+							" ",
+							Lang.inter[17],
+							" "
+						});
 					}
 					if (num9 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
-								num9,
-								" ",
-								Lang.inter[18],
-								" "
-							});
+						{
+							obj,
+							num9,
+							" ",
+							Lang.inter[18],
+							" "
+						});
 					}
 					float num11 = (float)Main.mouseTextColor / 255f;
 					if (num6 > 0)
@@ -29956,49 +31272,49 @@
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
-							num12,
-							" ",
-							Lang.inter[15],
-							" "
-						});
+					{
+						obj,
+						num12,
+						" ",
+						Lang.inter[15],
+						" "
+					});
 				}
 				if (num13 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
-							num13,
-							" ",
-							Lang.inter[16],
-							" "
-						});
+					{
+						obj,
+						num13,
+						" ",
+						Lang.inter[16],
+						" "
+					});
 				}
 				if (num14 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
-							num14,
-							" ",
-							Lang.inter[17],
-							" "
-						});
+					{
+						obj,
+						num14,
+						" ",
+						Lang.inter[17],
+						" "
+					});
 				}
 				if (num15 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
-							num15,
-							" ",
-							Lang.inter[18],
-							" "
-						});
+					{
+						obj,
+						num15,
+						" ",
+						Lang.inter[18],
+						" "
+					});
 				}
 				float num17 = (float)Main.mouseTextColor / 255f;
 				if (num12 > 0)
@@ -30927,6 +32243,7 @@
 			TimeLogger.DetailedDrawTime(10);
 		}
 
+		/*
 		protected void DrawInventory()
 		{
 			if (Main.netMode == 1)
@@ -31631,61 +32948,61 @@
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
-									"[c/",
-									Colors.AlphaDarken(Colors.CoinPlatinum).Hex3(),
-									":",
-									num51,
-									" ",
-									Lang.inter[15],
-									"] "
-								});
+							{
+								obj,
+								"[c/",
+								Colors.AlphaDarken(Colors.CoinPlatinum).Hex3(),
+								":",
+								num51,
+								" ",
+								Lang.inter[15],
+								"] "
+							});
 						}
 						if (num52 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
-									"[c/",
-									Colors.AlphaDarken(Colors.CoinGold).Hex3(),
-									":",
-									num52,
-									" ",
-									Lang.inter[16],
-									"] "
-								});
+							{
+								obj,
+								"[c/",
+								Colors.AlphaDarken(Colors.CoinGold).Hex3(),
+								":",
+								num52,
+								" ",
+								Lang.inter[16],
+								"] "
+							});
 						}
 						if (num53 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
-									"[c/",
-									Colors.AlphaDarken(Colors.CoinSilver).Hex3(),
-									":",
-									num53,
-									" ",
-									Lang.inter[17],
-									"] "
-								});
+							{
+								obj,
+								"[c/",
+								Colors.AlphaDarken(Colors.CoinSilver).Hex3(),
+								":",
+								num53,
+								" ",
+								Lang.inter[17],
+								"] "
+							});
 						}
 						if (num54 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
-									"[c/",
-									Colors.AlphaDarken(Colors.CoinCopper).Hex3(),
-									":",
-									num54,
-									" ",
-									Lang.inter[18],
-									"] "
-								});
+							{
+								obj,
+								"[c/",
+								Colors.AlphaDarken(Colors.CoinCopper).Hex3(),
+								":",
+								num54,
+								" ",
+								Lang.inter[18],
+								"] "
+							});
 						}
 						ItemSlot.DrawSavings(Main.spriteBatch, (float)(num48 + 130), (float)this.invBottom, true);
 						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, text3, new Vector2((float)(num48 + 50) + Main.fontMouseText.MeasureString(text2).X, (float)num49), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
@@ -31954,12 +33271,12 @@
 							{
 								object obj = Main.hoverItemName;
 								Main.hoverItemName = string.Concat(new object[]
-									{
-										obj,
-										" (",
-										Main.recipe[Main.availableRecipe[num67]].createItem.stack,
-										")"
-									});
+								{
+									obj,
+									" (",
+									Main.recipe[Main.availableRecipe[num67]].createItem.stack,
+									")"
+								});
 							}
 						}
 						if (Main.numAvailableRecipes > 0)
@@ -32039,12 +33356,12 @@
 							{
 								object obj = Main.hoverItemName;
 								Main.hoverItemName = string.Concat(new object[]
-									{
-										obj,
-										" (",
-										Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num72].stack,
-										")"
-									});
+								{
+									obj,
+									" (",
+									Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num72].stack,
+									")"
+								});
 							}
 						}
 						num75 -= 50.0;
@@ -32183,12 +33500,12 @@
 						{
 							object obj = Main.hoverItemName;
 							Main.hoverItemName = string.Concat(new object[]
-								{
-									obj,
-									" (",
-									Main.recipe[Main.availableRecipe[num91]].createItem.stack,
-									")"
-								});
+							{
+								obj,
+								" (",
+								Main.recipe[Main.availableRecipe[num91]].createItem.stack,
+								")"
+							});
 						}
 					}
 					if (Main.numAvailableRecipes > 0)
@@ -32354,6 +33671,7 @@
 				}
 			}
 		}
+		*/
 
 		private static void DrawPVPIcons()
 		{
@@ -32519,12 +33837,12 @@
 							{
 								object obj = text;
 								text = string.Concat(new object[]
-									{
-										obj,
-										" (",
-										Main.item[i].stack,
-										")"
-									});
+								{
+									obj,
+									" (",
+									Main.item[i].stack,
+									")"
+								});
 							}
 							if (Main.item[i].owner < 255 && Main.showItemOwner)
 							{
@@ -32556,13 +33874,13 @@
 							num = 0;
 						}
 						string text2 = string.Concat(new object[]
-							{
-								Main.player[j].name,
-								": ",
-								num,
-								"/",
-								Main.player[j].statLifeMax2
-							});
+						{
+							Main.player[j].name,
+							": ",
+							num,
+							"/",
+							Main.player[j].statLifeMax2
+						});
 						if (Main.player[j].hostile)
 						{
 							text2 += " (PvP)";
@@ -32645,13 +33963,13 @@
 							{
 								object obj2 = text3;
 								text3 = string.Concat(new object[]
-									{
-										obj2,
-										": ",
-										Main.npc[num4].life,
-										"/",
-										Main.npc[num4].lifeMax
-									});
+								{
+									obj2,
+									": ",
+									Main.npc[num4].life,
+									"/",
+									Main.npc[num4].lifeMax
+								});
 							}
 							this.MouseText(text3, 0, 0);
 							Main.mouseText = true;
@@ -32777,13 +34095,13 @@
 				num4 = 10;
 			}
 			string text = string.Concat(new object[]
-				{
-					Lang.inter[0],
-					" ",
-					Main.player[Main.myPlayer].statLifeMax2,
-					"/",
-					Main.player[Main.myPlayer].statLifeMax2
-				});
+			{
+				Lang.inter[0],
+				" ",
+				Main.player[Main.myPlayer].statLifeMax2,
+				"/",
+				Main.player[Main.myPlayer].statLifeMax2
+			});
 			Vector2 vector = Main.fontMouseText.MeasureString(text);
 			if (!Main.player[Main.myPlayer].ghost)
 			{
@@ -33144,12 +34462,12 @@
 						{
 							object obj = Main.hoverItemName;
 							Main.hoverItemName = string.Concat(new object[]
-								{
-									obj,
-									" (",
-									Main.player[Main.myPlayer].inventory[i].stack,
-									")"
-								});
+							{
+								obj,
+								" (",
+								Main.player[Main.myPlayer].inventory[i].stack,
+								")"
+							});
 						}
 						Main.rare = Main.player[Main.myPlayer].inventory[i].rare;
 					}
@@ -33336,49 +34654,49 @@
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
-						num13,
-						" ",
-						Lang.inter[15],
-						" "
-					});
+				{
+					obj,
+					num13,
+					" ",
+					Lang.inter[15],
+					" "
+				});
 			}
 			if (num14 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
-						num14,
-						" ",
-						Lang.inter[16],
-						" "
-					});
+				{
+					obj,
+					num14,
+					" ",
+					Lang.inter[16],
+					" "
+				});
 			}
 			if (num15 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
-						num15,
-						" ",
-						Lang.inter[17],
-						" "
-					});
+				{
+					obj,
+					num15,
+					" ",
+					Lang.inter[17],
+					" "
+				});
 			}
 			if (num16 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
-						num16,
-						" ",
-						Lang.inter[18],
-						" "
-					});
+				{
+					obj,
+					num16,
+					" ",
+					Lang.inter[18],
+					" "
+				});
 			}
 			string text2 = "Buy (" + text + ")";
 			if (num12 == 0)
@@ -34217,7 +35535,7 @@
 				}
 				this.DrawNPCHouse();
 			}
-			IL_C49:
+		IL_C49:
 			if (Main.player[Main.myPlayer].selectedItem == 58 && Main.player[Main.myPlayer].itemAnimation > 0)
 			{
 				Main.mouseLeftRelease = false;
@@ -34651,7 +35969,7 @@
 					{
 						try
 						{
-							this.DrawMap();
+						//	this.DrawMap();
 							goto IL_2493;
 						}
 						catch (Exception e2)
@@ -34660,9 +35978,9 @@
 							goto IL_2493;
 						}
 					}
-					this.DrawMap();
-				}
-				IL_2493:
+				//	this.DrawMap();
+				}
+			IL_2493:
 				if (Main.mH + 600 > Main.screenHeight)
 				{
 					Main.mH = Main.screenHeight - 600;
@@ -34900,13 +36218,13 @@
 						{
 							object obj = text11;
 							text11 = string.Concat(new object[]
-								{
-									obj,
-									": ",
-									Main.player[num82].statLife,
-									"/",
-									Main.player[num82].statLifeMax2
-								});
+							{
+								obj,
+								": ",
+								Main.player[num82].statLife,
+								"/",
+								Main.player[num82].statLifeMax2
+							});
 						}
 						Vector2 position = Main.fontMouseText.MeasureString(text11);
 						float num83 = 0f;
@@ -35013,7 +36331,7 @@
 				{
 					try
 					{
-						this.DrawInventory();
+					//	this.DrawInventory();
 						goto IL_378D;
 					}
 					catch (Exception e3)
@@ -35022,7 +36340,7 @@
 						goto IL_378D;
 					}
 				}
-				this.DrawInventory();
+				//this.DrawInventory();
 			}
 			else
 			{
@@ -35030,7 +36348,7 @@
 				this.mouseNPC = -1;
 				Main.EquipPage = 0;
 			}
-			IL_378D:
+		IL_378D:
 			this.DrawInfoAccs();
 			if (Main.playerInventory || Main.player[Main.myPlayer].ghost)
 			{
@@ -35128,7 +36446,7 @@
 				}
 			}
 			this.DrawPlayerChat();
-			IL_3A7F:
+		IL_3A7F:
 			if (Main.player[Main.myPlayer].dead)
 			{
 				string text14 = Lang.inter[38];
@@ -35276,7 +36594,7 @@
 				}
 			}
 			this.DrawMouseOver();
-			IL_42C5:
+		IL_42C5:
 			if (Main.mouseRight)
 			{
 				Main.npcChatRelease = false;
@@ -35445,13 +36763,13 @@
 							}
 						}
 						text2 = string.Concat(new object[]
-							{
-								num6,
-								":",
-								text5,
-								" ",
-								text4
-							});
+						{
+							num6,
+							":",
+							text5,
+							" ",
+							text4
+						});
 						flag = true;
 					}
 					else if (Main.player[Main.myPlayer].accWeatherRadio && !flag5 && (!Main.player[Main.myPlayer].hideInfo[1] || Main.playerInventory))
@@ -35497,23 +36815,23 @@
 						{
 							object obj = text2;
 							text2 = string.Concat(new object[]
-								{
-									obj,
-									" (",
-									Math.Abs(num8),
-									" mph W)"
-								});
+							{
+								obj,
+								" (",
+								Math.Abs(num8),
+								" mph W)"
+							});
 						}
 						else if (num8 > 0)
 						{
 							object obj = text2;
 							text2 = string.Concat(new object[]
-								{
-									obj,
-									" (",
-									num8,
-									" mph E)"
-								});
+							{
+								obj,
+								" (",
+								num8,
+								" mph E)"
+							});
 						}
 						flag5 = true;
 					}
@@ -36113,7 +37431,7 @@
 						}
 						num2 = 5;
 					}
-					IL_227:
+				IL_227:
 					if (num2 != 0 && (num2 != 1 || ((double)player.position.Y <= Main.worldSurface * 16.0 && !Main.dayTime && Main.snowMoon)) && (num2 != 2 || ((double)player.position.Y <= Main.worldSurface * 16.0 && !Main.dayTime && Main.pumpkinMoon)) && (num2 <= 2 || ((double)player.position.Y <= Main.worldSurface * 16.0 && Main.invasionType == num2 - 2)))
 					{
 						Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
@@ -36360,12 +37678,12 @@
 					text2 = ((int)((float)Main.invasionProgress * 100f / (float)Main.invasionProgressMax)).ToString() + "%";
 				}
 				text2 = string.Concat(new object[]
-					{
-						"Wave ",
-						Main.invasionProgressWave,
-						": ",
-						text2
-					});
+				{
+					"Wave ",
+					Main.invasionProgressWave,
+					": ",
+					text2
+				});
 				Texture2D texture2D2 = Main.colorBarTexture;
 				Texture2D arg_337_0 = Main.colorBlipTexture;
 				float num4 = MathHelper.Clamp((float)Main.invasionProgress / (float)Main.invasionProgressMax, 0f, 1f);
@@ -36428,7 +37746,7 @@
 		{
 			Main.SaveSettings();
 #if CLIENT
-			SocialAPI.Shutdown();
+			//SocialAPI.Shutdown();
 #endif
 			base.Exit();
 #if MAC
@@ -36590,6 +37908,7 @@
 			return Vector2.Zero;
 		}
 
+
 		protected void DrawMenu(GameTime gameTime)
 		{
 			if (!Main.IsEngineLoaded)
@@ -36706,9 +38025,9 @@
 				}
 			}
 			int num = 250;
-			int num2 = Main.screenWidth / 2;
+			int screenHorizontalCenter = Main.screenWidth / 2;
 			int num3 = 80;
-			int num4 = 0;
+			int numberClickableLabels = 0;
 			int num5 = Main.menuMode;
 			int num6 = 0;
 			int num7 = 0;
@@ -36722,7 +38041,7 @@
 			int[] array4 = new int[Main.maxMenuItems];
 			int[] array5 = new int[Main.maxMenuItems];
 			byte[] array6 = new byte[Main.maxMenuItems];
-			float[] array7 = new float[Main.maxMenuItems];
+			float[] clickableLabelScale = new float[Main.maxMenuItems];
 			bool[] array8 = new bool[Main.maxMenuItems];
 			bool flag4 = false;
 			for (int j = 0; j < Main.maxMenuItems; j++)
@@ -36731,112 +38050,20 @@
 				array2[j] = false;
 				array4[j] = 0;
 				array5[j] = 0;
-				array7[j] = 1f;
-			}
-			string[] array9 = new string[Main.maxMenuItems];
+				clickableLabelScale[j] = 1f;
+			}
+			string[] clickableLabelText = new string[Main.maxMenuItems];
 			if (Main.menuMode == -1)
 			{
 				Main.menuMode = 0;
 			}
 			if (Main.menuMode == 1212)
 			{
-				if (this.focusMenu == 2)
-				{
-					array9[0] = "Wählen Sie die Sprache";
-				}
-				else if (this.focusMenu == 3)
-				{
-					array9[0] = "Selezionare la lingua";
-				}
-				else if (this.focusMenu == 4)
-				{
-					array9[0] = "Sélectionnez la langue";
-				}
-				else if (this.focusMenu == 5)
-				{
-					array9[0] = "Seleccione el idioma";
-				}
-				else
-				{
-					array9[0] = "Select language";
-				}
-				num3 = 50;
-				num = 200;
-				array4[1] = 25;
-				array4[2] = 25;
-				array4[3] = 25;
-				array4[4] = 25;
-				array4[5] = 25;
-				array[0] = true;
-				array9[1] = "English";
-				array9[2] = "Deutsch";
-				array9[3] = "Italiano";
-				array9[4] = "Française";
-				array9[5] = "Español";
-				num4 = 6;
-				if (this.selectedMenu >= 1)
-				{
-					Lang.lang = this.selectedMenu;
-					Lang.setLang(false);
-					Main.menuMode = 0;
-					Main.PlaySound(10, -1, -1, 1);
-					Main.SaveSettings();
-				}
+				Main.menuMode = 0;
 			}
 			else if (Main.menuMode == 1213)
 			{
-				if (this.focusMenu == 1)
-				{
-					array9[0] = "Select language";
-				}
-				else if (this.focusMenu == 2)
-				{
-					array9[0] = "Wählen Sie die Sprache";
-				}
-				else if (this.focusMenu == 3)
-				{
-					array9[0] = "Selezionare la lingua";
-				}
-				else if (this.focusMenu == 4)
-				{
-					array9[0] = "Sélectionnez la langue";
-				}
-				else if (this.focusMenu == 5)
-				{
-					array9[0] = "Seleccione el idioma";
-				}
-				else
-				{
-					array9[0] = Lang.menu[102];
-				}
-				num3 = 48;
-				num = 180;
-				array4[1] = 25;
-				array4[2] = 25;
-				array4[3] = 25;
-				array4[4] = 25;
-				array4[5] = 25;
-				array4[6] = 50;
-				array[0] = true;
-				array9[1] = "English";
-				array9[2] = "Deutsch";
-				array9[3] = "Italiano";
-				array9[4] = "Française";
-				array9[5] = "Español";
-				array9[6] = Lang.menu[5];
-				num4 = 7;
-				if (this.selectedMenu == 6)
-				{
-					Main.menuMode = 11;
-					Main.PlaySound(11, -1, -1, 1);
-				}
-				else if (this.selectedMenu >= 1)
-				{
-					Lang.lang = this.selectedMenu;
-					Lang.setLang(false);
-					Main.PlaySound(12, -1, -1, 1);
-					Main.SaveSettings();
-				}
+				Main.menuMode = 11;
 			}
 			else if (Main.netMode == 2)
 			{
@@ -36847,29 +38074,29 @@
 					{
 						try
 						{
-							array9[k] = Netplay.Clients[k].StatusText;
+							clickableLabelText[k] = Netplay.Clients[k].StatusText;
 							if (Netplay.Clients[k].IsActive && Main.showSpam)
 							{
 								string[] array10;
-								string[] expr_86B = array10 = array9;
+								string[] expr_86B = array10 = clickableLabelText;
 								IntPtr intPtr;
 								int expr_870 = (int)(intPtr = (IntPtr)k);
 								object obj = array10[(int)intPtr];
 								expr_86B[expr_870] = string.Concat(new object[]
-									{
-										obj,
-										" (",
-										NetMessage.buffer[k].spamCount,
-										")"
-									});
+								{
+									obj,
+									" (",
+									NetMessage.buffer[k].spamCount,
+									")"
+								});
 							}
 						}
 						catch
 						{
-							array9[k] = "";
+							clickableLabelText[k] = "";
 						}
 						array[k] = true;
-						if (array9[k] != "" && array9[k] != null)
+						if (clickableLabelText[k] != "" && clickableLabelText[k] != null)
 						{
 							flag5 = false;
 						}
@@ -36877,23 +38104,24 @@
 				}
 				if (flag5)
 				{
-					array9[0] = Lang.menu[0];
-					array9[1] = Lang.menu[1] + Netplay.ListenPort + ".";
-				}
-				num4 = 11;
-				array9[9] = Main.statusText;
+					clickableLabelText[0] = Lang.menu[0];
+					clickableLabelText[1] = Lang.menu[1] + Netplay.ListenPort + ".";
+				}
+				numberClickableLabels = 11;
+				clickableLabelText[9] = Main.statusText;
 				array[9] = true;
 				num = 170;
 				num3 = 30;
 				array4[10] = 20;
 				array4[10] = 40;
-				array9[10] = Lang.menu[2];
+				clickableLabelText[10] = Lang.menu[2];
 				if (this.selectedMenu == 10)
 				{
 					Netplay.disconnect = true;
 					Main.PlaySound(11, -1, -1, 1);
 				}
 			}
+			/*
 			else if (Main.menuMode == 31)
 			{
 				string serverPassword = Netplay.ServerPassword;
@@ -36957,15 +38185,16 @@
 					Main.menuMode = 14;
 				}
 			}
+			*/
 			else
 			{
-				if (Main.netMode == 1 || Main.menuMode == 14)
-				{
-					num4 = 2;
-					array9[0] = Main.statusText;
+				if (Main.netMode == 1 /*|| Main.menuMode == 14*/)
+				{
+					numberClickableLabels = 2;
+					clickableLabelText[0] = Main.statusText;
 					array[0] = true;
 					num = 300;
-					array9[1] = Lang.menu[6];
+					clickableLabelText[1] = Lang.menu[6];
 					if (this.selectedMenu != 1)
 					{
 						goto IL_4287;
@@ -36987,135 +38216,137 @@
 				}
 				if (Main.menuMode == 882)
 				{
-					num4 = 2;
+					numberClickableLabels = 2;
 					array[0] = true;
 					num = 300;
-					array9[0] = Main.statusText;
-					array9[1] = Lang.menu[6];
+					clickableLabelText[0] = Main.statusText;
+					clickableLabelText[1] = Lang.menu[6];
 					if (this.selectedMenu == 1)
 					{
 						Main.PlaySound(11, -1, -1, 1);
 						Main.menuMode = 0;
 						Main.netMode = 0;
-						if (SocialAPI.Network != null)
-						{
-							SocialAPI.Network.CancelJoin();
-						}
-					}
-				}
+						//if (SocialAPI.Network != null)
+						//{
+						//    SocialAPI.Network.CancelJoin();
+						//}
+					}
+				}
+				/*
 				else if (Main.menuMode == 30)
 				{
-					string serverPassword2 = Netplay.ServerPassword;
-					Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword);
-					if (serverPassword2 != Netplay.ServerPassword)
-					{
-						Main.PlaySound(12, -1, -1, 1);
-					}
-					array9[0] = Lang.menu[7];
-					this.textBlinkerCount++;
-					if (this.textBlinkerCount >= 20)
-					{
-						if (this.textBlinkerState == 0)
-						{
-							this.textBlinkerState = 1;
-						}
-						else
-						{
-							this.textBlinkerState = 0;
-						}
-						this.textBlinkerCount = 0;
-					}
-					array9[1] = Netplay.ServerPassword;
-					if (Main.HidePassword)
-					{
-						array9[1] = "";
-						for (int m = 0; m < Netplay.ServerPassword.Length; m++)
-						{
-							string[] array10;
-							(array10 = array9)[1] = array10[1] + "*";
-						}
-					}
-					if (this.textBlinkerState == 1)
-					{
-						string[] array10;
-						(array10 = array9)[1] = array10[1] + "|";
-						array5[1] = 1;
-					}
-					else
-					{
-						string[] array10;
-						(array10 = array9)[1] = array10[1] + " ";
-					}
-					array[0] = true;
-					array[1] = true;
-					array4[1] = -20;
-					array4[2] = 20;
-					array9[2] = Lang.menu[4];
-					array9[3] = Lang.menu[5];
-					num4 = 4;
-					if (this.selectedMenu == 3)
-					{
-						if (SocialAPI.Network != null)
-						{
-							Main.menuMode = 889;
-						}
-						else
-						{
-							Main.menuMode = 6;
-						}
-						Netplay.ServerPassword = "";
-					}
-					else if (this.selectedMenu == 2 || Main.inputTextEnter || Main.autoPass)
-					{
-						string text = string.Concat(new object[]
-							{
-								"-autoshutdown -password \"",
-								Netplay.ServerPassword,
-								"\" -lang ",
-								Lang.lang
-							});
-#if LINUX
-				        if (IntPtr.Size == 8)
-				        {
-					        text += " -x64";
-				        }
-				        else
-				        {
-					        text += " -x86";
-				        }
-#endif
-						if (Main.ActiveWorldFileData.IsCloudSave)
-						{
-							text = text + " -cloudworld \"" + Main.worldPathName + "\"";
-						}
-						else
-						{
-							text = text + " -world \"" + Main.worldPathName + "\"";
-						}
-						this.tServer.StartInfo.FileName = "TerrariaServer.exe";
-						this.tServer.StartInfo.Arguments = text;
-						if (Main.libPath != "")
-						{
-							ProcessStartInfo expr_E36 = this.tServer.StartInfo;
-							expr_E36.Arguments = expr_E36.Arguments + " -loadlib " + Main.libPath;
-						}
-						this.tServer.StartInfo.UseShellExecute = false;
-						this.tServer.StartInfo.CreateNoWindow = true;
-						if (SocialAPI.Network != null)
-						{
-							SocialAPI.Network.LaunchLocalServer(this.tServer, Main.MenuServerMode);
-						}
-						else
-						{
-							this.tServer.Start();
-						}
-						Netplay.SetRemoteIP("127.0.0.1");
-						Main.autoPass = true;
-						Main.statusText = Lang.menu[8];
-						Netplay.StartTcpClient();
-						Main.menuMode = 10;
-					}
-				}
+					                    string serverPassword2 = Netplay.ServerPassword;
+					                    Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword);
+					                    if (serverPassword2 != Netplay.ServerPassword)
+					                    {
+					                        Main.PlaySound(12, -1, -1, 1);
+					                    }
+					                    array9[0] = Lang.menu[7];
+					                    this.textBlinkerCount++;
+					                    if (this.textBlinkerCount >= 20)
+					                    {
+					                        if (this.textBlinkerState == 0)
+					                        {
+					                            this.textBlinkerState = 1;
+					                        }
+					                        else
+					                        {
+					                            this.textBlinkerState = 0;
+					                        }
+					                        this.textBlinkerCount = 0;
+					                    }
+					                    array9[1] = Netplay.ServerPassword;
+					                    if (Main.HidePassword)
+					                    {
+					                        array9[1] = "";
+					                        for (int m = 0; m < Netplay.ServerPassword.Length; m++)
+					                        {
+					                            string[] array10;
+					                            (array10 = array9)[1] = array10[1] + "*";
+					                        }
+					                    }
+					                    if (this.textBlinkerState == 1)
+					                    {
+					                        string[] array10;
+					                        (array10 = array9)[1] = array10[1] + "|";
+					                        array5[1] = 1;
+					                    }
+					                    else
+					                    {
+					                        string[] array10;
+					                        (array10 = array9)[1] = array10[1] + " ";
+					                    }
+					                    array[0] = true;
+					                    array[1] = true;
+					                    array4[1] = -20;
+					                    array4[2] = 20;
+					                    array9[2] = Lang.menu[4];
+					                    array9[3] = Lang.menu[5];
+					                    num4 = 4;
+					                    if (this.selectedMenu == 3)
+					                    {
+					                        if (SocialAPI.Network != null)
+					                        {
+					                            Main.menuMode = 889;
+					                        }
+					                        else
+					                        {
+					                            Main.menuMode = 6;
+					                        }
+					                        Netplay.ServerPassword = "";
+					                    }
+					                    else if (this.selectedMenu == 2 || Main.inputTextEnter || Main.autoPass)
+					                    {
+					                        string text = string.Concat(new object[]
+					                        {
+					                            "-autoshutdown -password \"",
+					                            Netplay.ServerPassword,
+					                            "\" -lang ",
+					                            Lang.lang
+					                        });
+					#if LINUX
+									        if (IntPtr.Size == 8)
+									        {
+										        text += " -x64";
+									        }
+									        else
+									        {
+										        text += " -x86";
+									        }
+					#endif
+					                        if (Main.ActiveWorldFileData.IsCloudSave)
+					                        {
+					                            text = text + " -cloudworld \"" + Main.worldPathName + "\"";
+					                        }
+					                        else
+					                        {
+					                            text = text + " -world \"" + Main.worldPathName + "\"";
+					                        }
+					                        this.tServer.StartInfo.FileName = "TerrariaServer.exe";
+					                        this.tServer.StartInfo.Arguments = text;
+					                        if (Main.libPath != "")
+					                        {
+					                            ProcessStartInfo expr_E36 = this.tServer.StartInfo;
+					                            expr_E36.Arguments = expr_E36.Arguments + " -loadlib " + Main.libPath;
+					                        }
+					                        this.tServer.StartInfo.UseShellExecute = false;
+					                        this.tServer.StartInfo.CreateNoWindow = true;
+					                        if (SocialAPI.Network != null)
+					                        {
+					                            SocialAPI.Network.LaunchLocalServer(this.tServer, Main.MenuServerMode);
+					                        }
+					                        else
+					                        {
+					                            this.tServer.Start();
+					                        }
+					                        Netplay.SetRemoteIP("127.0.0.1");
+					                        Main.autoPass = true;
+					                        Main.statusText = Lang.menu[8];
+					                        Netplay.StartTcpClient();
+					                        Main.menuMode = 10;
+					                    }
+				}
+				*/
 				else if (Main.menuMode == 889)
 				{
 					num = 200;
@@ -37125,45 +38356,45 @@
 					array4[3] = 30;
 					array4[4] = 70;
 					array4[5] = 70;
-					num4 = 6;
-					array9[0] = Lang.menu[135];
-					array9[4] = Lang.menu[144];
-					array9[5] = Lang.menu[5];
+					numberClickableLabels = 6;
+					clickableLabelText[0] = Lang.menu[135];
+					clickableLabelText[4] = Lang.menu[144];
+					clickableLabelText[5] = Lang.menu[5];
 					array[0] = true;
 					if (!Main.MenuServerMode.HasFlag(ServerMode.Lobby))
 					{
 						Main.MenuServerMode = ServerMode.None;
 						array[2] = true;
 						array[3] = true;
-						array9[1] = Lang.menu[136];
-						array9[2] = "";
-						array9[3] = "";
+						clickableLabelText[1] = Lang.menu[136];
+						clickableLabelText[2] = "";
+						clickableLabelText[3] = "";
 					}
 					else
 					{
-						array9[1] = Lang.menu[137];
+						clickableLabelText[1] = Lang.menu[137];
 						if (Main.MenuServerMode.HasFlag(ServerMode.FriendsCanJoin))
 						{
-							array9[2] = Lang.menu[139];
+							clickableLabelText[2] = Lang.menu[139];
 							if (Main.MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
 							{
-								array9[3] = Lang.menu[143];
+								clickableLabelText[3] = Lang.menu[143];
 							}
 							else
 							{
-								array9[3] = Lang.menu[142];
+								clickableLabelText[3] = Lang.menu[142];
 							}
 						}
 						else
 						{
-							array9[2] = Lang.menu[138];
+							clickableLabelText[2] = Lang.menu[138];
 							if (Main.MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
 							{
-								array9[3] = Lang.menu[141];
+								clickableLabelText[3] = Lang.menu[141];
 							}
 							else
 							{
-								array9[3] = Lang.menu[140];
+								clickableLabelText[3] = Lang.menu[140];
 							}
 						}
 					}
@@ -37197,12 +38428,12 @@
 				}
 				else if (Main.menuMode == 15)
 				{
-					num4 = 2;
-					array9[0] = Main.statusText;
+					numberClickableLabels = 2;
+					clickableLabelText[0] = Main.statusText;
 					array[0] = true;
 					num = 80;
 					num3 = 400;
-					array9[1] = Lang.menu[5];
+					clickableLabelText[1] = Lang.menu[5];
 					if (this.selectedMenu == 1)
 					{
 						Netplay.disconnect = true;
@@ -37213,14 +38444,14 @@
 				}
 				else if (Main.menuMode == 200)
 				{
-					num4 = 3;
-					array9[0] = Lang.menu[9];
+					numberClickableLabels = 3;
+					clickableLabelText[0] = Lang.menu[9];
 					array[0] = true;
 					num -= 30;
 					array4[1] = 70;
 					array4[2] = 50;
-					array9[1] = Lang.menu[10];
-					array9[2] = Lang.menu[6];
+					clickableLabelText[1] = Lang.menu[10];
+					clickableLabelText[2] = Lang.menu[6];
 					if (this.selectedMenu == 1)
 					{
 						if (FileUtilities.Exists(Main.worldPathName + ".bak", Main.ActiveWorldFileData.IsCloudSave))
@@ -37246,15 +38477,15 @@
 				}
 				else if (Main.menuMode == 201)
 				{
-					num4 = 3;
-					array9[0] = Lang.menu[9];
+					numberClickableLabels = 3;
+					clickableLabelText[0] = Lang.menu[9];
 					array[0] = true;
 					array[1] = true;
 					num -= 30;
 					array4[1] = -30;
 					array4[2] = 50;
-					array9[1] = Lang.menu[11];
-					array9[2] = Lang.menu[5];
+					clickableLabelText[1] = Lang.menu[11];
+					clickableLabelText[2] = Lang.menu[5];
 					if (this.selectedMenu == 2)
 					{
 						Main.PlaySound(11, -1, -1, 1);
@@ -37264,19 +38495,19 @@
 				}
 				else if (Main.menuMode == 10)
 				{
-					num4 = 1;
-					array9[0] = Main.statusText;
+					numberClickableLabels = 1;
+					clickableLabelText[0] = Main.statusText;
 					array[0] = true;
 					num = 300;
 				}
 				else if (Main.menuMode == 100)
 				{
-					num4 = 1;
-					array9[0] = Main.statusText;
+					numberClickableLabels = 1;
+					clickableLabelText[0] = Main.statusText;
 					array[0] = true;
 					num = 300;
 				}
-				else if (Main.menuMode == 0)
+				else if (Main.menuMode == (int)MenuModes.ChooseWorldSize/*0*/)
 				{
 					Main.eclipse = false;
 					Main.pumpkinMoon = false;
@@ -37340,44 +38571,104 @@
 						SkyManager.Instance["Slime"].Deactivate(new object[0]);
 					}
 					int num9 = 0;
-					num4 = 5;
+					numberClickableLabels = 6;
 					num3 = 60;
+					/*
 					array9[num9] = Lang.menu[12];
 					if (this.selectedMenu == num9)
 					{
-						Main.PlaySound(10, -1, -1, 1);
-						Main.menuMode = 1;
+					    Main.PlaySound(10, -1, -1, 1);
+					    Main.menuMode = 1;
 					}
 					num9++;
 					array9[num9] = Lang.menu[13];
 					if (this.selectedMenu == num9)
 					{
-						Main.PlaySound(10, -1, -1, 1);
-						Main.menuMode = 12;
+					    Main.PlaySound(10, -1, -1, 1);
+					    Main.menuMode = 12;
 					}
 					num9++;
 					array9[num9] = Lang.menu[131];
 					if (this.selectedMenu == num9)
 					{
-						Main.PlaySound(10, -1, -1, 1);
-						Main.MenuUI.SetState(Main.AchievementsMenu);
-						Main.menuMode = 888;
+					    Main.PlaySound(10, -1, -1, 1);
+					    Main.MenuUI.SetState(Main.AchievementsMenu);
+					    Main.menuMode = 888;
 					}
 					num9++;
 					array9[num9] = Lang.menu[14];
 					if (this.selectedMenu == num9)
 					{
-						Main.PlaySound(10, -1, -1, 1);
-						Main.menuMode = 11;
+					    Main.PlaySound(10, -1, -1, 1);
+					    Main.menuMode = 11;
 					}
 					num9++;
 					array9[num9] = Lang.menu[15];
 					if (this.selectedMenu == num9)
 					{
+					    this.QuitGame();
+					}
+					num9++;
+					*/
+					num = 170;
+					num3 = 55;
+					array4[2] = 20;
+					array4[3] = 20;
+					array4[4] = 20;
+					array4[5] = 20;
+					array4[6] = 60;
+					clickableLabelText[1] = Lang.menu[91];
+					array[1] = true;
+					clickableLabelText[2] = Lang.menu[92];
+					clickableLabelText[3] = Lang.menu[93];
+					clickableLabelText[4] = Lang.menu[94];
+					clickableLabelText[5] = "Keep Previous Custom Size";
+					clickableLabelText[6] = Lang.menu[15];
+					numberClickableLabels = 7;
+					if (this.selectedMenu == 6)
+					{
 						this.QuitGame();
 					}
-					num9++;
-				}
+					else if (this.selectedMenu == 0)
+					{
+						Main.menuMode = 6;
+					}
+					else if (this.selectedMenu > 0)
+					{
+						if (this.selectedMenu == 2)
+						{
+							Main.maxTilesX = /*8400;// */4200;
+							Main.maxTilesY = /*600;//*/1200;
+							WorldGen.worldSize = 0;
+						}
+						else if (this.selectedMenu == 3)
+						{
+							Main.maxTilesX = 6400;
+							Main.maxTilesY = 1800;
+							WorldGen.worldSize = 1;
+						}
+						else if (this.selectedMenu == 4)
+						{
+							Main.maxTilesX = 8400;
+							Main.maxTilesY = 2400;
+							WorldGen.worldSize = 2;
+						}
+						else if (this.selectedMenu == 5)
+						{
+							if (Main.maxTilesX == 8401)
+							{
+								Main.maxTilesX = 4200;
+								Main.maxTilesY = 1200;
+								WorldGen.worldSize = 0;
+							}
+						}
+						Main.clrInput();
+						Main.menuMode = (int)MenuModes.SelectDifficulty/*-7*/;
+						WorldGen.setWorldSize();
+					}
+
+				}
+				/*
 				else if (Main.menuMode == 1)
 				{
 					Main.MenuUI.SetState(Main._characterSelectMenu);
@@ -37385,340 +38676,340 @@
 				}
 				else if (Main.menuMode == 2)
 				{
-					flag4 = true;
-					if (this.selectedMenu == 0)
-					{
-						Main.menuMode = 17;
-						Main.PlaySound(10, -1, -1, 1);
-						Main.selColor = Main.PendingPlayer.hairColor;
-					}
-					if (this.selectedMenu == 1)
-					{
-						Main.menuMode = 18;
-						Main.PlaySound(10, -1, -1, 1);
-						Main.selColor = Main.PendingPlayer.eyeColor;
-					}
-					if (this.selectedMenu == 2)
-					{
-						Main.menuMode = 19;
-						Main.PlaySound(10, -1, -1, 1);
-						Main.selColor = Main.PendingPlayer.skinColor;
-					}
-					if (this.selectedMenu == 3)
-					{
-						Main.menuMode = 20;
-						Main.PlaySound(10, -1, -1, 1);
-					}
-					array9[0] = Lang.menu[18];
-					array9[1] = Lang.menu[19];
-					array9[2] = Lang.menu[20];
-					array9[3] = Lang.menu[21];
-					num = 220;
-					for (int num10 = 0; num10 < 9; num10++)
-					{
-						if (num10 < 6)
-						{
-							array7[num10] = 0.75f;
-						}
-						else
-						{
-							array7[num10] = 0.9f;
-						}
-					}
-					num3 = 38;
-					array4[6] = 6;
-					array4[7] = 12;
-					array4[8] = 18;
-					num6 = Main.screenWidth / 2 - 16;
-					num7 = 176;
-					if (Main.PendingPlayer.Male)
-					{
-						array9[4] = Lang.menu[22];
-					}
-					else
-					{
-						array9[4] = Lang.menu[23];
-					}
-					if (this.selectedMenu == 4)
-					{
-						if (Main.PendingPlayer.Male)
-						{
-							Main.PlaySound(20, -1, -1, 1);
-							Main.PendingPlayer.Male = false;
-						}
-						else
-						{
-							Main.PlaySound(1, -1, -1, 1);
-							Main.PendingPlayer.Male = true;
-						}
-					}
-					if (Main.PendingPlayer.difficulty == 2)
-					{
-						array9[5] = Lang.menu[24];
-						array6[5] = Main.PendingPlayer.difficulty;
-					}
-					else if (Main.PendingPlayer.difficulty == 1)
-					{
-						array9[5] = Lang.menu[25];
-						array6[5] = Main.PendingPlayer.difficulty;
-					}
-					else
-					{
-						array9[5] = Lang.menu[26];
-					}
-					if (this.selectedMenu == 5)
-					{
-						Main.PlaySound(10, -1, -1, 1);
-						Main.menuMode = 222;
-					}
-					if (this.selectedMenu == 7)
-					{
-						Main.PlaySound(12, -1, -1, 1);
-						Main.PendingPlayer.hair = Main.rand.Next(51);
-						Main.PendingPlayer.eyeColor = this.randColor();
-						while ((int)(Main.PendingPlayer.eyeColor.R + Main.PendingPlayer.eyeColor.G + Main.PendingPlayer.eyeColor.B) > 300)
-						{
-							Main.PendingPlayer.eyeColor = this.randColor();
-						}
-						Main.PendingPlayer.hairColor = this.randColor();
-						Main.PendingPlayer.pantsColor = this.randColor();
-						Main.PendingPlayer.shirtColor = this.randColor();
-						Main.PendingPlayer.shoeColor = this.randColor();
-						Main.PendingPlayer.skinColor = this.randColor();
-						float num11 = (float)Main.rand.Next(60, 120) * 0.01f;
-						if (num11 > 1f)
-						{
-							num11 = 1f;
-						}
-						Main.PendingPlayer.skinColor.R = (byte)((float)Main.rand.Next(240, 255) * num11);
-						Main.PendingPlayer.skinColor.G = (byte)((float)Main.rand.Next(110, 140) * num11);
-						Main.PendingPlayer.skinColor.B = (byte)((float)Main.rand.Next(75, 110) * num11);
-						Main.PendingPlayer.underShirtColor = this.randColor();
-						int num12 = Main.PendingPlayer.hair + 1;
-						if (num12 == 5 || num12 == 6 || num12 == 7 || num12 == 10 || num12 == 12 || num12 == 19 || num12 == 22 || num12 == 23 || num12 == 26 || num12 == 27 || num12 == 30 || num12 == 33)
-						{
-							Main.PendingPlayer.Male = false;
-						}
-						else
-						{
-							Main.PendingPlayer.Male = true;
-						}
-						Main.PendingPlayer.skinVariant = Main.rand.Next(8);
-					}
-					array9[7] = Lang.menu[27];
-					array9[6] = Lang.menu[28];
-					array9[8] = Lang.menu[5];
-					num4 = 9;
-					if (this.selectedMenu == 8)
-					{
-						Main.PlaySound(11, -1, -1, 1);
-						Main.menuMode = 1;
-					}
-					else if (this.selectedMenu == 6)
-					{
-						Main.PlaySound(10, -1, -1, 1);
-						Main.PendingPlayer.name = "";
-						Main.menuMode = 3;
-						Main.clrInput();
-					}
+				flag4 = true;
+				if (this.selectedMenu == 0)
+				{
+				    Main.menuMode = 17;
+				    Main.PlaySound(10, -1, -1, 1);
+				    Main.selColor = Main.PendingPlayer.hairColor;
+				}
+				if (this.selectedMenu == 1)
+				{
+				    Main.menuMode = 18;
+				    Main.PlaySound(10, -1, -1, 1);
+				    Main.selColor = Main.PendingPlayer.eyeColor;
+				}
+				if (this.selectedMenu == 2)
+				{
+				    Main.menuMode = 19;
+				    Main.PlaySound(10, -1, -1, 1);
+				    Main.selColor = Main.PendingPlayer.skinColor;
+				}
+				if (this.selectedMenu == 3)
+				{
+				    Main.menuMode = 20;
+				    Main.PlaySound(10, -1, -1, 1);
+				}
+				array9[0] = Lang.menu[18];
+				array9[1] = Lang.menu[19];
+				array9[2] = Lang.menu[20];
+				array9[3] = Lang.menu[21];
+				num = 220;
+				for (int num10 = 0; num10 < 9; num10++)
+				{
+				    if (num10 < 6)
+				    {
+				        array7[num10] = 0.75f;
+				    }
+				    else
+				    {
+				        array7[num10] = 0.9f;
+				    }
+				}
+				num3 = 38;
+				array4[6] = 6;
+				array4[7] = 12;
+				array4[8] = 18;
+				num6 = Main.screenWidth / 2 - 16;
+				num7 = 176;
+				if (Main.PendingPlayer.Male)
+				{
+				    array9[4] = Lang.menu[22];
+				}
+				else
+				{
+				    array9[4] = Lang.menu[23];
+				}
+				if (this.selectedMenu == 4)
+				{
+				    if (Main.PendingPlayer.Male)
+				    {
+				        Main.PlaySound(20, -1, -1, 1);
+				        Main.PendingPlayer.Male = false;
+				    }
+				    else
+				    {
+				        Main.PlaySound(1, -1, -1, 1);
+				        Main.PendingPlayer.Male = true;
+				    }
+				}
+				if (Main.PendingPlayer.difficulty == 2)
+				{
+				    array9[5] = Lang.menu[24];
+				    array6[5] = Main.PendingPlayer.difficulty;
+				}
+				else if (Main.PendingPlayer.difficulty == 1)
+				{
+				    array9[5] = Lang.menu[25];
+				    array6[5] = Main.PendingPlayer.difficulty;
+				}
+				else
+				{
+				    array9[5] = Lang.menu[26];
+				}
+				if (this.selectedMenu == 5)
+				{
+				    Main.PlaySound(10, -1, -1, 1);
+				    Main.menuMode = 222;
+				}
+				if (this.selectedMenu == 7)
+				{
+				    Main.PlaySound(12, -1, -1, 1);
+				    Main.PendingPlayer.hair = Main.rand.Next(51);
+				    Main.PendingPlayer.eyeColor = this.randColor();
+				    while ((int)(Main.PendingPlayer.eyeColor.R + Main.PendingPlayer.eyeColor.G + Main.PendingPlayer.eyeColor.B) > 300)
+				    {
+				        Main.PendingPlayer.eyeColor = this.randColor();
+				    }
+				    Main.PendingPlayer.hairColor = this.randColor();
+				    Main.PendingPlayer.pantsColor = this.randColor();
+				    Main.PendingPlayer.shirtColor = this.randColor();
+				    Main.PendingPlayer.shoeColor = this.randColor();
+				    Main.PendingPlayer.skinColor = this.randColor();
+				    float num11 = (float)Main.rand.Next(60, 120) * 0.01f;
+				    if (num11 > 1f)
+				    {
+				        num11 = 1f;
+				    }
+				    Main.PendingPlayer.skinColor.R = (byte)((float)Main.rand.Next(240, 255) * num11);
+				    Main.PendingPlayer.skinColor.G = (byte)((float)Main.rand.Next(110, 140) * num11);
+				    Main.PendingPlayer.skinColor.B = (byte)((float)Main.rand.Next(75, 110) * num11);
+				    Main.PendingPlayer.underShirtColor = this.randColor();
+				    int num12 = Main.PendingPlayer.hair + 1;
+				    if (num12 == 5 || num12 == 6 || num12 == 7 || num12 == 10 || num12 == 12 || num12 == 19 || num12 == 22 || num12 == 23 || num12 == 26 || num12 == 27 || num12 == 30 || num12 == 33)
+				    {
+				        Main.PendingPlayer.Male = false;
+				    }
+				    else
+				    {
+				        Main.PendingPlayer.Male = true;
+				    }
+				    Main.PendingPlayer.skinVariant = Main.rand.Next(8);
+				}
+				array9[7] = Lang.menu[27];
+				array9[6] = Lang.menu[28];
+				array9[8] = Lang.menu[5];
+				num4 = 9;
+				if (this.selectedMenu == 8)
+				{
+				    Main.PlaySound(11, -1, -1, 1);
+				    Main.menuMode = 1;
+				}
+				else if (this.selectedMenu == 6)
+				{
+				    Main.PlaySound(10, -1, -1, 1);
+				    Main.PendingPlayer.name = "";
+				    Main.menuMode = 3;
+				    Main.clrInput();
+				}
 				}
 				else if (Main.menuMode == 222)
 				{
-					if (this.focusMenu == 3)
-					{
-						array9[0] = Lang.menu[29];
-					}
-					else if (this.focusMenu == 2)
-					{
-						array9[0] = Lang.menu[30];
-					}
-					else if (this.focusMenu == 1)
-					{
-						array9[0] = Lang.menu[31];
-					}
-					else
-					{
-						array9[0] = Lang.menu[32];
-					}
-					num3 = 50;
-					array4[1] = 25;
-					array4[2] = 25;
-					array4[3] = 25;
-					array[0] = true;
-					array9[1] = Lang.menu[26];
-					array9[2] = Lang.menu[25];
-					array6[2] = 1;
-					array9[3] = Lang.menu[24];
-					array6[3] = 2;
-					num4 = 4;
-					if (this.selectedMenu == 1)
-					{
-						Main.PendingPlayer.difficulty = 0;
-						Main.menuMode = 2;
-					}
-					else if (this.selectedMenu == 2)
-					{
-						Main.menuMode = 2;
-						Main.PendingPlayer.difficulty = 1;
-					}
-					else if (this.selectedMenu == 3)
-					{
-						Main.PendingPlayer.difficulty = 2;
-						Main.menuMode = 2;
-					}
+				if (this.focusMenu == 3)
+				{
+				    array9[0] = Lang.menu[29];
+				}
+				else if (this.focusMenu == 2)
+				{
+				    array9[0] = Lang.menu[30];
+				}
+				else if (this.focusMenu == 1)
+				{
+				    array9[0] = Lang.menu[31];
+				}
+				else
+				{
+				    array9[0] = Lang.menu[32];
+				}
+				num3 = 50;
+				array4[1] = 25;
+				array4[2] = 25;
+				array4[3] = 25;
+				array[0] = true;
+				array9[1] = Lang.menu[26];
+				array9[2] = Lang.menu[25];
+				array6[2] = 1;
+				array9[3] = Lang.menu[24];
+				array6[3] = 2;
+				num4 = 4;
+				if (this.selectedMenu == 1)
+				{
+				    Main.PendingPlayer.difficulty = 0;
+				    Main.menuMode = 2;
+				}
+				else if (this.selectedMenu == 2)
+				{
+				    Main.menuMode = 2;
+				    Main.PendingPlayer.difficulty = 1;
+				}
+				else if (this.selectedMenu == 3)
+				{
+				    Main.PendingPlayer.difficulty = 2;
+				    Main.menuMode = 2;
+				}
 				}
 				else if (Main.menuMode == 20)
 				{
-					flag4 = true;
-					if (this.selectedMenu == 0)
-					{
-						Main.menuMode = 21;
-						Main.PlaySound(10, -1, -1, 1);
-						Main.selColor = Main.PendingPlayer.shirtColor;
-					}
-					if (this.selectedMenu == 1)
-					{
-						Main.menuMode = 22;
-						Main.PlaySound(10, -1, -1, 1);
-						Main.selColor = Main.PendingPlayer.underShirtColor;
-					}
-					if (this.selectedMenu == 2)
-					{
-						Main.menuMode = 23;
-						Main.PlaySound(10, -1, -1, 1);
-						Main.selColor = Main.PendingPlayer.pantsColor;
-					}
-					if (this.selectedMenu == 3)
-					{
-						Main.selColor = Main.PendingPlayer.shoeColor;
-						Main.menuMode = 24;
-						Main.PlaySound(10, -1, -1, 1);
-					}
-					if (this.selectedMenu == 5)
-					{
-						Main.PlaySound(11, -1, -1, 1);
-						Main.menuMode = 2;
-					}
-					if (this.selectedMenu == 4)
-					{
-						Main.PlaySound(12, -1, -1, 1);
-						if (Main.PendingPlayer.skinVariant < 4)
-						{
-							Main.PendingPlayer.skinVariant++;
-							if (Main.PendingPlayer.skinVariant == 4)
-							{
-								Main.PendingPlayer.skinVariant = 0;
-							}
-						}
-						else
-						{
-							Main.PendingPlayer.skinVariant++;
-							if (Main.PendingPlayer.skinVariant == 8)
-							{
-								Main.PendingPlayer.skinVariant = 4;
-							}
-						}
-					}
-					num6 = Main.screenWidth / 2 - 16;
-					num7 = 210;
-					num = 260;
-					num3 = 50;
-					num4 = 6;
-					array9[0] = Lang.menu[33];
-					array9[1] = Lang.menu[34];
-					array9[2] = Lang.menu[35];
-					array9[3] = Lang.menu[36];
-					array9[4] = Lang.menu[127];
-					array9[5] = Lang.menu[5];
-					array4[5] = 20;
+				flag4 = true;
+				if (this.selectedMenu == 0)
+				{
+				    Main.menuMode = 21;
+				    Main.PlaySound(10, -1, -1, 1);
+				    Main.selColor = Main.PendingPlayer.shirtColor;
+				}
+				if (this.selectedMenu == 1)
+				{
+				    Main.menuMode = 22;
+				    Main.PlaySound(10, -1, -1, 1);
+				    Main.selColor = Main.PendingPlayer.underShirtColor;
+				}
+				if (this.selectedMenu == 2)
+				{
+				    Main.menuMode = 23;
+				    Main.PlaySound(10, -1, -1, 1);
+				    Main.selColor = Main.PendingPlayer.pantsColor;
+				}
+				if (this.selectedMenu == 3)
+				{
+				    Main.selColor = Main.PendingPlayer.shoeColor;
+				    Main.menuMode = 24;
+				    Main.PlaySound(10, -1, -1, 1);
+				}
+				if (this.selectedMenu == 5)
+				{
+				    Main.PlaySound(11, -1, -1, 1);
+				    Main.menuMode = 2;
+				}
+				if (this.selectedMenu == 4)
+				{
+				    Main.PlaySound(12, -1, -1, 1);
+				    if (Main.PendingPlayer.skinVariant < 4)
+				    {
+				        Main.PendingPlayer.skinVariant++;
+				        if (Main.PendingPlayer.skinVariant == 4)
+				        {
+				            Main.PendingPlayer.skinVariant = 0;
+				        }
+				    }
+				    else
+				    {
+				        Main.PendingPlayer.skinVariant++;
+				        if (Main.PendingPlayer.skinVariant == 8)
+				        {
+				            Main.PendingPlayer.skinVariant = 4;
+				        }
+				    }
+				}
+				num6 = Main.screenWidth / 2 - 16;
+				num7 = 210;
+				num = 260;
+				num3 = 50;
+				num4 = 6;
+				array9[0] = Lang.menu[33];
+				array9[1] = Lang.menu[34];
+				array9[2] = Lang.menu[35];
+				array9[3] = Lang.menu[36];
+				array9[4] = Lang.menu[127];
+				array9[5] = Lang.menu[5];
+				array4[5] = 20;
 				}
 				else if (Main.menuMode == 17)
 				{
-					flag4 = true;
-					num6 = Main.screenWidth / 2 - 16;
-					num7 = 210;
-					flag = true;
-					num8 = 390;
-					num = 260;
-					num3 = 60;
-					Main.PendingPlayer.hairColor = Main.selColor;
-					num4 = 3;
-					array9[0] = Lang.menu[37] + " " + (Main.PendingPlayer.hair + 1);
-					array9[1] = Lang.menu[38];
-					array[1] = true;
-					array4[2] = 150;
-					array4[1] = 10;
-					array9[2] = Lang.menu[5];
-					int num13 = 51;
-					if (this.selectedMenu == 0)
-					{
-						Main.PlaySound(12, -1, -1, 1);
-						Main.PendingPlayer.hair++;
-						if (Main.PendingPlayer.hair >= num13)
-						{
-							Main.PendingPlayer.hair = 0;
-						}
-					}
-					else if (this.selectedMenu2 == 0)
-					{
-						Main.PlaySound(12, -1, -1, 1);
-						Main.PendingPlayer.hair--;
-						if (Main.PendingPlayer.hair < 0)
-						{
-							Main.PendingPlayer.hair = num13 - 1;
-						}
-					}
-					if (this.selectedMenu == 2)
-					{
-						Main.menuMode = 2;
-						Main.PlaySound(11, -1, -1, 1);
-					}
+				flag4 = true;
+				num6 = Main.screenWidth / 2 - 16;
+				num7 = 210;
+				flag = true;
+				num8 = 390;
+				num = 260;
+				num3 = 60;
+				Main.PendingPlayer.hairColor = Main.selColor;
+				num4 = 3;
+				array9[0] = Lang.menu[37] + " " + (Main.PendingPlayer.hair + 1);
+				array9[1] = Lang.menu[38];
+				array[1] = true;
+				array4[2] = 150;
+				array4[1] = 10;
+				array9[2] = Lang.menu[5];
+				int num13 = 51;
+				if (this.selectedMenu == 0)
+				{
+				    Main.PlaySound(12, -1, -1, 1);
+				    Main.PendingPlayer.hair++;
+				    if (Main.PendingPlayer.hair >= num13)
+				    {
+				        Main.PendingPlayer.hair = 0;
+				    }
+				}
+				else if (this.selectedMenu2 == 0)
+				{
+				    Main.PlaySound(12, -1, -1, 1);
+				    Main.PendingPlayer.hair--;
+				    if (Main.PendingPlayer.hair < 0)
+				    {
+				        Main.PendingPlayer.hair = num13 - 1;
+				    }
+				}
+				if (this.selectedMenu == 2)
+				{
+				    Main.menuMode = 2;
+				    Main.PlaySound(11, -1, -1, 1);
+				}
 				}
 				else if (Main.menuMode == 18)
 				{
-					flag4 = true;
-					num6 = Main.screenWidth / 2 - 16;
-					num7 = 210;
-					flag = true;
-					num8 = 370;
-					num = 240;
-					num3 = 60;
-					Main.PendingPlayer.eyeColor = Main.selColor;
-					num4 = 3;
-					array9[0] = "";
-					array9[1] = Lang.menu[39];
-					array[1] = true;
-					array4[2] = 170;
-					array4[1] = 10;
-					array9[2] = Lang.menu[5];
-					if (this.selectedMenu == 2)
-					{
-						Main.menuMode = 2;
-						Main.PlaySound(11, -1, -1, 1);
-					}
+				flag4 = true;
+				num6 = Main.screenWidth / 2 - 16;
+				num7 = 210;
+				flag = true;
+				num8 = 370;
+				num = 240;
+				num3 = 60;
+				Main.PendingPlayer.eyeColor = Main.selColor;
+				num4 = 3;
+				array9[0] = "";
+				array9[1] = Lang.menu[39];
+				array[1] = true;
+				array4[2] = 170;
+				array4[1] = 10;
+				array9[2] = Lang.menu[5];
+				if (this.selectedMenu == 2)
+				{
+				    Main.menuMode = 2;
+				    Main.PlaySound(11, -1, -1, 1);
+				}
 				}
 				else if (Main.menuMode == 19)
 				{
-					flag4 = true;
-					num6 = Main.screenWidth / 2 - 16;
-					num7 = 210;
-					flag = true;
-					num8 = 370;
-					num = 240;
-					num3 = 60;
-					Main.PendingPlayer.skinColor = Main.selColor;
-					num4 = 3;
-					array9[0] = "";
-					array9[1] = Lang.menu[40];
-					array[1] = true;
-					array4[2] = 170;
-					array4[1] = 10;
-					array9[2] = Lang.menu[5];
-					if (this.selectedMenu == 2)
-					{
-						Main.menuMode = 2;
-						Main.PlaySound(11, -1, -1, 1);
-					}
+				flag4 = true;
+				num6 = Main.screenWidth / 2 - 16;
+				num7 = 210;
+				flag = true;
+				num8 = 370;
+				num = 240;
+				num3 = 60;
+				Main.PendingPlayer.skinColor = Main.selColor;
+				num4 = 3;
+				array9[0] = "";
+				array9[1] = Lang.menu[40];
+				array[1] = true;
+				array4[2] = 170;
+				array4[1] = 10;
+				array9[2] = Lang.menu[5];
+				if (this.selectedMenu == 2)
+				{
+				    Main.menuMode = 2;
+				    Main.PlaySound(11, -1, -1, 1);
+				}
 				}
 				else if (Main.menuMode == 21)
 				{
@@ -37814,82 +39105,84 @@
 				}
 				else if (Main.menuMode == 3)
 				{
-					string name = Main.PendingPlayer.name;
-					Main.PendingPlayer.name = Main.GetInputText(Main.PendingPlayer.name);
-					if (Main.PendingPlayer.name.Length > Player.nameLen)
-					{
-						Main.PendingPlayer.name = Main.PendingPlayer.name.Substring(0, Player.nameLen);
-					}
-					if (name != Main.PendingPlayer.name)
-					{
-						Main.PlaySound(12, -1, -1, 1);
-					}
-					array9[0] = Lang.menu[45];
-					array2[2] = true;
-					if (Main.PendingPlayer.name != "")
-					{
-						if (Main.PendingPlayer.name.Substring(0, 1) == " ")
-						{
-							Main.PendingPlayer.name = "";
-						}
-						for (int num14 = 0; num14 < Main.PendingPlayer.name.Length; num14++)
-						{
-							if (Main.PendingPlayer.name.Substring(num14, 1) != " ")
-							{
-								array2[2] = false;
-							}
-						}
-					}
-					this.textBlinkerCount++;
-					if (this.textBlinkerCount >= 20)
-					{
-						if (this.textBlinkerState == 0)
-						{
-							this.textBlinkerState = 1;
-						}
-						else
-						{
-							this.textBlinkerState = 0;
-						}
-						this.textBlinkerCount = 0;
-					}
-					array9[1] = Main.PendingPlayer.name;
-					if (this.textBlinkerState == 1)
-					{
-						string[] array10;
-						(array10 = array9)[1] = array10[1] + "|";
-						array5[1] = 1;
-					}
-					else
-					{
-						string[] array10;
-						(array10 = array9)[1] = array10[1] + " ";
-					}
-					array[0] = true;
-					array[1] = true;
-					array4[1] = -20;
-					array4[2] = 20;
-					array9[2] = Lang.menu[4];
-					array9[3] = Lang.menu[5];
-					num4 = 4;
-					if (this.selectedMenu == 3)
-					{
-						Main.PlaySound(11, -1, -1, 1);
-						Main.menuMode = 2;
-					}
-					if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
-					{
-						Main.PendingPlayer.name.Trim();
-						PlayerFileData.CreateAndSave(Main.PendingPlayer);
-						Main.LoadPlayers();
-						Main.PlaySound(10, -1, -1, 1);
-						Main.menuMode = 1;
-					}
-				}
+				string name = Main.PendingPlayer.name;
+				Main.PendingPlayer.name = Main.GetInputText(Main.PendingPlayer.name);
+				if (Main.PendingPlayer.name.Length > Player.nameLen)
+				{
+				    Main.PendingPlayer.name = Main.PendingPlayer.name.Substring(0, Player.nameLen);
+				}
+				if (name != Main.PendingPlayer.name)
+				{
+				    Main.PlaySound(12, -1, -1, 1);
+				}
+				array9[0] = Lang.menu[45];
+				array2[2] = true;
+				if (Main.PendingPlayer.name != "")
+				{
+				    if (Main.PendingPlayer.name.Substring(0, 1) == " ")
+				    {
+				        Main.PendingPlayer.name = "";
+				    }
+				    for (int num14 = 0; num14 < Main.PendingPlayer.name.Length; num14++)
+				    {
+				        if (Main.PendingPlayer.name.Substring(num14, 1) != " ")
+				        {
+				            array2[2] = false;
+				        }
+				    }
+				}
+				this.textBlinkerCount++;
+				if (this.textBlinkerCount >= 20)
+				{
+				    if (this.textBlinkerState == 0)
+				    {
+				        this.textBlinkerState = 1;
+				    }
+				    else
+				    {
+				        this.textBlinkerState = 0;
+				    }
+				    this.textBlinkerCount = 0;
+				}
+				array9[1] = Main.PendingPlayer.name;
+				if (this.textBlinkerState == 1)
+				{
+				    string[] array10;
+				    (array10 = array9)[1] = array10[1] + "|";
+				    array5[1] = 1;
+				}
+				else
+				{
+				    string[] array10;
+				    (array10 = array9)[1] = array10[1] + " ";
+				}
+				array[0] = true;
+				array[1] = true;
+				array4[1] = -20;
+				array4[2] = 20;
+				array9[2] = Lang.menu[4];
+				array9[3] = Lang.menu[5];
+				num4 = 4;
+				if (this.selectedMenu == 3)
+				{
+				    Main.PlaySound(11, -1, -1, 1);
+				    Main.menuMode = 2;
+				}
+				if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
+				{
+				    Main.PendingPlayer.name.Trim();
+				    PlayerFileData.CreateAndSave(Main.PendingPlayer);
+				    Main.LoadPlayers();
+				    Main.PlaySound(10, -1, -1, 1);
+				    Main.menuMode = 1;
+				}
+				}
+				*/
 				else if (Main.menuMode != 4)
 				{
 					if (Main.menuMode == 5)
 					{
+						/*
 						array9[0] = Lang.menu[46] + " " + Main.PlayerList[Main.selectedPlayer].Player.name + "?";
 						array[0] = true;
 						array9[1] = Lang.menu[104];
@@ -37897,69 +39190,184 @@
 						num4 = 3;
 						if (this.selectedMenu == 1)
 						{
-							Main.ErasePlayer(Main.selectedPlayer);
-							Main.PlaySound(10, -1, -1, 1);
-							Main.menuMode = 1;
+						    Main.ErasePlayer(Main.selectedPlayer);
+						    Main.PlaySound(10, -1, -1, 1);
+						    Main.menuMode = 1;
 						}
 						else if (this.selectedMenu == 2)
 						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 1;
-						}
+						    Main.PlaySound(11, -1, -1, 1);
+						    Main.menuMode = 1;
+						}
+						*/
 					}
 					else if (Main.menuMode == 6)
 					{
+
+						num = 180;
+						num3 = 40;
+						numberClickableLabels = 10;
+						array4[7] += 10;
+						array4[8] += 10;
+						array4[9] += 10;
+						for (int num16 = 0; num16 < numberClickableLabels; num16++)
+						{
+							clickableLabelScale[num16] = 0.8f;
+						}
+						clickableLabelText[8] = Lang.menu[17]; // delete
+						if (SettingSaver.numSettingsLoad >= 1000)
+						{
+							array2[7] = true;
+							clickableLabelText[7] = "";
+						}
+						else if (SettingSaver.numSettingsLoad == 0)
+						{
+							array2[8] = true;
+							clickableLabelText[8] = "";
+						}
+						clickableLabelText[9] = Lang.menu[5];
+						for (int num17 = 0; num17 < 7; num17++)
+						{
+							if (num17 + Main.menuSkip < SettingSaver.numSettingsLoad)
+							{
+								clickableLabelText[num17] = SettingSaver.settings[num17 + Main.menuSkip];
+							}
+							else
+							{
+								clickableLabelText[num17] = null;
+							}
+						}
+						if (SettingSaver.numSettingsLoad > 7 + Main.menuSkip)
+						{
+							this.menuWide[6] = true;
+							clickableLabelText[6] = "â–¼";
+							clickableLabelScale[6] = 0.6f;
+							array4[6] += 8;
+						}
+						if (Main.menuSkip > 0)
+						{
+							clickableLabelText[0] = "â–²";
+							clickableLabelScale[0] = 0.6f;
+							array4[0] += 8;
+							this.menuWide[0] = true;
+						}
+						if (this.selectedMenu == 0 && Main.menuSkip > 0)
+						{
+							Main.menuSkip -= 5;
+							if (Main.menuSkip < 0)
+							{
+								Main.menuSkip = 0;
+							}
+						}
+						else if (this.selectedMenu == 6 && Main.menuSkip < Main.worldCount - 7)
+						{
+							Main.menuSkip += 5;
+							if (Main.menuSkip >= Main.worldCount - 7)
+							{
+								Main.menuSkip = Main.worldCount - 7;
+							}
+						}
+						else if (this.selectedMenu == 9)
+						{
+							Main.menuMode = 0;
+						}
+						else if (this.selectedMenu == 7)
+						{
+							Main.menuMode = 16;
+							Main.newWorldName = Lang.gen[57] + " " + (Main.worldCount + 1);
+						}
+						else if (this.selectedMenu == 8)
+						{
+							Main.menuMode = 8;
+						}
+						/*
+						else if (this.selectedMenu >= 0)
+						{
+							if (Main.menuMultiplayer)
+							{
+							    Main.worldPathName = Main.loadWorldPath[this.selectedMenu + Main.menuSkip];
+							    Main.menuMode = 30;
+							    Main.GetInputText("");
+							}
+							else
+							{
+							    Main.worldPathName = Main.loadWorldPath[this.selectedMenu + Main.menuSkip];
+							    WorldGen.playWorld();
+							    Main.menuMode = 10;
+							}
+						}
+
 						Main.MenuUI.SetState(Main._worldSelectMenu);
 						Main.menuMode = 888;
-					}
-					else if (Main.menuMode == -7)
+						*/
+					}
+					else if (Main.menuMode == (int)MenuModes.SelectDifficulty /*-7*/)
 					{
 						num = 200;
 						num3 = 60;
 						array4[2] = 30;
-						array4[3] = 30;
+						array4[3] = 15;
 						array6[3] = 2;
-						array4[4] = 70;
-						if (this.focusMenu == 2)
-						{
-							array9[0] = "Your Journey Begins...";
-							array9[1] = "(The standard Terraria Experience)";
+                        array6[4] = 4;
+                        array4[5] = 50;
+                        clickableLabelScale[1] = 1f;
+                        if (this.focusMenu == 2)
+						{
+							clickableLabelText[0] = "Your Journey Begins...";
+							clickableLabelText[1] = "(The standard Terraria Experience)";
 						}
 						else if (this.focusMenu == 3)
 						{
-							array9[0] = "Fortune & Glory, Kid.";
-							array9[1] = "(Far Greater Difficulty & Loot)";
-						}
-						else
-						{
-							array9[0] = Lang.menu[32];
+							clickableLabelText[0] = "Fortune & Glory, Kid.";
+							clickableLabelText[1] = "(Far Greater Difficulty & Loot)";
+                        }
+                        else if (this.focusMenu == 4 && Main.setting.generateLeveledRPGSave)
+                        {
+                            clickableLabelText[0] = "Pain & Suffering.";
+                            clickableLabelText[1] = "(Expert, plus -50% Max HP, +30% Damage Taken, +25% Damage Dealt, +25% more EXP.)";
+                            clickableLabelScale[1] = 0.5f;
+                        }
+                        else
+						{
+							clickableLabelText[0] = Lang.menu[32];
 						}
 						array[0] = true;
 						array[1] = true;
-						array9[2] = "Normal";
-						array9[3] = "Expert";
-						array9[4] = "Back";
-						num4 = 5;
+						clickableLabelText[2] = "Normal";
+						clickableLabelText[3] = "Expert";
+                        if (Main.setting.generateLeveledRPGSave)
+                            clickableLabelText[4] = "Critical";
+                        clickableLabelText[5] = "Back";
+						numberClickableLabels = 6;
 						if (this.selectedMenu == 2)
 						{
 							Main.expertMode = false;
+                            Main.CriticalMode = false;
+                            Main.PlaySound(10, -1, -1, 1);
+							Main.menuMode = (int)MenuModes.EnterWorldName/*7*/;
+						}
+						else if (this.selectedMenu == 3)
+						{
+							Main.expertMode = true;
+                            Main.CriticalMode = false;
 							Main.PlaySound(10, -1, -1, 1);
-							Main.menuMode = 7;
-						}
-						else if (this.selectedMenu == 3)
-						{
-							Main.expertMode = true;
-							Main.PlaySound(10, -1, -1, 1);
-							Main.menuMode = 7;
-						}
-						else if (this.selectedMenu == 4)
+							Main.menuMode = (int)MenuModes.EnterWorldName /*7*/;
+                        }
+                        else if (this.selectedMenu == 4)
+                        {
+                            Main.expertMode = true;
+                            Main.CriticalMode = true;
+                            Main.PlaySound(10, -1, -1, 1);
+                            Main.menuMode = 7;
+                        }
+                        else if (this.selectedMenu == 5)
 						{
 							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 16;
+							Main.menuMode = (int)MenuModes.ChooseWorldSize /*0*/;
 						}
 						Main.clrInput();
 					}
-					else if (Main.menuMode == 7)
+					else if (Main.menuMode == (int)MenuModes.EnterWorldName /*7*/)
 					{
 						string a = Main.newWorldName;
 						Main.newWorldName = Main.GetInputText(Main.newWorldName);
@@ -37971,7 +39379,7 @@
 						{
 							Main.PlaySound(12, -1, -1, 1);
 						}
-						array9[0] = Lang.menu[48];
+						clickableLabelText[0] = Lang.menu[48];
 						array2[2] = true;
 						if (Main.newWorldName != "")
 						{
@@ -38000,76 +39408,81 @@
 							}
 							this.textBlinkerCount = 0;
 						}
-						array9[1] = Main.newWorldName;
+						clickableLabelText[1] = Main.newWorldName;
 						if (this.textBlinkerState == 1)
 						{
 							string[] array10;
-							(array10 = array9)[1] = array10[1] + "|";
+							(array10 = clickableLabelText)[1] = array10[1] + "|";
 							array5[1] = 1;
 						}
 						else
 						{
 							string[] array10;
-							(array10 = array9)[1] = array10[1] + " ";
+							(array10 = clickableLabelText)[1] = array10[1] + " ";
 						}
 						array[0] = true;
 						array[1] = true;
 						array4[1] = -20;
 						array4[2] = 20;
-						array9[2] = Lang.menu[4];
-						array9[3] = Lang.menu[5];
-						num4 = 4;
+						clickableLabelText[2] = Lang.menu[4];
+						clickableLabelText[3] = Lang.menu[5];
+						numberClickableLabels = 4;
 						if (this.selectedMenu == 3)
 						{
 							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = -7;
+							Main.menuMode = (int)MenuModes.SelectDifficulty /*- 7*/; // 0?? -7 is Expert mode selection
+																					 // World size -> difficulty -> name
 						}
 						if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
 						{
-							Main.menuMode = 10;
-							Main.worldName = Main.newWorldName;
-							Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.expertMode);
-							WorldGen.CreateNewWorld(null);
+							Main.menuMode = (int)MenuModes.Settings /*11*/; // 11?
+																			//   Main.worldName = Main.newWorldName;
+																			//    Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.expertMode);
+																			//   WorldGen.CreateNewWorld(null);
 						}
 					}
 					else if (Main.menuMode == 8)
 					{
+						SettingSaver settingSaver = new SettingSaver();
+						settingSaver.getSettings();
 						num = 180;
 						num3 = 40;
-						num4 = 8;
+						numberClickableLabels = 8;
 						array4[7] += 30;
-						for (int num16 = 0; num16 < num4; num16++)
-						{
-							array7[num16] = 0.8f;
-						}
-						array9[7] = Lang.menu[5];
+						for (int num16 = 0; num16 < numberClickableLabels; num16++)
+						{
+							clickableLabelScale[num16] = 0.8f;
+						}
+						clickableLabelText[7] = Lang.menu[5];
 						for (int num17 = 0; num17 < 7; num17++)
 						{
-							if (num17 < Main.WorldList.Count)
-							{
-								array9[num17] = Main.WorldList[num17 + Main.menuSkip].Name;
-								if (Main.WorldList[num17 + Main.menuSkip].IsExpertMode)
-								{
-									array6[num17] = 2;
-								}
+							//if (num17 < Main.WorldList.Count)
+							if (num17 < SettingSaver.numSettingsLoad)
+							{
+								clickableLabelText[num17] = SettingSaver.settings[num17 + Main.menuSkip]; //Main.WorldList[num17 + Main.menuSkip].Name;
+																							  //if (Main.WorldList[num17 + Main.menuSkip].IsExpertMode)
+																							  //{
+																							  //    array6[num17] = 2;
+																							  //}
 							}
 							else
 							{
-								array9[num17] = null;
-							}
-						}
-						if (Main.WorldList.Count > 7 + Main.menuSkip)
-						{
-							array9[6] = "more";
-							array9[6] = "▼";
-							array7[6] = 0.6f;
+								clickableLabelText[num17] = null;
+							}
+						}
+						if (SettingSaver.numSettingsLoad > 7 + Main.menuSkip)
+						//if (Main.WorldList.Count > 7 + Main.menuSkip)
+						{
+							clickableLabelText[6] = "more";
+							clickableLabelText[6] = "▼";
+							clickableLabelScale[6] = 0.6f;
 							array4[6] += 8;
 							this.menuWide[6] = true;
 						}
 						if (Main.menuSkip > 0)
 						{
-							array9[0] = "▲";
-							array7[0] = 0.6f;
+							clickableLabelText[0] = "▲";
+							clickableLabelScale[0] = 0.6f;
 							array4[0] += 8;
 							this.menuWide[0] = true;
 						}
@@ -38103,6 +39516,7 @@
 							Main.menuMode = 9;
 						}
 					}
+					/*
 					else if (Main.menuMode == 9)
 					{
 						array9[0] = Lang.menu[46] + " " + Main.WorldList[Main.selectedWorld].Name + "?";
@@ -38122,368 +39536,14 @@
 							Main.menuMode = 6;
 						}
 					}
-					else if (Main.menuMode == 1111)
-					{
-						num = 210;
-						num3 = 40;
-						for (int num18 = 0; num18 < 8; num18++)
-						{
-							array7[num18] = 0.8f;
-						}
-						array4[8] = 10;
-						num4 = 9;
-						if (Main.graphics.IsFullScreen)
-						{
-							array9[0] = Lang.menu[49];
-						}
-						else
-						{
-							array9[0] = Lang.menu[50];
-						}
-						Main.bgScroll = (int)Math.Round((double)((1f - Main.caveParallax) * 500f));
-						array9[1] = Lang.menu[51];
-						array9[2] = Lang.menu[52];
-						if (Main.terrariasFixedTiming)
-						{
-							array9[3] = Lang.menu[53];
-						}
-						else
-						{
-							array9[3] = Lang.menu[54];
-						}
-						if (Lighting.lightMode == 0)
-						{
-							array9[4] = Lang.menu[55];
-						}
-						else if (Lighting.lightMode == 1)
-						{
-							array9[4] = Lang.menu[56];
-						}
-						else if (Lighting.lightMode == 2)
-						{
-							array9[4] = Lang.menu[57];
-						}
-						else if (Lighting.lightMode == 3)
-						{
-							array9[4] = Lang.menu[58];
-						}
-						if (Lighting.LightingThreads == 0)
-						{
-							array9[5] = Lang.menu[116] + " " + Lang.menu[117];
-						}
-						else
-						{
-							array9[5] = Lang.menu[116] + " " + (Lighting.LightingThreads + 1);
-						}
-						if (Main.qaStyle == 0)
-						{
-							array9[6] = Lang.menu[59];
-						}
-						else if (Main.qaStyle == 1)
-						{
-							array9[6] = Lang.menu[60];
-						}
-						else if (Main.qaStyle == 2)
-						{
-							array9[6] = Lang.menu[61];
-						}
-						else
-						{
-							array9[6] = Lang.menu[62];
-						}
-						if (Main.owBack)
-						{
-							array9[7] = Lang.menu[100];
-						}
-						else
-						{
-							array9[7] = Lang.menu[101];
-						}
-						if (this.selectedMenu == 7)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							if (Main.owBack)
-							{
-								Main.owBack = false;
-							}
-							else
-							{
-								Main.owBack = true;
-							}
-						}
-						array9[8] = Lang.menu[5];
-						if (this.selectedMenu == 8)
-						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.SaveSettings();
-							Main.menuMode = 11;
-						}
-						if (this.selectedMenu == 6)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							Main.qaStyle++;
-							if (Main.qaStyle > 3)
-							{
-								Main.qaStyle = 0;
-							}
-						}
-						if (this.selectedMenu == 5)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							Lighting.LightingThreads++;
-							if (Lighting.LightingThreads > Environment.ProcessorCount - 1)
-							{
-								Lighting.LightingThreads = 0;
-							}
-						}
-						if (this.selectedMenu == 4)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							Lighting.lightMode++;
-							if (Lighting.lightMode >= 4)
-							{
-								Lighting.lightMode = 0;
-							}
-						}
-						if (this.selectedMenu == 3)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							if (Main.terrariasFixedTiming)
-							{
-								Main.terrariasFixedTiming = false;
-							}
-							else
-							{
-								Main.terrariasFixedTiming = true;
-							}
-						}
-						if (this.selectedMenu == 2)
-						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 28;
-						}
-						if (this.selectedMenu == 1)
-						{
-							Main.PlaySound(10, -1, -1, 1);
-							Main.menuMode = 111;
-						}
-						if (this.selectedMenu == 0)
-						{
-							Main.ToggleFullScreen();
-						}
-					}
-					else if (Main.menuMode == 11)
-					{
-						num = 240;
-						num3 = 37;
-						num4 = 8;
-						array4[num4 - 1] = 8;
-						for (int num19 = 0; num19 < num4; num19++)
-						{
-							array7[num19] = 0.73f;
-						}
-						int num20 = 0;
-						array9[num20] = Lang.menu[114];
-						if (this.selectedMenu == num20)
-						{
-							Main.PlaySound(10, -1, -1, 1);
-							Main.menuMode = 112;
-						}
-						num20++;
-						array9[num20] = Lang.menu[63];
-						if (this.selectedMenu == num20)
-						{
-							Main.PlaySound(10, -1, -1, 1);
-							Main.menuMode = 1111;
-						}
-						num20++;
-						array9[num20] = Lang.menu[64];
-						if (this.selectedMenu == num20)
-						{
-							Main.PlaySound(10, -1, -1, 1);
-							Main.selColor = Main.mouseColor;
-							Main.menuMode = 25;
-						}
-						num20++;
-						array9[num20] = Lang.menu[65];
-						if (this.selectedMenu == num20)
-						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 26;
-						}
-						num20++;
-						array9[num20] = Lang.menu[66];
-						if (this.selectedMenu == num20)
-						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 27;
-						}
-						num20++;
-						array9[num20] = Lang.menu[115];
-						if (this.selectedMenu == num20)
-						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 272727;
-						}
-						num20++;
-						array9[num20] = Lang.menu[103];
-						if (this.selectedMenu == num20)
-						{
-							Main.PlaySound(10, -1, -1, 1);
-							Main.menuMode = 1213;
-						}
-						num20++;
-						array9[num20] = Lang.menu[5];
-						if (this.selectedMenu == num20)
-						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 0;
-							Main.SaveSettings();
-						}
-					}
-					else if (Main.menuMode == 112)
-					{
-						num = 220;
-						num3 = 34;
-						num4 = 10;
-						array4[num4 - 1] = 18;
-						for (int num21 = 0; num21 < num4; num21++)
-						{
-							array7[num21] = 0.73f;
-						}
-						int num22 = 0;
-						if (Main.autoSave)
-						{
-							array9[num22] = Lang.menu[67];
-						}
-						else
-						{
-							array9[num22] = Lang.menu[68];
-						}
-						if (this.selectedMenu == num22)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							if (Main.autoSave)
-							{
-								Main.autoSave = false;
-							}
-							else
-							{
-								Main.autoSave = true;
-							}
-						}
-						num22++;
-						if (Main.autoPause)
-						{
-							array9[num22] = Lang.menu[69];
-						}
-						else
-						{
-							array9[num22] = Lang.menu[70];
-						}
-						if (this.selectedMenu == num22)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							if (Main.autoPause)
-							{
-								Main.autoPause = false;
-							}
-							else
-							{
-								Main.autoPause = true;
-							}
-						}
-						num22++;
-						if (Main.showItemText)
-						{
-							array9[num22] = Lang.menu[71];
-						}
-						else
-						{
-							array9[num22] = Lang.menu[72];
-						}
-						if (this.selectedMenu == num22)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							if (Main.showItemText)
-							{
-								Main.showItemText = false;
-							}
-							else
-							{
-								Main.showItemText = true;
-							}
-						}
-						num22++;
-						if (Main.mapEnabled)
-						{
-							array9[num22] = Lang.menu[112];
-						}
-						else
-						{
-							array9[num22] = Lang.menu[113];
-						}
-						if (this.selectedMenu == num22)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							if (Main.mapEnabled)
-							{
-								Main.mapEnabled = false;
-							}
-							else
-							{
-								Main.mapEnabled = true;
-							}
-						}
-						num22++;
-						array9[num22] = (Main.cSmartToggle ? Lang.menu[121] : Lang.menu[122]);
-						if (this.selectedMenu == num22)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							Main.cSmartToggle = !Main.cSmartToggle;
-						}
-						num22++;
-						array9[num22] = Lang.menu[123] + " " + Lang.menu[124 + Main.invasionProgressMode];
-						if (this.selectedMenu == num22)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							Main.invasionProgressMode++;
-							if (Main.invasionProgressMode >= 3)
-							{
-								Main.invasionProgressMode = 0;
-							}
-						}
-						num22++;
-						array9[num22] = (Main.placementPreview ? Lang.menu[128] : Lang.menu[129]);
-						if (this.selectedMenu == num22)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							Main.placementPreview = !Main.placementPreview;
-						}
-						num22++;
-						array9[num22] = (ChildSafety.Disabled ? Lang.menu[132] : Lang.menu[133]);
-						if (this.selectedMenu == num22)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							ChildSafety.Disabled = !ChildSafety.Disabled;
-						}
-						num22++;
-						array9[num22] = (ItemSlot.Options.HighlightNewItems ? Lang.inter[117] : Lang.inter[116]);
-						if (this.selectedMenu == num22)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							ItemSlot.Options.HighlightNewItems = !ItemSlot.Options.HighlightNewItems;
-						}
-						num22++;
-						array9[num22] = Lang.menu[5];
-						if (this.selectedMenu == num22)
-						{
-							Main.menuMode = 11;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-					}
+					*/
+					
+
+					
+					
 					else if (Main.menuMode == 111)
 					{
+						/*
 						num = 240;
 						num3 = 60;
 						num4 = 4;
@@ -38497,586 +39557,670 @@
 						array4[3] = 140;
 						if (this.selectedMenu == 1)
 						{
-							Main.PlaySound(12, -1, -1, 1);
-							int num23 = 0;
-							for (int num24 = 0; num24 < Main.numDisplayModes; num24++)
-							{
-								if (Main.displayWidth[num24] == Main.PendingResolutionWidth && Main.displayHeight[num24] == Main.PendingResolutionHeight)
-								{
-									num23 = num24;
-									break;
-								}
-							}
-							num23 = (num23 + 1) % Main.numDisplayModes;
-							Main.PendingResolutionWidth = Main.displayWidth[num23];
-							Main.PendingResolutionHeight = Main.displayHeight[num23];
+						    Main.PlaySound(12, -1, -1, 1);
+						    int num23 = 0;
+						    for (int num24 = 0; num24 < Main.numDisplayModes; num24++)
+						    {
+						        if (Main.displayWidth[num24] == Main.PendingResolutionWidth && Main.displayHeight[num24] == Main.PendingResolutionHeight)
+						        {
+						            num23 = num24;
+						            break;
+						        }
+						    }
+						    num23 = (num23 + 1) % Main.numDisplayModes;
+						    Main.PendingResolutionWidth = Main.displayWidth[num23];
+						    Main.PendingResolutionHeight = Main.displayHeight[num23];
 						}
 						if (this.selectedMenu == 2)
 						{
-							if (Main.graphics.IsFullScreen)
-							{
-								Main.SetResolution(Main.PendingResolutionWidth, Main.PendingResolutionHeight);
-							}
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 1111;
+						    if (Main.graphics.IsFullScreen)
+						    {
+						        Main.SetResolution(Main.PendingResolutionWidth, Main.PendingResolutionHeight);
+						    }
+						    Main.PlaySound(11, -1, -1, 1);
+						    Main.menuMode = 1111;
 						}
 						if (this.selectedMenu == 3)
 						{
-							Main.PendingResolutionWidth = Main.graphics.PreferredBackBufferWidth;
-							Main.PendingResolutionHeight = Main.graphics.PreferredBackBufferHeight;
-							Main.menuMode = 1111;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-					}
-					else if (Main.menuMode == 25)
-					{
-						flag = true;
-						num8 = 370;
-						num = 240;
-						num3 = 60;
-						Main.mouseColor = Main.selColor;
-						num4 = 3;
-						array9[0] = "";
-						array9[1] = Lang.menu[64];
-						array[1] = true;
-						array4[2] = 170;
-						array4[1] = 10;
-						array9[2] = Lang.menu[5];
-						if (this.selectedMenu == 2)
-						{
-							Main.menuMode = 11;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-					}
-					else if (Main.menuMode == 26)
-					{
-						flag2 = true;
-						num = 240;
-						num3 = 60;
-						num4 = 3;
-						array9[0] = "";
-						array9[1] = Lang.menu[65];
-						array[1] = true;
-						array4[2] = 170;
-						array4[1] = 10;
-						array9[2] = Lang.menu[5];
-						if (this.selectedMenu == 2)
-						{
-							Main.menuMode = 11;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-					}
-					else if (Main.menuMode == 28)
-					{
-						Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
-						flag3 = true;
-						num = 240;
-						num3 = 60;
-						num4 = 3;
-						array9[0] = "";
-						array9[1] = Lang.menu[52];
-						array[1] = true;
-						array4[2] = 170;
-						array4[1] = 10;
-						array9[2] = Lang.menu[5];
-						if (this.selectedMenu == 2)
-						{
-							Main.menuMode = 1111;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-					}
-					else if (Main.menuMode == 272727)
-					{
+						    Main.PendingResolutionWidth = Main.graphics.PreferredBackBufferWidth;
+						    Main.PendingResolutionHeight = Main.graphics.PreferredBackBufferHeight;
+						    Main.menuMode = 1111;
+						    Main.PlaySound(11, -1, -1, 1);
+						}
+						*/
 						num = 200;
 						num3 = 30;
-						num4 = 14;
-						string[] array11 = new string[12];
-						array11[0] = Main.cMapStyle;
-						array11[1] = Main.cMapFull;
-						array11[2] = Main.cMapZoomIn;
-						array11[3] = Main.cMapZoomOut;
-						array11[4] = Main.cMapAlphaUp;
-						array11[5] = Main.cMapAlphaDown;
-						if (Main.setKey >= 0)
-						{
-							array11[Main.setKey] = "_";
-						}
-						array9[0] = Lang.menu[106] + array11[0];
-						array9[1] = Lang.menu[107] + array11[1];
-						array9[2] = Lang.menu[108] + array11[2];
-						array9[3] = Lang.menu[109] + array11[3];
-						array9[4] = Lang.menu[110] + array11[4];
-						array9[5] = Lang.menu[111] + array11[5];
-						for (int num25 = 0; num25 < 6; num25++)
-						{
-							array8[num25] = true;
-							array7[num25] = 0.55f;
-							array5[num25] = -140;
-						}
-						array7[6] = 0.8f;
-						array7[6] = 0.8f;
-						array4[6] = 6;
-						array9[6] = Lang.menu[86];
-						array4[7] = 16;
-						array9[7] = Lang.menu[5];
-						if (this.selectedMenu == 7)
-						{
-							Main.menuMode = 11;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-						else if (this.selectedMenu == 6)
-						{
-							Main.cMapStyle = "Tab";
-							Main.cMapFull = "M";
-							Main.cMapZoomIn = "Add";
-							Main.cMapZoomOut = "Subtract";
-							Main.cMapAlphaUp = "PageUp";
-							Main.cMapAlphaDown = "PageDown";
-							Main.setKey = -1;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-						else if (this.selectedMenu >= 0)
-						{
-							Main.setKey = this.selectedMenu;
-						}
-						if (Main.setKey >= 0)
-						{
-							Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.keyState.GetPressedKeys();
-							if (pressedKeys.Length > 0)
-							{
-								string a2 = string.Concat(pressedKeys[0]);
-								if (a2 != "None")
-								{
-									if (Main.setKey == 0)
+						numberClickableLabels = 2;
+						for (int num29 = 0; num29 < numberClickableLabels; num29++)
+						{
+							clickableLabelScale[num29] = 0.73f;
+						}
+						clickableLabelText[0] = "Reset Biome Amount";
+						if (this.selectedMenu == 0)
+						{
+						//	WorldGen.initializeBiomeAmount();
+						}
+						clickableLabelScale[0] = 0.53f;
+						array4[0] = -17;
+						string text2 = "setting x1 will generate default amount of biomes";
+						int num30 = Main.screenWidth / 2 - 220;
+						int num31 = 240;
+						Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontDeathText, text2, (float)num30, (float)num31, Microsoft.Xna.Framework.Color.White, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 0.5f);
+						clickableLabelText[1] = Lang.menu[5];
+						if (this.selectedMenu == 1)
+						{
+							Main.menuMode = (int)MenuModes.Settings  /*11*/;
+						}
+						int num32 = num31 + 30;
+						string text3 = "";
+						for (int num33 = 0; num33 < 6; num33++)
+						{
+							int num345 = num32;
+							int num35 = 390 + Main.screenWidth / 2 - 400;
+							switch (num33)
+							{
+								case 0:
+									text3 = "Snow:";
+									break;
+								case 1:
+									text3 = "Jungle:";
+									num345 += 30;
+									break;
+								case 2:
+									text3 = "Gem Cave:";
+									num345 += 60;
+									break;
+								case 3:
+									text3 = "x" + Math.Round((double)(Main.setting.PercSnow * 500f));
+									num35 += 180;
+									break;
+								case 4:
+									text3 = "x" + Math.Round((double)(Main.setting.PercJungle * 500f));
+									num35 += 180;
+									num345 += 30;
+									break;
+								case 5:
+									text3 = "x" + Math.Round((double)Main.setting.MultiGemCave * 20.0);
+									num35 += 180;
+									num345 += 60;
+									break;
+							}
+							Microsoft.Xna.Framework.Color textColor = color;
+							textColor.R = (byte)((255 + textColor.R) / 2);
+							textColor.G = (byte)((255 + textColor.R) / 2);
+							textColor.B = (byte)((255 + textColor.R) / 2);
+							int num36 = 255;
+							int num37 = (int)textColor.R - (255 - num36);
+							if (num37 < 0)
+							{
+								num37 = 0;
+							}
+							textColor = new Microsoft.Xna.Framework.Color((int)((byte)num37), (int)((byte)num37), (int)((byte)num37), (int)((byte)num36));
+							Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontDeathText, text3, (float)num35, (float)num345, textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 0.5f);
+						}
+						IngameOptions.rightHover = -1;
+						if (!Main.mouseLeft)
+						{
+							IngameOptions.rightLock = -1;
+						}
+						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num32 - 18 + 30));
+						float percSnow = IngameOptions.DrawValueBar(Main.spriteBatch, 1.3f, Main.setting.PercSnow);
+						if (IngameOptions.inBar || IngameOptions.rightLock == 2)
+						{
+							IngameOptions.rightHover = 2;
+							if (Main.mouseLeft && IngameOptions.rightLock == 2)
+							{
+								Main.setting.PercSnow = percSnow;
+							}
+						}
+						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num32 - 18 + 60));
+						float percJungle = IngameOptions.DrawValueBar(Main.spriteBatch, 1.3f, Main.setting.PercJungle);
+						if (IngameOptions.inBar || IngameOptions.rightLock == 3)
+						{
+							IngameOptions.rightHover = 3;
+							if (Main.mouseLeft && IngameOptions.rightLock == 3)
+							{
+								Main.setting.PercJungle = percJungle;
+							}
+						}
+						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num32 - 18 + 90));
+						float multiGemCave = IngameOptions.DrawValueBar(Main.spriteBatch, 1.3f, Main.setting.MultiGemCave);
+						if (IngameOptions.inBar || IngameOptions.rightLock == 4)
+						{
+							IngameOptions.rightHover = 4;
+							if (Main.mouseLeft && IngameOptions.rightLock == 4)
+							{
+								Main.setting.MultiGemCave = multiGemCave;
+							}
+						}
+						if (IngameOptions.rightHover != -1)
+						{
+							IngameOptions.rightLock = IngameOptions.rightHover;
+						}
+						array4[1] = 300;
+					}
+					
+
+					
+				else if (Main.menuMode == 28)
+				{
+					Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
+					flag3 = true;
+					num = 240;
+					num3 = 60;
+					numberClickableLabels = 3;
+					clickableLabelText[0] = "";
+					clickableLabelText[1] = Lang.menu[52];
+					array[1] = true;
+					array4[2] = 170;
+					array4[1] = 10;
+					clickableLabelText[2] = Lang.menu[5];
+					if (this.selectedMenu == 2)
+					{
+						Main.menuMode = 1111;
+						/*
+								Main.PlaySound(11, -1, -1, 1);
+							}
+						}
+						else if (Main.menuMode == 272727)
+						{
+							num = 200;
+							num3 = 30;
+							num4 = 14;
+							string[] array11 = new string[12];
+							array11[0] = Main.cMapStyle;
+							array11[1] = Main.cMapFull;
+							array11[2] = Main.cMapZoomIn;
+							array11[3] = Main.cMapZoomOut;
+							array11[4] = Main.cMapAlphaUp;
+							array11[5] = Main.cMapAlphaDown;
+							if (Main.setKey >= 0)
+							{
+								array11[Main.setKey] = "_";
+							}
+							array9[0] = Lang.menu[106] + array11[0];
+							array9[1] = Lang.menu[107] + array11[1];
+							array9[2] = Lang.menu[108] + array11[2];
+							array9[3] = Lang.menu[109] + array11[3];
+							array9[4] = Lang.menu[110] + array11[4];
+							array9[5] = Lang.menu[111] + array11[5];
+							for (int num25 = 0; num25 < 6; num25++)
+							{
+								array8[num25] = true;
+								array7[num25] = 0.55f;
+								array5[num25] = -140;
+							}
+							array7[6] = 0.8f;
+							array7[6] = 0.8f;
+							array4[6] = 6;
+							array9[6] = Lang.menu[86];
+							array4[7] = 16;
+							array9[7] = Lang.menu[5];
+							if (this.selectedMenu == 7)
+							{
+								Main.menuMode = 11;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+							else if (this.selectedMenu == 6)
+							{
+								Main.cMapStyle = "Tab";
+								Main.cMapFull = "M";
+								Main.cMapZoomIn = "Add";
+								Main.cMapZoomOut = "Subtract";
+								Main.cMapAlphaUp = "PageUp";
+								Main.cMapAlphaDown = "PageDown";
+								Main.setKey = -1;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+							else if (this.selectedMenu >= 0)
+							{
+								Main.setKey = this.selectedMenu;
+							}
+							if (Main.setKey >= 0)
+							{
+								Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.keyState.GetPressedKeys();
+								if (pressedKeys.Length > 0)
+								{
+									string a2 = string.Concat(pressedKeys[0]);
+									if (a2 != "None")
 									{
-										Main.cMapStyle = a2;
+										if (Main.setKey == 0)
+										{
+											Main.cMapStyle = a2;
+										}
+										if (Main.setKey == 1)
+										{
+											Main.cMapFull = a2;
+										}
+										if (Main.setKey == 2)
+										{
+											Main.cMapZoomIn = a2;
+										}
+										if (Main.setKey == 3)
+										{
+											Main.cMapZoomOut = a2;
+										}
+										if (Main.setKey == 4)
+										{
+											Main.cMapAlphaUp = a2;
+										}
+										if (Main.setKey == 5)
+										{
+											Main.cMapAlphaDown = a2;
+										}
+										Main.setKey = -1;
 									}
-									if (Main.setKey == 1)
+								}
+							}
+						}
+						else if (Main.menuMode == 27)
+						{
+							num = 176;
+							num3 = 22;
+							num4 = 16;
+							string[] array12 = new string[]
+							{
+								Main.cUp,
+								Main.cDown,
+								Main.cLeft,
+								Main.cRight,
+								Main.cJump,
+								Main.cThrowItem,
+								Main.cInv,
+								Main.cHeal,
+								Main.cMana,
+								Main.cBuff,
+								Main.cHook,
+								Main.cTorch,
+								Main.cSmart,
+								Main.cMount
+							};
+							if (Main.setKey >= 0)
+							{
+								array12[Main.setKey] = "_";
+							}
+							array9[0] = Lang.menu[74] + array12[0];
+							array9[1] = Lang.menu[75] + array12[1];
+							array9[2] = Lang.menu[76] + array12[2];
+							array9[3] = Lang.menu[77] + array12[3];
+							array9[4] = Lang.menu[78] + array12[4];
+							array9[5] = Lang.menu[79] + array12[5];
+							array9[6] = Lang.menu[80] + array12[6];
+							array9[7] = Lang.menu[81] + array12[7];
+							array9[8] = Lang.menu[82] + array12[8];
+							array9[9] = Lang.menu[83] + array12[9];
+							array9[10] = Lang.menu[84] + array12[10];
+							array9[11] = Lang.menu[85] + array12[11];
+							array9[12] = Lang.menu[120] + array12[12];
+							array9[13] = Lang.menu[130] + array12[13];
+							for (int num26 = 0; num26 < 14; num26++)
+							{
+								array8[num26] = true;
+								array7[num26] = 0.45f;
+								array5[num26] = -80;
+							}
+							array7[14] = 0.8f;
+							array4[14] = 6;
+							array9[14] = Lang.menu[86];
+							array7[15] = 0.8f;
+							array4[15] = 16;
+							array9[15] = Lang.menu[5];
+							if (this.selectedMenu == 15)
+							{
+								Main.menuMode = 11;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+							else if (this.selectedMenu == 14)
+							{
+								Main.ResetKeyBindings();
+								Main.setKey = -1;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+							else if (this.selectedMenu >= 0)
+							{
+								Main.setKey = this.selectedMenu;
+							}
+							if (Main.setKey >= 0)
+							{
+								Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = Main.keyState.GetPressedKeys();
+								if (pressedKeys2.Length > 0)
+								{
+									string a3 = string.Concat(pressedKeys2[0]);
+									if (a3 != "None")
 									{
-										Main.cMapFull = a2;
+										if (Main.setKey == 0)
+										{
+											Main.cUp = a3;
+										}
+										if (Main.setKey == 1)
+										{
+											Main.cDown = a3;
+										}
+										if (Main.setKey == 2)
+										{
+											Main.cLeft = a3;
+										}
+										if (Main.setKey == 3)
+										{
+											Main.cRight = a3;
+										}
+										if (Main.setKey == 4)
+										{
+											Main.cJump = a3;
+										}
+										if (Main.setKey == 5)
+										{
+											Main.cThrowItem = a3;
+										}
+										if (Main.setKey == 6)
+										{
+											Main.cInv = a3;
+										}
+										if (Main.setKey == 7)
+										{
+											Main.cHeal = a3;
+										}
+										if (Main.setKey == 8)
+										{
+											Main.cMana = a3;
+										}
+										if (Main.setKey == 9)
+										{
+											Main.cBuff = a3;
+										}
+										if (Main.setKey == 10)
+										{
+											Main.cHook = a3;
+										}
+										if (Main.setKey == 11)
+										{
+											Main.cTorch = a3;
+										}
+										if (Main.setKey == 12)
+										{
+											Main.cSmart = a3;
+										}
+										if (Main.setKey == 13)
+										{
+											Main.cMount = a3;
+										}
+										Main.setKey = -1;
 									}
-									if (Main.setKey == 2)
-									{
-										Main.cMapZoomIn = a2;
-									}
-									if (Main.setKey == 3)
-									{
-										Main.cMapZoomOut = a2;
-									}
-									if (Main.setKey == 4)
-									{
-										Main.cMapAlphaUp = a2;
-									}
-									if (Main.setKey == 5)
-									{
-										Main.cMapAlphaDown = a2;
-									}
-									Main.setKey = -1;
-								}
-							}
-						}
-					}
-					else if (Main.menuMode == 27)
-					{
-						num = 176;
-						num3 = 22;
-						num4 = 16;
-						string[] array12 = new string[]
-						{
-							Main.cUp,
-							Main.cDown,
-							Main.cLeft,
-							Main.cRight,
-							Main.cJump,
-							Main.cThrowItem,
-							Main.cInv,
-							Main.cHeal,
-							Main.cMana,
-							Main.cBuff,
-							Main.cHook,
-							Main.cTorch,
-							Main.cSmart,
-							Main.cMount
-						};
-						if (Main.setKey >= 0)
-						{
-							array12[Main.setKey] = "_";
-						}
-						array9[0] = Lang.menu[74] + array12[0];
-						array9[1] = Lang.menu[75] + array12[1];
-						array9[2] = Lang.menu[76] + array12[2];
-						array9[3] = Lang.menu[77] + array12[3];
-						array9[4] = Lang.menu[78] + array12[4];
-						array9[5] = Lang.menu[79] + array12[5];
-						array9[6] = Lang.menu[80] + array12[6];
-						array9[7] = Lang.menu[81] + array12[7];
-						array9[8] = Lang.menu[82] + array12[8];
-						array9[9] = Lang.menu[83] + array12[9];
-						array9[10] = Lang.menu[84] + array12[10];
-						array9[11] = Lang.menu[85] + array12[11];
-						array9[12] = Lang.menu[120] + array12[12];
-						array9[13] = Lang.menu[130] + array12[13];
-						for (int num26 = 0; num26 < 14; num26++)
-						{
-							array8[num26] = true;
-							array7[num26] = 0.45f;
-							array5[num26] = -80;
-						}
-						array7[14] = 0.8f;
-						array4[14] = 6;
-						array9[14] = Lang.menu[86];
-						array7[15] = 0.8f;
-						array4[15] = 16;
-						array9[15] = Lang.menu[5];
-						if (this.selectedMenu == 15)
-						{
-							Main.menuMode = 11;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-						else if (this.selectedMenu == 14)
-						{
-							Main.ResetKeyBindings();
-							Main.setKey = -1;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-						else if (this.selectedMenu >= 0)
-						{
-							Main.setKey = this.selectedMenu;
-						}
-						if (Main.setKey >= 0)
-						{
-							Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = Main.keyState.GetPressedKeys();
-							if (pressedKeys2.Length > 0)
-							{
-								string a3 = string.Concat(pressedKeys2[0]);
-								if (a3 != "None")
-								{
-									if (Main.setKey == 0)
-									{
-										Main.cUp = a3;
-									}
-									if (Main.setKey == 1)
-									{
-										Main.cDown = a3;
-									}
-									if (Main.setKey == 2)
-									{
-										Main.cLeft = a3;
-									}
-									if (Main.setKey == 3)
-									{
-										Main.cRight = a3;
-									}
-									if (Main.setKey == 4)
-									{
-										Main.cJump = a3;
-									}
-									if (Main.setKey == 5)
-									{
-										Main.cThrowItem = a3;
-									}
-									if (Main.setKey == 6)
-									{
-										Main.cInv = a3;
-									}
-									if (Main.setKey == 7)
-									{
-										Main.cHeal = a3;
-									}
-									if (Main.setKey == 8)
-									{
-										Main.cMana = a3;
-									}
-									if (Main.setKey == 9)
-									{
-										Main.cBuff = a3;
-									}
-									if (Main.setKey == 10)
-									{
-										Main.cHook = a3;
-									}
-									if (Main.setKey == 11)
-									{
-										Main.cTorch = a3;
-									}
-									if (Main.setKey == 12)
-									{
-										Main.cSmart = a3;
-									}
-									if (Main.setKey == 13)
-									{
-										Main.cMount = a3;
-									}
-									Main.setKey = -1;
-								}
-							}
-						}
-					}
-					else if (Main.menuMode == 12)
-					{
-						int num27 = (SocialAPI.Network != null) ? 1 : 0;
-						Main.menuServer = false;
-						array9[0] = Lang.menu[(SocialAPI.Network != null) ? 146 : 87];
-						array9[1] = Lang.menu[145];
-						array9[1 + num27] = Lang.menu[88];
-						array9[2 + num27] = Lang.menu[5];
-						if (this.selectedMenu == 0)
-						{
-							Main.LoadPlayers();
-							Main.menuMultiplayer = true;
-							Main.PlaySound(10, -1, -1, 1);
-							Main.menuMode = 1;
-						}
-						else if (this.selectedMenu == 1 + num27)
-						{
-							Main.LoadPlayers();
-							Main.PlaySound(10, -1, -1, 1);
-							Main.menuMode = 1;
-							Main.menuMultiplayer = true;
-							Main.menuServer = true;
-						}
-						else if (this.selectedMenu == 1)
-						{
-							Main.PlaySound(10, -1, -1, 1);
-							SocialAPI.Friends.OpenJoinInterface();
-						}
-						else if (this.selectedMenu == 2 + num27)
-						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 0;
-						}
-						num4 = 3 + num27;
-					}
-					else if (Main.menuMode == 13)
-					{
-						string a4 = Main.getIP;
-						Main.getIP = Main.GetInputText(Main.getIP);
-						if (a4 != Main.getIP)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-						}
-						array9[0] = Lang.menu[89];
-						array2[9] = true;
-						if (Main.getIP != "")
-						{
-							if (Main.getIP.Substring(0, 1) == " ")
-							{
-								Main.getIP = "";
-							}
-							for (int num28 = 0; num28 < Main.getIP.Length; num28++)
-							{
-								if (Main.getIP != " ")
-								{
-									array2[9] = false;
-								}
-							}
-						}
-						this.textBlinkerCount++;
-						if (this.textBlinkerCount >= 20)
-						{
-							if (this.textBlinkerState == 0)
-							{
-								this.textBlinkerState = 1;
-							}
-							else
-							{
-								this.textBlinkerState = 0;
-							}
-							this.textBlinkerCount = 0;
-						}
-						array9[1] = Main.getIP;
-						if (this.textBlinkerState == 1)
-						{
-							string[] array10;
-							(array10 = array9)[1] = array10[1] + "|";
-							array5[1] = 1;
+								}
+						*/
+					}
+				}
+				else if (Main.menuMode == 12)
+				{
+					/*
+					int num27 = (SocialAPI.Network != null) ? 1 : 0;
+					Main.menuServer = false;
+					array9[0] = Lang.menu[(SocialAPI.Network != null) ? 146 : 87];
+					array9[1] = Lang.menu[145];
+					array9[1 + num27] = Lang.menu[88];
+					array9[2 + num27] = Lang.menu[5];
+					if (this.selectedMenu == 0)
+					{
+					    Main.LoadPlayers();
+					    Main.menuMultiplayer = true;
+					    Main.PlaySound(10, -1, -1, 1);
+					    Main.menuMode = 1;
+					}
+					else if (this.selectedMenu == 1 + num27)
+					{
+					    Main.LoadPlayers();
+					    Main.PlaySound(10, -1, -1, 1);
+					    Main.menuMode = 1;
+					    Main.menuMultiplayer = true;
+					    Main.menuServer = true;
+					}
+					else if (this.selectedMenu == 1)
+					{
+					    Main.PlaySound(10, -1, -1, 1);
+					    SocialAPI.Friends.OpenJoinInterface();
+					}
+					else if (this.selectedMenu == 2 + num27)
+					{
+					    Main.PlaySound(11, -1, -1, 1);
+					    Main.menuMode = 0;
+					}
+					num4 = 3 + num27;
+					*/
+				}
+				else if (Main.menuMode == 13)
+				{
+					string a4 = Main.getIP;
+					Main.getIP = Main.GetInputText(Main.getIP);
+					if (a4 != Main.getIP)
+					{
+						Main.PlaySound(12, -1, -1, 1);
+					}
+					clickableLabelText[0] = Lang.menu[89];
+					array2[9] = true;
+					if (Main.getIP != "")
+					{
+						if (Main.getIP.Substring(0, 1) == " ")
+						{
+							Main.getIP = "";
+						}
+						for (int num28 = 0; num28 < Main.getIP.Length; num28++)
+						{
+							if (Main.getIP != " ")
+							{
+								array2[9] = false;
+							}
+						}
+					}
+					this.textBlinkerCount++;
+					if (this.textBlinkerCount >= 20)
+					{
+						if (this.textBlinkerState == 0)
+						{
+							this.textBlinkerState = 1;
 						}
 						else
 						{
-							string[] array10;
-							(array10 = array9)[1] = array10[1] + " ";
-						}
-						array[0] = true;
-						array[1] = true;
-						array4[9] = 44;
-						array4[10] = 64;
-						array9[9] = Lang.menu[4];
-						array9[10] = Lang.menu[5];
-						num4 = 11;
-						num = 180;
-						num3 = 30;
-						array4[1] = 19;
-						for (int num29 = 2; num29 < 9; num29++)
-						{
-							int num30 = num29 - 2;
-							if (Main.recentWorld[num30] != null && Main.recentWorld[num30] != "")
-							{
-								array9[num29] = string.Concat(new object[]
-									{
-										Main.recentWorld[num30],
-										" (",
-										Main.recentIP[num30],
-										":",
-										Main.recentPort[num30],
-										")"
-									});
-							}
-							else
-							{
-								array9[num29] = "";
-								array[num29] = true;
-							}
-							array7[num29] = 0.6f;
-							array4[num29] = 40;
-						}
-						if (this.selectedMenu >= 2 && this.selectedMenu < 9)
-						{
-							Main.autoPass = false;
-							int num31 = this.selectedMenu - 2;
-							Netplay.ListenPort = Main.recentPort[num31];
-							Main.getIP = Main.recentIP[num31];
-							if (Netplay.SetRemoteIP(Main.getIP))
-							{
-								Main.menuMode = 10;
-								Netplay.StartTcpClient();
-							}
-						}
-						if (this.selectedMenu == 10)
-						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 1;
-						}
-						if (this.selectedMenu == 9 || (!array2[2] && Main.inputTextEnter))
-						{
-							Main.PlaySound(12, -1, -1, 1);
-							Main.menuMode = 131;
-							Main.clrInput();
-						}
-					}
-					else if (Main.menuMode == 131)
-					{
-						int num32 = 7777;
-						string a5 = Main.getPort;
-						Main.getPort = Main.GetInputText(Main.getPort);
-						if (a5 != Main.getPort)
-						{
-							Main.PlaySound(12, -1, -1, 1);
-						}
-						array9[0] = Lang.menu[90];
-						array2[2] = true;
-						if (Main.getPort != "")
-						{
-							bool flag6 = false;
-							try
-							{
-								num32 = Convert.ToInt32(Main.getPort);
-								if (num32 > 0 && num32 <= 65535)
-								{
-									flag6 = true;
-								}
-							}
-							catch
-							{
-							}
-							if (flag6)
-							{
-								array2[2] = false;
-							}
-						}
-						this.textBlinkerCount++;
-						if (this.textBlinkerCount >= 20)
-						{
-							if (this.textBlinkerState == 0)
-							{
-								this.textBlinkerState = 1;
-							}
-							else
-							{
-								this.textBlinkerState = 0;
-							}
-							this.textBlinkerCount = 0;
-						}
-						array9[1] = Main.getPort;
-						if (this.textBlinkerState == 1)
-						{
-							string[] array10;
-							(array10 = array9)[1] = array10[1] + "|";
-							array5[1] = 1;
+							this.textBlinkerState = 0;
+						}
+						this.textBlinkerCount = 0;
+					}
+					clickableLabelText[1] = Main.getIP;
+					if (this.textBlinkerState == 1)
+					{
+						string[] array10;
+						(array10 = clickableLabelText)[1] = array10[1] + "|";
+						array5[1] = 1;
+					}
+					else
+					{
+						string[] array10;
+						(array10 = clickableLabelText)[1] = array10[1] + " ";
+					}
+					array[0] = true;
+					array[1] = true;
+					array4[9] = 44;
+					array4[10] = 64;
+					clickableLabelText[9] = Lang.menu[4];
+					clickableLabelText[10] = Lang.menu[5];
+					numberClickableLabels = 11;
+					num = 180;
+					num3 = 30;
+					array4[1] = 19;
+					for (int num29 = 2; num29 < 9; num29++)
+					{
+						int num30 = num29 - 2;
+						if (Main.recentWorld[num30] != null && Main.recentWorld[num30] != "")
+						{
+							clickableLabelText[num29] = string.Concat(new object[]
+							{
+									Main.recentWorld[num30],
+									" (",
+									Main.recentIP[num30],
+									":",
+									Main.recentPort[num30],
+									")"
+							});
 						}
 						else
 						{
-							string[] array10;
-							(array10 = array9)[1] = array10[1] + " ";
-						}
-						array[0] = true;
-						array[1] = true;
-						array4[1] = -20;
-						array4[2] = 20;
-						array9[2] = Lang.menu[4];
-						array9[3] = Lang.menu[5];
-						num4 = 4;
-						if (this.selectedMenu == 3)
-						{
-							Main.PlaySound(11, -1, -1, 1);
-							Main.menuMode = 1;
-						}
-						if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
-						{
-							Netplay.ListenPort = num32;
-							Main.autoPass = false;
-							if (Netplay.SetRemoteIP(Main.getIP))
-							{
-								Main.menuMode = 10;
-								Netplay.StartTcpClient();
-							}
-						}
-					}
-					else if (Main.menuMode == 16)
-					{
-						num = 200;
-						num3 = 60;
-						array4[1] = 30;
-						array4[2] = 30;
-						array4[3] = 30;
-						array4[4] = 70;
-						array9[0] = Lang.menu[91];
-						array[0] = true;
-						array9[1] = Lang.menu[92];
-						array9[2] = Lang.menu[93];
-						array9[3] = Lang.menu[94];
-						array9[4] = Lang.menu[5];
-						num4 = 5;
-						if (this.selectedMenu == 4)
-						{
-							Main.menuMode = 6;
-							Main.PlaySound(11, -1, -1, 1);
-						}
-						else if (this.selectedMenu > 0)
-						{
-							if (this.selectedMenu == 1)
-							{
-								Main.maxTilesX = 4200;
-								Main.maxTilesY = 1200;
-							}
-							else if (this.selectedMenu == 2)
-							{
-								Main.maxTilesX = 6400;
-								Main.maxTilesY = 1800;
-							}
-							else
-							{
-								Main.maxTilesX = 8400;
-								Main.maxTilesY = 2400;
-							}
-							Main.clrInput();
-							Main.menuMode = -7;
-							Main.PlaySound(10, -1, -1, 1);
-							WorldGen.setWorldSize();
-						}
-					}
-				}
-			}
-			IL_4287:
+							clickableLabelText[num29] = "";
+							array[num29] = true;
+						}
+						clickableLabelScale[num29] = 0.6f;
+						array4[num29] = 40;
+					}
+					if (this.selectedMenu >= 2 && this.selectedMenu < 9)
+					{
+						Main.autoPass = false;
+						int num31 = this.selectedMenu - 2;
+						Netplay.ListenPort = Main.recentPort[num31];
+						Main.getIP = Main.recentIP[num31];
+						if (Netplay.SetRemoteIP(Main.getIP))
+						{
+							Main.menuMode = 10;
+							Netplay.StartTcpClient();
+						}
+					}
+					if (this.selectedMenu == 10)
+					{
+						Main.PlaySound(11, -1, -1, 1);
+						Main.menuMode = 1;
+					}
+					if (this.selectedMenu == 9 || (!array2[2] && Main.inputTextEnter))
+					{
+						Main.PlaySound(12, -1, -1, 1);
+						Main.menuMode = 131;
+						Main.clrInput();
+					}
+				}
+				else if (Main.menuMode == 131)
+				{
+					int num32 = 7777;
+					string a5 = Main.getPort;
+					Main.getPort = Main.GetInputText(Main.getPort);
+					if (a5 != Main.getPort)
+					{
+						Main.PlaySound(12, -1, -1, 1);
+					}
+					clickableLabelText[0] = Lang.menu[90];
+					array2[2] = true;
+					if (Main.getPort != "")
+					{
+						bool flag6 = false;
+						try
+						{
+							num32 = Convert.ToInt32(Main.getPort);
+							if (num32 > 0 && num32 <= 65535)
+							{
+								flag6 = true;
+							}
+						}
+						catch
+						{
+						}
+						if (flag6)
+						{
+							array2[2] = false;
+						}
+					}
+					this.textBlinkerCount++;
+					if (this.textBlinkerCount >= 20)
+					{
+						if (this.textBlinkerState == 0)
+						{
+							this.textBlinkerState = 1;
+						}
+						else
+						{
+							this.textBlinkerState = 0;
+						}
+						this.textBlinkerCount = 0;
+					}
+					clickableLabelText[1] = Main.getPort;
+					if (this.textBlinkerState == 1)
+					{
+						string[] array10;
+						(array10 = clickableLabelText)[1] = array10[1] + "|";
+						array5[1] = 1;
+					}
+					else
+					{
+						string[] array10;
+						(array10 = clickableLabelText)[1] = array10[1] + " ";
+					}
+					array[0] = true;
+					array[1] = true;
+					array4[1] = -20;
+					array4[2] = 20;
+					clickableLabelText[2] = Lang.menu[4];
+					clickableLabelText[3] = Lang.menu[5];
+					numberClickableLabels = 4;
+					if (this.selectedMenu == 3)
+					{
+						Main.PlaySound(11, -1, -1, 1);
+						Main.menuMode = 1;
+					}
+					if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
+					{
+						Netplay.ListenPort = num32;
+						Main.autoPass = false;
+						if (Netplay.SetRemoteIP(Main.getIP))
+						{
+							Main.menuMode = 10;
+							Netplay.StartTcpClient();
+						}
+					}
+				}
+				else if (Main.menuMode == 16)
+				{
+					num = 200;
+					num3 = 60;
+					array4[1] = 30;
+					array4[2] = 30;
+					array4[3] = 30;
+					array4[4] = 70;
+					clickableLabelText[0] = Lang.menu[91];
+					array[0] = true;
+					clickableLabelText[1] = Lang.menu[92];
+					clickableLabelText[2] = Lang.menu[93];
+					clickableLabelText[3] = Lang.menu[94];
+					clickableLabelText[4] = Lang.menu[5];
+					numberClickableLabels = 5;
+					if (this.selectedMenu == 4)
+					{
+						Main.menuMode = 6;
+						Main.PlaySound(11, -1, -1, 1);
+					}
+					else if (this.selectedMenu > 0)
+					{
+						if (this.selectedMenu == 1)
+						{
+								Main.maxTilesX = 8400;// 4200;
+                            Main.maxTilesY = 1200;
+						}
+						else if (this.selectedMenu == 2)
+						{
+							Main.maxTilesX = 6400;
+							Main.maxTilesY = 1800;
+						}
+						else
+						{
+							Main.maxTilesX = 8400;
+							Main.maxTilesY = 2400;
+						}
+						Main.clrInput();
+						Main.menuMode = -7;
+						Main.PlaySound(10, -1, -1, 1);
+						WorldGen.setWorldSize();
+					}
+				}
+					else
+					{
+						TerraCustom.Interface.TerraCustomMenu(this, this.selectedMenu, array, clickableLabelText, clickableLabelScale, array4, ref num, ref num3, ref numberClickableLabels);
+					}
+				}
+			}
+		IL_4287:
 			if (Main.menuMode == 888)
 			{
 				Main.MenuUI.Draw(Main.spriteBatch, gameTime);
@@ -39085,7 +40229,7 @@
 			{
 				Main.blockMouse = true;
 				Main.menuSkip = 0;
-				num4 = 0;
+				numberClickableLabels = 0;
 				for (int num33 = 0; num33 < Main.maxMenuItems; num33++)
 				{
 					this.menuItemScale[num33] = 0.8f;
@@ -39099,9 +40243,9 @@
 			this.selectedMenu = -1;
 			this.selectedMenu2 = -1;
 			this.focusMenu = -1;
-			for (int num35 = 0; num35 < num4; num35++)
-			{
-				if (array9[num35] != null)
+			for (int num35 = 0; num35 < numberClickableLabels; num35++)
+			{
+				if (clickableLabelText[num35] != null)
 				{
 					if (!flag)
 					{
@@ -39651,7 +40795,7 @@
 						{
 							num89 = 2;
 						}
-						Vector2 origin = Main.fontDeathText.MeasureString(array9[num35]);
+						Vector2 origin = Main.fontDeathText.MeasureString(clickableLabelText[num35]);
 						origin.X *= 0.5f;
 						origin.Y *= 0.5f;
 						float num90 = this.menuItemScale[num35];
@@ -39663,14 +40807,14 @@
 						{
 							num90 *= 0.5f;
 						}
-						num90 *= array7[num35];
+						num90 *= clickableLabelScale[num35];
 						if (!array8[num35])
 						{
-							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num35], new Vector2((float)(num2 + num88 + array5[num35]), (float)(num + num3 * num35 + num89) + origin.Y * array7[num35] + (float)array4[num35]), color9, 0f, origin, num90, SpriteEffects.None, 0f);
+							Main.spriteBatch.DrawString(Main.fontDeathText, clickableLabelText[num35], new Vector2((float)(screenHorizontalCenter + num88 + array5[num35]), (float)(num + num3 * num35 + num89) + origin.Y * clickableLabelScale[num35] + (float)array4[num35]), color9, 0f, origin, num90, SpriteEffects.None, 0f);
 						}
 						else
 						{
-							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num35], new Vector2((float)(num2 + num88 + array5[num35]), (float)(num + num3 * num35 + num89) + origin.Y * array7[num35] + (float)array4[num35]), color9, 0f, new Vector2(0f, origin.Y), num90, SpriteEffects.None, 0f);
+							Main.spriteBatch.DrawString(Main.fontDeathText, clickableLabelText[num35], new Vector2((float)(screenHorizontalCenter + num88 + array5[num35]), (float)(num + num3 * num35 + num89) + origin.Y * clickableLabelScale[num35] + (float)array4[num35]), color9, 0f, new Vector2(0f, origin.Y), num90, SpriteEffects.None, 0f);
 						}
 					}
 					if (!array8[num35])
@@ -39681,7 +40825,7 @@
 							num91 = 14;
 						}
 						this.menuWide[num35] = false;
-						if ((float)Main.mouseX > (float)num2 - (float)(array9[num35].Length * 10) * array7[num35] + (float)array5[num35] - (float)num91 && (float)Main.mouseX < (float)num2 + (float)(array9[num35].Length * 10) * array7[num35] + (float)array5[num35] + (float)num91 && Main.mouseY > num + num3 * num35 + array4[num35] && (float)Main.mouseY < (float)(num + num3 * num35 + array4[num35]) + 50f * array7[num35] && Main.hasFocus)
+						if ((float)Main.mouseX > (float)screenHorizontalCenter - (float)(clickableLabelText[num35].Length * 10) * clickableLabelScale[num35] + (float)array5[num35] - (float)num91 && (float)Main.mouseX < (float)screenHorizontalCenter + (float)(clickableLabelText[num35].Length * 10) * clickableLabelScale[num35] + (float)array5[num35] + (float)num91 && Main.mouseY > num + num3 * num35 + array4[num35] && (float)Main.mouseY < (float)(num + num3 * num35 + array4[num35]) + 50f * clickableLabelScale[num35] && Main.hasFocus)
 						{
 							this.focusMenu = num35;
 							if (array[num35] || array2[num35])
@@ -39705,7 +40849,7 @@
 							}
 						}
 					}
-					else if (Main.mouseX > num2 + array5[num35] && (float)Main.mouseX < (float)num2 + (float)(array9[num35].Length * 20) * array7[num35] + (float)array5[num35] && Main.mouseY > num + num3 * num35 + array4[num35] && (float)Main.mouseY < (float)(num + num3 * num35 + array4[num35]) + 50f * array7[num35] && Main.hasFocus)
+					else if (Main.mouseX > screenHorizontalCenter + array5[num35] && (float)Main.mouseX < (float)screenHorizontalCenter + (float)(clickableLabelText[num35].Length * 20) * clickableLabelScale[num35] + (float)array5[num35] && Main.mouseY > num + num3 * num35 + array4[num35] && (float)Main.mouseY < (float)(num + num3 * num35 + array4[num35]) + 50f * clickableLabelScale[num35] && Main.hasFocus)
 					{
 						this.focusMenu = num35;
 						if (array[num35] || array2[num35])
@@ -39857,6 +41001,3187 @@
 			}
 			Main.mouseRightRelease = true;
 		}
+
+		
+
+
+		/*
+				protected void DrawMenu(GameTime gameTime)
+				{
+					if (!Main.IsEngineLoaded)
+					{
+						Main.IsEngineLoaded = true;
+						if (Main.OnEngineLoad != null)
+						{
+							Main.OnEngineLoad();
+						}
+					}
+					if (Main.menuMode <= 1 && Main.slimeRain)
+					{
+						Main.StopSlimeRain(true);
+					}
+					Main.render = false;
+					Star.UpdateStars();
+					Cloud.UpdateClouds();
+					Main.holyTiles = 0;
+					Main.evilTiles = 0;
+					Main.shroomTiles = 0;
+					Main.bloodTiles = 0;
+					Main.bloodTiles = 0;
+					Main.jungleTiles = 0;
+					Main.chatMode = false;
+					for (int i = 0; i < Main.numChatLines; i++)
+					{
+						Main.chatLine[i] = new ChatLine();
+					}
+					this.DrawFPS();
+					Main.screenLastPosition = Main.screenPosition;
+					Main.screenPosition.Y = (float)(Main.worldSurface * 16.0 - (double)Main.screenHeight);
+					if (Main.grabSky)
+					{
+						Main.screenPosition.X = Main.screenPosition.X + (float)(Main.mouseX - Main.screenWidth / 2) * 0.02f;
+					}
+					else
+					{
+						Main.screenPosition.X = Main.screenPosition.X + 2f;
+					}
+					if (Main.screenPosition.X > 2.14748352E+09f)
+					{
+						Main.screenPosition.X = 0f;
+					}
+					if (Main.screenPosition.X < -2.14748352E+09f)
+					{
+						Main.screenPosition.X = 0f;
+					}
+					Main.background = 0;
+					byte b = (byte)((255 + Main.tileColor.R * 2) / 3);
+					Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 255);
+					this.logoRotation += this.logoRotationSpeed * 3E-05f;
+					if ((double)this.logoRotation > 0.1)
+					{
+						this.logoRotationDirection = -1f;
+					}
+					else if ((double)this.logoRotation < -0.1)
+					{
+						this.logoRotationDirection = 1f;
+					}
+					if (this.logoRotationSpeed < 20f & this.logoRotationDirection == 1f)
+					{
+						this.logoRotationSpeed += 1f;
+					}
+					else if (this.logoRotationSpeed > -20f & this.logoRotationDirection == -1f)
+					{
+						this.logoRotationSpeed -= 1f;
+					}
+					this.logoScale += this.logoScaleSpeed * 1E-05f;
+					if ((double)this.logoScale > 1.1)
+					{
+						this.logoScaleDirection = -1f;
+					}
+					else if ((double)this.logoScale < 0.9)
+					{
+						this.logoScaleDirection = 1f;
+					}
+					if (this.logoScaleSpeed < 50f & this.logoScaleDirection == 1f)
+					{
+						this.logoScaleSpeed += 1f;
+					}
+					else if (this.logoScaleSpeed > -50f & this.logoScaleDirection == -1f)
+					{
+						this.logoScaleSpeed -= 1f;
+					}
+					Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoA / 255f))));
+					Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoB / 255f))));
+					Main.spriteBatch.Draw(Main.logoTexture, new Vector2((float)(Main.screenWidth / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.logoTexture.Width, Main.logoTexture.Height)), color2, this.logoRotation, new Vector2((float)(Main.logoTexture.Width / 2), (float)(Main.logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
+					Main.spriteBatch.Draw(Main.logo2Texture, new Vector2((float)(Main.screenWidth / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.logoTexture.Width, Main.logoTexture.Height)), color3, this.logoRotation, new Vector2((float)(Main.logoTexture.Width / 2), (float)(Main.logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
+					if (Main.dayTime)
+					{
+						Main.LogoA += 2;
+						if (Main.LogoA > 255)
+						{
+							Main.LogoA = 255;
+						}
+						Main.LogoB--;
+						if (Main.LogoB < 0)
+						{
+							Main.LogoB = 0;
+						}
+					}
+					else
+					{
+						Main.LogoB += 2;
+						if (Main.LogoB > 255)
+						{
+							Main.LogoB = 255;
+						}
+						Main.LogoA--;
+						if (Main.LogoA < 0)
+						{
+							Main.LogoA = 0;
+							Main.LogoT = true;
+						}
+					}
+					int num = 250;
+					int num2 = Main.screenWidth / 2;
+					int num3 = 80;
+					int num4 = 0;
+					int num5 = Main.menuMode;
+					int num6 = 0;
+					int num7 = 0;
+					bool flag = false;
+					bool flag2 = false;
+					bool flag3 = false;
+					int num8 = 0;
+					bool[] array = new bool[Main.maxMenuItems];
+					bool[] array2 = new bool[Main.maxMenuItems];
+					bool[] array3 = new bool[Main.maxMenuItems];
+					int[] array4 = new int[Main.maxMenuItems];
+					int[] array5 = new int[Main.maxMenuItems];
+					byte[] array6 = new byte[Main.maxMenuItems];
+					float[] array7 = new float[Main.maxMenuItems];
+					bool[] array8 = new bool[Main.maxMenuItems];
+					bool flag4 = false;
+					for (int j = 0; j < Main.maxMenuItems; j++)
+					{
+						array[j] = false;
+						array2[j] = false;
+						array4[j] = 0;
+						array5[j] = 0;
+						array7[j] = 1f;
+					}
+					string[] array9 = new string[Main.maxMenuItems];
+					if (Main.menuMode == -1)
+					{
+						Main.menuMode = 0;
+					}
+					if (Main.menuMode == 1212)
+					{
+		                Main.menuMode = 0;
+		            }
+					else if (Main.menuMode == 1213)
+					{
+		                Main.menuMode = 11;
+		            }
+					else if (Main.netMode == 2)
+					{
+						bool flag5 = true;
+						for (int k = 0; k < 8; k++)
+						{
+							if (k < 255)
+							{
+								try
+								{
+									array9[k] = Netplay.Clients[k].StatusText;
+									if (Netplay.Clients[k].IsActive && Main.showSpam)
+									{
+										string[] array10;
+										string[] expr_86B = array10 = array9;
+										IntPtr intPtr;
+										int expr_870 = (int)(intPtr = (IntPtr)k);
+										object obj = array10[(int)intPtr];
+										expr_86B[expr_870] = string.Concat(new object[]
+										{
+											obj,
+											" (",
+											NetMessage.buffer[k].spamCount,
+											")"
+										});
+									}
+								}
+								catch
+								{
+									array9[k] = "";
+								}
+								array[k] = true;
+								if (array9[k] != "" && array9[k] != null)
+								{
+									flag5 = false;
+								}
+							}
+						}
+						if (flag5)
+						{
+							array9[0] = Lang.menu[0];
+							array9[1] = Lang.menu[1] + Netplay.ListenPort + ".";
+						}
+						num4 = 11;
+						array9[9] = Main.statusText;
+						array[9] = true;
+						num = 170;
+						num3 = 30;
+						array4[10] = 20;
+						array4[10] = 40;
+						array9[10] = Lang.menu[2];
+						if (this.selectedMenu == 10)
+						{
+							Netplay.disconnect = true;
+							Main.PlaySound(11, -1, -1, 1);
+						}
+					}
+					else if (Main.menuMode == 31)
+					{
+						string serverPassword = Netplay.ServerPassword;
+						Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword);
+						if (serverPassword != Netplay.ServerPassword)
+						{
+							Main.PlaySound(12, -1, -1, 1);
+						}
+						array9[0] = Lang.menu[3];
+						this.textBlinkerCount++;
+						if (this.textBlinkerCount >= 20)
+						{
+							if (this.textBlinkerState == 0)
+							{
+								this.textBlinkerState = 1;
+							}
+							else
+							{
+								this.textBlinkerState = 0;
+							}
+							this.textBlinkerCount = 0;
+						}
+						array9[1] = Netplay.ServerPassword;
+						if (Main.HidePassword)
+						{
+							array9[1] = "";
+							for (int l = 0; l < Netplay.ServerPassword.Length; l++)
+							{
+								string[] array10;
+								(array10 = array9)[1] = array10[1] + "*";
+							}
+						}
+						if (this.textBlinkerState == 1)
+						{
+							string[] array10;
+							(array10 = array9)[1] = array10[1] + "|";
+							array5[1] = 1;
+						}
+						else
+						{
+							string[] array10;
+							(array10 = array9)[1] = array10[1] + " ";
+						}
+						array[0] = true;
+						array[1] = true;
+						array4[1] = -20;
+						array4[2] = 20;
+						array9[2] = Lang.menu[4];
+						array9[3] = Lang.menu[5];
+						num4 = 4;
+						if (this.selectedMenu == 3)
+						{
+							Main.PlaySound(11, -1, -1, 1);
+							Main.menuMode = 0;
+							Netplay.disconnect = true;
+							Netplay.ServerPassword = "";
+						}
+						else if (this.selectedMenu == 2 || Main.inputTextEnter)
+						{
+							NetMessage.SendData(38, -1, -1, Netplay.ServerPassword, 0, 0f, 0f, 0f, 0, 0, 0);
+							Main.menuMode = 14;
+						}
+					}
+					else
+					{
+						if (Main.netMode == 1 || Main.menuMode == 14)
+						{
+							num4 = 2;
+							array9[0] = Main.statusText;
+							array[0] = true;
+							num = 300;
+							array9[1] = Lang.menu[6];
+							if (this.selectedMenu != 1)
+							{
+								goto IL_4287;
+							}
+							Netplay.disconnect = true;
+							Netplay.Connection.Socket.Close();
+							Main.PlaySound(11, -1, -1, 1);
+							Main.menuMode = 0;
+							Main.netMode = 0;
+							try
+							{
+								this.tServer.Kill();
+								goto IL_4287;
+							}
+							catch
+							{
+								goto IL_4287;
+							}
+						}
+						if (Main.menuMode == 882)
+						{
+							num4 = 2;
+							array[0] = true;
+							num = 300;
+							array9[0] = Main.statusText;
+							array9[1] = Lang.menu[6];
+							if (this.selectedMenu == 1)
+							{
+								Main.PlaySound(11, -1, -1, 1);
+								Main.menuMode = 0;
+								Main.netMode = 0;
+								if (SocialAPI.Network != null)
+								{
+									SocialAPI.Network.CancelJoin();
+								}
+							}
+						}
+						else if (Main.menuMode == 30)
+						{
+							string serverPassword2 = Netplay.ServerPassword;
+							Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword);
+							if (serverPassword2 != Netplay.ServerPassword)
+							{
+								Main.PlaySound(12, -1, -1, 1);
+							}
+							array9[0] = Lang.menu[7];
+							this.textBlinkerCount++;
+							if (this.textBlinkerCount >= 20)
+							{
+								if (this.textBlinkerState == 0)
+								{
+									this.textBlinkerState = 1;
+								}
+								else
+								{
+									this.textBlinkerState = 0;
+								}
+								this.textBlinkerCount = 0;
+							}
+							array9[1] = Netplay.ServerPassword;
+							if (Main.HidePassword)
+							{
+								array9[1] = "";
+								for (int m = 0; m < Netplay.ServerPassword.Length; m++)
+								{
+									string[] array10;
+									(array10 = array9)[1] = array10[1] + "*";
+								}
+							}
+							if (this.textBlinkerState == 1)
+							{
+								string[] array10;
+								(array10 = array9)[1] = array10[1] + "|";
+								array5[1] = 1;
+							}
+							else
+							{
+								string[] array10;
+								(array10 = array9)[1] = array10[1] + " ";
+							}
+							array[0] = true;
+							array[1] = true;
+							array4[1] = -20;
+							array4[2] = 20;
+							array9[2] = Lang.menu[4];
+							array9[3] = Lang.menu[5];
+							num4 = 4;
+							if (this.selectedMenu == 3)
+							{
+								if (SocialAPI.Network != null)
+								{
+									Main.menuMode = 889;
+								}
+								else
+								{
+									Main.menuMode = 6;
+								}
+								Netplay.ServerPassword = "";
+							}
+							else if (this.selectedMenu == 2 || Main.inputTextEnter || Main.autoPass)
+							{
+								string text = string.Concat(new object[]
+								{
+									"-autoshutdown -password \"",
+									Netplay.ServerPassword,
+									"\" -lang ",
+									Lang.lang
+								});
+		#if LINUX
+						        if (IntPtr.Size == 8)
+						        {
+							        text += " -x64";
+						        }
+						        else
+						        {
+							        text += " -x86";
+						        }
+		#endif
+								if (Main.ActiveWorldFileData.IsCloudSave)
+								{
+									text = text + " -cloudworld \"" + Main.worldPathName + "\"";
+								}
+								else
+								{
+									text = text + " -world \"" + Main.worldPathName + "\"";
+								}
+								this.tServer.StartInfo.FileName = "TerrariaServer.exe";
+								this.tServer.StartInfo.Arguments = text;
+								if (Main.libPath != "")
+								{
+									ProcessStartInfo expr_E36 = this.tServer.StartInfo;
+									expr_E36.Arguments = expr_E36.Arguments + " -loadlib " + Main.libPath;
+								}
+								this.tServer.StartInfo.UseShellExecute = false;
+								this.tServer.StartInfo.CreateNoWindow = true;
+								if (SocialAPI.Network != null)
+								{
+									SocialAPI.Network.LaunchLocalServer(this.tServer, Main.MenuServerMode);
+								}
+								else
+								{
+									this.tServer.Start();
+								}
+								Netplay.SetRemoteIP("127.0.0.1");
+								Main.autoPass = true;
+								Main.statusText = Lang.menu[8];
+								Netplay.StartTcpClient();
+								Main.menuMode = 10;
+							}
+						}
+						else if (Main.menuMode == 889)
+						{
+							num = 200;
+							num3 = 60;
+							array4[1] = 30;
+							array4[2] = 30;
+							array4[3] = 30;
+							array4[4] = 70;
+							array4[5] = 70;
+							num4 = 6;
+							array9[0] = Lang.menu[135];
+							array9[4] = Lang.menu[144];
+							array9[5] = Lang.menu[5];
+							array[0] = true;
+							if (!Main.MenuServerMode.HasFlag(ServerMode.Lobby))
+							{
+								Main.MenuServerMode = ServerMode.None;
+								array[2] = true;
+								array[3] = true;
+								array9[1] = Lang.menu[136];
+								array9[2] = "";
+								array9[3] = "";
+							}
+							else
+							{
+								array9[1] = Lang.menu[137];
+								if (Main.MenuServerMode.HasFlag(ServerMode.FriendsCanJoin))
+								{
+									array9[2] = Lang.menu[139];
+									if (Main.MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
+									{
+										array9[3] = Lang.menu[143];
+									}
+									else
+									{
+										array9[3] = Lang.menu[142];
+									}
+								}
+								else
+								{
+									array9[2] = Lang.menu[138];
+									if (Main.MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
+									{
+										array9[3] = Lang.menu[141];
+									}
+									else
+									{
+										array9[3] = Lang.menu[140];
+									}
+								}
+							}
+							switch (this.selectedMenu)
+							{
+							case 1:
+								Main.MenuServerMode ^= ServerMode.Lobby;
+								Main.PlaySound(12, -1, -1, 1);
+								break;
+							case 2:
+								Main.MenuServerMode ^= ServerMode.FriendsCanJoin;
+								Main.PlaySound(12, -1, -1, 1);
+								break;
+							case 3:
+								Main.MenuServerMode ^= ServerMode.FriendsOfFriends;
+								Main.PlaySound(12, -1, -1, 1);
+								break;
+							case 4:
+								Main.clrInput();
+								Netplay.ServerPassword = "";
+								Main.GetInputText("");
+								Main.autoPass = false;
+								Main.menuMode = 30;
+								Main.PlaySound(10, -1, -1, 1);
+								break;
+							case 5:
+								Main.menuMode = 6;
+								Main.PlaySound(11, -1, -1, 1);
+								break;
+							}
+						}
+						else if (Main.menuMode == 15)
+						{
+							num4 = 2;
+							array9[0] = Main.statusText;
+							array[0] = true;
+							num = 80;
+							num3 = 400;
+							array9[1] = Lang.menu[5];
+							if (this.selectedMenu == 1)
+							{
+								Netplay.disconnect = true;
+								Main.PlaySound(11, -1, -1, 1);
+								Main.menuMode = 0;
+								Main.netMode = 0;
+							}
+						}
+						else if (Main.menuMode == 200)
+						{
+							num4 = 3;
+							array9[0] = Lang.menu[9];
+							array[0] = true;
+							num -= 30;
+							array4[1] = 70;
+							array4[2] = 50;
+							array9[1] = Lang.menu[10];
+							array9[2] = Lang.menu[6];
+							if (this.selectedMenu == 1)
+							{
+								if (FileUtilities.Exists(Main.worldPathName + ".bak", Main.ActiveWorldFileData.IsCloudSave))
+								{
+									FileUtilities.Move(Main.worldPathName + ".bak", Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave, true);
+									Main.PlaySound(10, -1, -1, 1);
+									WorldGen.playWorld();
+									Main.menuMode = 10;
+								}
+								else
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 0;
+									Main.netMode = 0;
+								}
+							}
+							if (this.selectedMenu == 2)
+							{
+								Main.PlaySound(11, -1, -1, 1);
+								Main.menuMode = 0;
+								Main.netMode = 0;
+							}
+						}
+						else if (Main.menuMode == 201)
+						{
+							num4 = 3;
+							array9[0] = Lang.menu[9];
+							array[0] = true;
+							array[1] = true;
+							num -= 30;
+							array4[1] = -30;
+							array4[2] = 50;
+							array9[1] = Lang.menu[11];
+							array9[2] = Lang.menu[5];
+							if (this.selectedMenu == 2)
+							{
+								Main.PlaySound(11, -1, -1, 1);
+								Main.menuMode = 0;
+								Main.netMode = 0;
+							}
+						}
+						else if (Main.menuMode == 10)
+						{
+							num4 = 1;
+							array9[0] = Main.statusText;
+							array[0] = true;
+							num = 300;
+						}
+						else if (Main.menuMode == 100)
+						{
+							num4 = 1;
+							array9[0] = Main.statusText;
+							array[0] = true;
+							num = 300;
+						}
+						else if (Main.menuMode == 0)
+						{
+							Main.eclipse = false;
+							Main.pumpkinMoon = false;
+							Main.snowMoon = false;
+							Main.ServerSideCharacter = false;
+							Main.menuMultiplayer = false;
+							Main.menuServer = false;
+							Main.netMode = 0;
+							for (int n = 0; n < 9; n++)
+							{
+								string text2 = "";
+								switch (n)
+								{
+								case 0:
+									text2 = "Solar";
+									break;
+								case 1:
+									text2 = "Vortex";
+									break;
+								case 2:
+									text2 = "Nebula";
+									break;
+								case 3:
+									text2 = "Stardust";
+									break;
+								case 4:
+									text2 = "MoonLord";
+									break;
+								case 5:
+									text2 = "MonolithSolar";
+									break;
+								case 6:
+									text2 = "MonolithVortex";
+									break;
+								case 7:
+									text2 = "MonolithNebula";
+									break;
+								case 8:
+									text2 = "MonolithStardust";
+									break;
+								}
+								if (SkyManager.Instance[text2].IsActive())
+								{
+									SkyManager.Instance.Deactivate(text2, new object[0]);
+								}
+								if (Filters.Scene[text2].IsActive())
+								{
+									Filters.Scene[text2].Deactivate(new object[0]);
+								}
+							}
+							if (Filters.Scene["BloodMoon"].IsActive())
+							{
+								Filters.Scene["BloodMoon"].Deactivate(new object[0]);
+							}
+							if (SkyManager.Instance["Martian"].IsActive())
+							{
+								SkyManager.Instance["Martian"].Deactivate(new object[0]);
+							}
+							if (SkyManager.Instance["Slime"].IsActive())
+							{
+								SkyManager.Instance["Slime"].Deactivate(new object[0]);
+							}
+							int num9 = 0;
+							num4 = 5;
+							num3 = 60;
+							array9[num9] = Lang.menu[12];
+							if (this.selectedMenu == num9)
+							{
+								Main.PlaySound(10, -1, -1, 1);
+								Main.menuMode = 1;
+							}
+							num9++;
+							array9[num9] = Lang.menu[13];
+							if (this.selectedMenu == num9)
+							{
+								Main.PlaySound(10, -1, -1, 1);
+								Main.menuMode = 12;
+							}
+							num9++;
+							array9[num9] = Lang.menu[131];
+							if (this.selectedMenu == num9)
+							{
+								Main.PlaySound(10, -1, -1, 1);
+								Main.MenuUI.SetState(Main.AchievementsMenu);
+								Main.menuMode = 888;
+							}
+							num9++;
+							array9[num9] = Lang.menu[14];
+							if (this.selectedMenu == num9)
+							{
+								Main.PlaySound(10, -1, -1, 1);
+								Main.menuMode = 11;
+							}
+							num9++;
+							array9[num9] = Lang.menu[15];
+							if (this.selectedMenu == num9)
+							{
+								this.QuitGame();
+							}
+							num9++;
+						}
+						else if (Main.menuMode == 1)
+						{
+							Main.MenuUI.SetState(Main._characterSelectMenu);
+							Main.menuMode = 888;
+						}
+						else if (Main.menuMode == 2)
+						{
+							flag4 = true;
+							if (this.selectedMenu == 0)
+							{
+								Main.menuMode = 17;
+								Main.PlaySound(10, -1, -1, 1);
+								Main.selColor = Main.PendingPlayer.hairColor;
+							}
+							if (this.selectedMenu == 1)
+							{
+								Main.menuMode = 18;
+								Main.PlaySound(10, -1, -1, 1);
+								Main.selColor = Main.PendingPlayer.eyeColor;
+							}
+							if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 19;
+								Main.PlaySound(10, -1, -1, 1);
+								Main.selColor = Main.PendingPlayer.skinColor;
+							}
+							if (this.selectedMenu == 3)
+							{
+								Main.menuMode = 20;
+								Main.PlaySound(10, -1, -1, 1);
+							}
+							array9[0] = Lang.menu[18];
+							array9[1] = Lang.menu[19];
+							array9[2] = Lang.menu[20];
+							array9[3] = Lang.menu[21];
+							num = 220;
+							for (int num10 = 0; num10 < 9; num10++)
+							{
+								if (num10 < 6)
+								{
+									array7[num10] = 0.75f;
+								}
+								else
+								{
+									array7[num10] = 0.9f;
+								}
+							}
+							num3 = 38;
+							array4[6] = 6;
+							array4[7] = 12;
+							array4[8] = 18;
+							num6 = Main.screenWidth / 2 - 16;
+							num7 = 176;
+							if (Main.PendingPlayer.Male)
+							{
+								array9[4] = Lang.menu[22];
+							}
+							else
+							{
+								array9[4] = Lang.menu[23];
+							}
+							if (this.selectedMenu == 4)
+							{
+								if (Main.PendingPlayer.Male)
+								{
+									Main.PlaySound(20, -1, -1, 1);
+									Main.PendingPlayer.Male = false;
+								}
+								else
+								{
+									Main.PlaySound(1, -1, -1, 1);
+									Main.PendingPlayer.Male = true;
+								}
+							}
+							if (Main.PendingPlayer.difficulty == 2)
+							{
+								array9[5] = Lang.menu[24];
+								array6[5] = Main.PendingPlayer.difficulty;
+							}
+							else if (Main.PendingPlayer.difficulty == 1)
+							{
+								array9[5] = Lang.menu[25];
+								array6[5] = Main.PendingPlayer.difficulty;
+							}
+							else
+							{
+								array9[5] = Lang.menu[26];
+							}
+							if (this.selectedMenu == 5)
+							{
+								Main.PlaySound(10, -1, -1, 1);
+								Main.menuMode = 222;
+							}
+							if (this.selectedMenu == 7)
+							{
+								Main.PlaySound(12, -1, -1, 1);
+								Main.PendingPlayer.hair = Main.rand.Next(51);
+								Main.PendingPlayer.eyeColor = this.randColor();
+								while ((int)(Main.PendingPlayer.eyeColor.R + Main.PendingPlayer.eyeColor.G + Main.PendingPlayer.eyeColor.B) > 300)
+								{
+									Main.PendingPlayer.eyeColor = this.randColor();
+								}
+								Main.PendingPlayer.hairColor = this.randColor();
+								Main.PendingPlayer.pantsColor = this.randColor();
+								Main.PendingPlayer.shirtColor = this.randColor();
+								Main.PendingPlayer.shoeColor = this.randColor();
+								Main.PendingPlayer.skinColor = this.randColor();
+								float num11 = (float)Main.rand.Next(60, 120) * 0.01f;
+								if (num11 > 1f)
+								{
+									num11 = 1f;
+								}
+								Main.PendingPlayer.skinColor.R = (byte)((float)Main.rand.Next(240, 255) * num11);
+								Main.PendingPlayer.skinColor.G = (byte)((float)Main.rand.Next(110, 140) * num11);
+								Main.PendingPlayer.skinColor.B = (byte)((float)Main.rand.Next(75, 110) * num11);
+								Main.PendingPlayer.underShirtColor = this.randColor();
+								int num12 = Main.PendingPlayer.hair + 1;
+								if (num12 == 5 || num12 == 6 || num12 == 7 || num12 == 10 || num12 == 12 || num12 == 19 || num12 == 22 || num12 == 23 || num12 == 26 || num12 == 27 || num12 == 30 || num12 == 33)
+								{
+									Main.PendingPlayer.Male = false;
+								}
+								else
+								{
+									Main.PendingPlayer.Male = true;
+								}
+								Main.PendingPlayer.skinVariant = Main.rand.Next(8);
+							}
+							array9[7] = Lang.menu[27];
+							array9[6] = Lang.menu[28];
+							array9[8] = Lang.menu[5];
+							num4 = 9;
+							if (this.selectedMenu == 8)
+							{
+								Main.PlaySound(11, -1, -1, 1);
+								Main.menuMode = 1;
+							}
+							else if (this.selectedMenu == 6)
+							{
+								Main.PlaySound(10, -1, -1, 1);
+								Main.PendingPlayer.name = "";
+								Main.menuMode = 3;
+								Main.clrInput();
+							}
+						}
+						else if (Main.menuMode == 222)
+						{
+							if (this.focusMenu == 3)
+							{
+								array9[0] = Lang.menu[29];
+							}
+							else if (this.focusMenu == 2)
+							{
+								array9[0] = Lang.menu[30];
+							}
+							else if (this.focusMenu == 1)
+							{
+								array9[0] = Lang.menu[31];
+							}
+							else
+							{
+								array9[0] = Lang.menu[32];
+							}
+							num3 = 50;
+							array4[1] = 25;
+							array4[2] = 25;
+							array4[3] = 25;
+							array[0] = true;
+							array9[1] = Lang.menu[26];
+							array9[2] = Lang.menu[25];
+							array6[2] = 1;
+							array9[3] = Lang.menu[24];
+							array6[3] = 2;
+							num4 = 4;
+							if (this.selectedMenu == 1)
+							{
+								Main.PendingPlayer.difficulty = 0;
+								Main.menuMode = 2;
+							}
+							else if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 2;
+								Main.PendingPlayer.difficulty = 1;
+							}
+							else if (this.selectedMenu == 3)
+							{
+								Main.PendingPlayer.difficulty = 2;
+								Main.menuMode = 2;
+							}
+						}
+						else if (Main.menuMode == 20)
+						{
+							flag4 = true;
+							if (this.selectedMenu == 0)
+							{
+								Main.menuMode = 21;
+								Main.PlaySound(10, -1, -1, 1);
+								Main.selColor = Main.PendingPlayer.shirtColor;
+							}
+							if (this.selectedMenu == 1)
+							{
+								Main.menuMode = 22;
+								Main.PlaySound(10, -1, -1, 1);
+								Main.selColor = Main.PendingPlayer.underShirtColor;
+							}
+							if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 23;
+								Main.PlaySound(10, -1, -1, 1);
+								Main.selColor = Main.PendingPlayer.pantsColor;
+							}
+							if (this.selectedMenu == 3)
+							{
+								Main.selColor = Main.PendingPlayer.shoeColor;
+								Main.menuMode = 24;
+								Main.PlaySound(10, -1, -1, 1);
+							}
+							if (this.selectedMenu == 5)
+							{
+								Main.PlaySound(11, -1, -1, 1);
+								Main.menuMode = 2;
+							}
+							if (this.selectedMenu == 4)
+							{
+								Main.PlaySound(12, -1, -1, 1);
+								if (Main.PendingPlayer.skinVariant < 4)
+								{
+									Main.PendingPlayer.skinVariant++;
+									if (Main.PendingPlayer.skinVariant == 4)
+									{
+										Main.PendingPlayer.skinVariant = 0;
+									}
+								}
+								else
+								{
+									Main.PendingPlayer.skinVariant++;
+									if (Main.PendingPlayer.skinVariant == 8)
+									{
+										Main.PendingPlayer.skinVariant = 4;
+									}
+								}
+							}
+							num6 = Main.screenWidth / 2 - 16;
+							num7 = 210;
+							num = 260;
+							num3 = 50;
+							num4 = 6;
+							array9[0] = Lang.menu[33];
+							array9[1] = Lang.menu[34];
+							array9[2] = Lang.menu[35];
+							array9[3] = Lang.menu[36];
+							array9[4] = Lang.menu[127];
+							array9[5] = Lang.menu[5];
+							array4[5] = 20;
+						}
+						else if (Main.menuMode == 17)
+						{
+							flag4 = true;
+							num6 = Main.screenWidth / 2 - 16;
+							num7 = 210;
+							flag = true;
+							num8 = 390;
+							num = 260;
+							num3 = 60;
+							Main.PendingPlayer.hairColor = Main.selColor;
+							num4 = 3;
+							array9[0] = Lang.menu[37] + " " + (Main.PendingPlayer.hair + 1);
+							array9[1] = Lang.menu[38];
+							array[1] = true;
+							array4[2] = 150;
+							array4[1] = 10;
+							array9[2] = Lang.menu[5];
+							int num13 = 51;
+							if (this.selectedMenu == 0)
+							{
+								Main.PlaySound(12, -1, -1, 1);
+								Main.PendingPlayer.hair++;
+								if (Main.PendingPlayer.hair >= num13)
+								{
+									Main.PendingPlayer.hair = 0;
+								}
+							}
+							else if (this.selectedMenu2 == 0)
+							{
+								Main.PlaySound(12, -1, -1, 1);
+								Main.PendingPlayer.hair--;
+								if (Main.PendingPlayer.hair < 0)
+								{
+									Main.PendingPlayer.hair = num13 - 1;
+								}
+							}
+							if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 2;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+						}
+						else if (Main.menuMode == 18)
+						{
+							flag4 = true;
+							num6 = Main.screenWidth / 2 - 16;
+							num7 = 210;
+							flag = true;
+							num8 = 370;
+							num = 240;
+							num3 = 60;
+							Main.PendingPlayer.eyeColor = Main.selColor;
+							num4 = 3;
+							array9[0] = "";
+							array9[1] = Lang.menu[39];
+							array[1] = true;
+							array4[2] = 170;
+							array4[1] = 10;
+							array9[2] = Lang.menu[5];
+							if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 2;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+						}
+						else if (Main.menuMode == 19)
+						{
+							flag4 = true;
+							num6 = Main.screenWidth / 2 - 16;
+							num7 = 210;
+							flag = true;
+							num8 = 370;
+							num = 240;
+							num3 = 60;
+							Main.PendingPlayer.skinColor = Main.selColor;
+							num4 = 3;
+							array9[0] = "";
+							array9[1] = Lang.menu[40];
+							array[1] = true;
+							array4[2] = 170;
+							array4[1] = 10;
+							array9[2] = Lang.menu[5];
+							if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 2;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+						}
+						else if (Main.menuMode == 21)
+						{
+							flag4 = true;
+							num6 = Main.screenWidth / 2 - 16;
+							num7 = 210;
+							flag = true;
+							num8 = 370;
+							num = 240;
+							num3 = 60;
+							Main.PendingPlayer.shirtColor = Main.selColor;
+							num4 = 3;
+							array9[0] = "";
+							array9[1] = Lang.menu[41];
+							array[1] = true;
+							array4[2] = 170;
+							array4[1] = 10;
+							array9[2] = Lang.menu[5];
+							if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 20;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+						}
+						else if (Main.menuMode == 22)
+						{
+							flag4 = true;
+							num6 = Main.screenWidth / 2 - 16;
+							num7 = 210;
+							flag = true;
+							num8 = 370;
+							num = 240;
+							num3 = 60;
+							Main.PendingPlayer.underShirtColor = Main.selColor;
+							num4 = 3;
+							array9[0] = "";
+							array9[1] = Lang.menu[42];
+							array[1] = true;
+							array4[2] = 170;
+							array4[1] = 10;
+							array9[2] = Lang.menu[5];
+							if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 20;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+						}
+						else if (Main.menuMode == 23)
+						{
+							flag4 = true;
+							num6 = Main.screenWidth / 2 - 16;
+							num7 = 210;
+							flag = true;
+							num8 = 370;
+							num = 240;
+							num3 = 60;
+							Main.PendingPlayer.pantsColor = Main.selColor;
+							num4 = 3;
+							array9[0] = "";
+							array9[1] = Lang.menu[43];
+							array[1] = true;
+							array4[2] = 170;
+							array4[1] = 10;
+							array9[2] = Lang.menu[5];
+							if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 20;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+						}
+						else if (Main.menuMode == 24)
+						{
+							flag4 = true;
+							num6 = Main.screenWidth / 2 - 16;
+							num7 = 210;
+							flag = true;
+							num8 = 370;
+							num = 240;
+							num3 = 60;
+							Main.PendingPlayer.shoeColor = Main.selColor;
+							num4 = 3;
+							array9[0] = "";
+							array9[1] = Lang.menu[44];
+							array[1] = true;
+							array4[2] = 170;
+							array4[1] = 10;
+							array9[2] = Lang.menu[5];
+							if (this.selectedMenu == 2)
+							{
+								Main.menuMode = 20;
+								Main.PlaySound(11, -1, -1, 1);
+							}
+						}
+						else if (Main.menuMode == 3)
+						{
+							string name = Main.PendingPlayer.name;
+							Main.PendingPlayer.name = Main.GetInputText(Main.PendingPlayer.name);
+							if (Main.PendingPlayer.name.Length > Player.nameLen)
+							{
+								Main.PendingPlayer.name = Main.PendingPlayer.name.Substring(0, Player.nameLen);
+							}
+							if (name != Main.PendingPlayer.name)
+							{
+								Main.PlaySound(12, -1, -1, 1);
+							}
+							array9[0] = Lang.menu[45];
+							array2[2] = true;
+							if (Main.PendingPlayer.name != "")
+							{
+								if (Main.PendingPlayer.name.Substring(0, 1) == " ")
+								{
+									Main.PendingPlayer.name = "";
+								}
+								for (int num14 = 0; num14 < Main.PendingPlayer.name.Length; num14++)
+								{
+									if (Main.PendingPlayer.name.Substring(num14, 1) != " ")
+									{
+										array2[2] = false;
+									}
+								}
+							}
+							this.textBlinkerCount++;
+							if (this.textBlinkerCount >= 20)
+							{
+								if (this.textBlinkerState == 0)
+								{
+									this.textBlinkerState = 1;
+								}
+								else
+								{
+									this.textBlinkerState = 0;
+								}
+								this.textBlinkerCount = 0;
+							}
+							array9[1] = Main.PendingPlayer.name;
+							if (this.textBlinkerState == 1)
+							{
+								string[] array10;
+								(array10 = array9)[1] = array10[1] + "|";
+								array5[1] = 1;
+							}
+							else
+							{
+								string[] array10;
+								(array10 = array9)[1] = array10[1] + " ";
+							}
+							array[0] = true;
+							array[1] = true;
+							array4[1] = -20;
+							array4[2] = 20;
+							array9[2] = Lang.menu[4];
+							array9[3] = Lang.menu[5];
+							num4 = 4;
+							if (this.selectedMenu == 3)
+							{
+								Main.PlaySound(11, -1, -1, 1);
+								Main.menuMode = 2;
+							}
+							if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
+							{
+								Main.PendingPlayer.name.Trim();
+								PlayerFileData.CreateAndSave(Main.PendingPlayer);
+								Main.LoadPlayers();
+								Main.PlaySound(10, -1, -1, 1);
+								Main.menuMode = 1;
+							}
+						}
+						else if (Main.menuMode != 4)
+						{
+							if (Main.menuMode == 5)
+							{
+								array9[0] = Lang.menu[46] + " " + Main.PlayerList[Main.selectedPlayer].Player.name + "?";
+								array[0] = true;
+								array9[1] = Lang.menu[104];
+								array9[2] = Lang.menu[105];
+								num4 = 3;
+								if (this.selectedMenu == 1)
+								{
+									Main.ErasePlayer(Main.selectedPlayer);
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 1;
+								}
+								else if (this.selectedMenu == 2)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 1;
+								}
+							}
+							else if (Main.menuMode == 6)
+							{
+								Main.MenuUI.SetState(Main._worldSelectMenu);
+								Main.menuMode = 888;
+							}
+							else if (Main.menuMode == -7)
+							{
+								num = 200;
+								num3 = 60;
+								array4[2] = 30;
+								array4[3] = 30;
+								array6[3] = 2;
+								array4[4] = 70;
+								if (this.focusMenu == 2)
+								{
+									array9[0] = "Your Journey Begins...";
+									array9[1] = "(The standard Terraria Experience)";
+								}
+								else if (this.focusMenu == 3)
+								{
+									array9[0] = "Fortune & Glory, Kid.";
+									array9[1] = "(Far Greater Difficulty & Loot)";
+								}
+								else
+								{
+									array9[0] = Lang.menu[32];
+								}
+								array[0] = true;
+								array[1] = true;
+								array9[2] = "Normal";
+								array9[3] = "Expert";
+								array9[4] = "Back";
+								num4 = 5;
+								if (this.selectedMenu == 2)
+								{
+									Main.expertMode = false;
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 7;
+								}
+								else if (this.selectedMenu == 3)
+								{
+									Main.expertMode = true;
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 7;
+								}
+								else if (this.selectedMenu == 4)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 16;
+								}
+								Main.clrInput();
+							}
+							else if (Main.menuMode == 7)
+							{
+								string a = Main.newWorldName;
+								Main.newWorldName = Main.GetInputText(Main.newWorldName);
+								if (Main.newWorldName.Length > 20)
+								{
+									Main.newWorldName = Main.newWorldName.Substring(0, 20);
+								}
+								if (a != Main.newWorldName)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+								}
+								array9[0] = Lang.menu[48];
+								array2[2] = true;
+								if (Main.newWorldName != "")
+								{
+									if (Main.newWorldName.Substring(0, 1) == " ")
+									{
+										Main.newWorldName = "";
+									}
+									for (int num15 = 0; num15 < Main.newWorldName.Length; num15++)
+									{
+										if (Main.newWorldName != " ")
+										{
+											array2[2] = false;
+										}
+									}
+								}
+								this.textBlinkerCount++;
+								if (this.textBlinkerCount >= 20)
+								{
+									if (this.textBlinkerState == 0)
+									{
+										this.textBlinkerState = 1;
+									}
+									else
+									{
+										this.textBlinkerState = 0;
+									}
+									this.textBlinkerCount = 0;
+								}
+								array9[1] = Main.newWorldName;
+								if (this.textBlinkerState == 1)
+								{
+									string[] array10;
+									(array10 = array9)[1] = array10[1] + "|";
+									array5[1] = 1;
+								}
+								else
+								{
+									string[] array10;
+									(array10 = array9)[1] = array10[1] + " ";
+								}
+								array[0] = true;
+								array[1] = true;
+								array4[1] = -20;
+								array4[2] = 20;
+								array9[2] = Lang.menu[4];
+								array9[3] = Lang.menu[5];
+								num4 = 4;
+								if (this.selectedMenu == 3)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = -7;
+								}
+								if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
+								{
+									Main.menuMode = 10;
+									Main.worldName = Main.newWorldName;
+									Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.expertMode);
+									WorldGen.CreateNewWorld(null);
+								}
+							}
+							else if (Main.menuMode == 8)
+							{
+								num = 180;
+								num3 = 40;
+								num4 = 8;
+								array4[7] += 30;
+								for (int num16 = 0; num16 < num4; num16++)
+								{
+									array7[num16] = 0.8f;
+								}
+								array9[7] = Lang.menu[5];
+								for (int num17 = 0; num17 < 7; num17++)
+								{
+									if (num17 < Main.WorldList.Count)
+									{
+										array9[num17] = Main.WorldList[num17 + Main.menuSkip].Name;
+										if (Main.WorldList[num17 + Main.menuSkip].IsExpertMode)
+										{
+											array6[num17] = 2;
+										}
+									}
+									else
+									{
+										array9[num17] = null;
+									}
+								}
+								if (Main.WorldList.Count > 7 + Main.menuSkip)
+								{
+									array9[6] = "more";
+									array9[6] = "▼";
+									array7[6] = 0.6f;
+									array4[6] += 8;
+									this.menuWide[6] = true;
+								}
+								if (Main.menuSkip > 0)
+								{
+									array9[0] = "▲";
+									array7[0] = 0.6f;
+									array4[0] += 8;
+									this.menuWide[0] = true;
+								}
+								if (this.selectedMenu == 0 && Main.menuSkip > 0)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									Main.menuSkip -= 5;
+									if (Main.menuSkip < 0)
+									{
+										Main.menuSkip = 0;
+									}
+								}
+								else if (this.selectedMenu == 6 && Main.menuSkip < Main.WorldList.Count - 7)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									Main.menuSkip += 5;
+									if (Main.menuSkip >= Main.PlayerList.Count - 7)
+									{
+										Main.menuSkip = Main.WorldList.Count - 7;
+									}
+								}
+								else if (this.selectedMenu == 7)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 6;
+								}
+								else if (this.selectedMenu >= 0)
+								{
+									Main.selectedWorld = this.selectedMenu + Main.menuSkip;
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 9;
+								}
+							}
+							else if (Main.menuMode == 9)
+							{
+								array9[0] = Lang.menu[46] + " " + Main.WorldList[Main.selectedWorld].Name + "?";
+								array[0] = true;
+								array9[1] = Lang.menu[104];
+								array9[2] = Lang.menu[105];
+								num4 = 3;
+								if (this.selectedMenu == 1)
+								{
+									Main.EraseWorld(Main.selectedWorld);
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 6;
+								}
+								else if (this.selectedMenu == 2)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 6;
+								}
+							}
+							else if (Main.menuMode == 1111)
+							{
+								num = 210;
+								num3 = 40;
+								for (int num18 = 0; num18 < 8; num18++)
+								{
+									array7[num18] = 0.8f;
+								}
+								array4[8] = 10;
+								num4 = 9;
+								if (Main.graphics.IsFullScreen)
+								{
+									array9[0] = Lang.menu[49];
+								}
+								else
+								{
+									array9[0] = Lang.menu[50];
+								}
+								Main.bgScroll = (int)Math.Round((double)((1f - Main.caveParallax) * 500f));
+								array9[1] = Lang.menu[51];
+								array9[2] = Lang.menu[52];
+								if (Main.terrariasFixedTiming)
+								{
+									array9[3] = Lang.menu[53];
+								}
+								else
+								{
+									array9[3] = Lang.menu[54];
+								}
+								if (Lighting.lightMode == 0)
+								{
+									array9[4] = Lang.menu[55];
+								}
+								else if (Lighting.lightMode == 1)
+								{
+									array9[4] = Lang.menu[56];
+								}
+								else if (Lighting.lightMode == 2)
+								{
+									array9[4] = Lang.menu[57];
+								}
+								else if (Lighting.lightMode == 3)
+								{
+									array9[4] = Lang.menu[58];
+								}
+								if (Lighting.LightingThreads == 0)
+								{
+									array9[5] = Lang.menu[116] + " " + Lang.menu[117];
+								}
+								else
+								{
+									array9[5] = Lang.menu[116] + " " + (Lighting.LightingThreads + 1);
+								}
+								if (Main.qaStyle == 0)
+								{
+									array9[6] = Lang.menu[59];
+								}
+								else if (Main.qaStyle == 1)
+								{
+									array9[6] = Lang.menu[60];
+								}
+								else if (Main.qaStyle == 2)
+								{
+									array9[6] = Lang.menu[61];
+								}
+								else
+								{
+									array9[6] = Lang.menu[62];
+								}
+								if (Main.owBack)
+								{
+									array9[7] = Lang.menu[100];
+								}
+								else
+								{
+									array9[7] = Lang.menu[101];
+								}
+								if (this.selectedMenu == 7)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									if (Main.owBack)
+									{
+										Main.owBack = false;
+									}
+									else
+									{
+										Main.owBack = true;
+									}
+								}
+								array9[8] = Lang.menu[5];
+								if (this.selectedMenu == 8)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.SaveSettings();
+									Main.menuMode = 11;
+								}
+								if (this.selectedMenu == 6)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									Main.qaStyle++;
+									if (Main.qaStyle > 3)
+									{
+										Main.qaStyle = 0;
+									}
+								}
+								if (this.selectedMenu == 5)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									Lighting.LightingThreads++;
+									if (Lighting.LightingThreads > Environment.ProcessorCount - 1)
+									{
+										Lighting.LightingThreads = 0;
+									}
+								}
+								if (this.selectedMenu == 4)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									Lighting.lightMode++;
+									if (Lighting.lightMode >= 4)
+									{
+										Lighting.lightMode = 0;
+									}
+								}
+								if (this.selectedMenu == 3)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									if (Main.terrariasFixedTiming)
+									{
+										Main.terrariasFixedTiming = false;
+									}
+									else
+									{
+										Main.terrariasFixedTiming = true;
+									}
+								}
+								if (this.selectedMenu == 2)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 28;
+								}
+								if (this.selectedMenu == 1)
+								{
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 111;
+								}
+								if (this.selectedMenu == 0)
+								{
+									Main.ToggleFullScreen();
+								}
+							}
+							else if (Main.menuMode == 11)
+							{
+								num = 240;
+								num3 = 37;
+								num4 = 8;
+								array4[num4 - 1] = 8;
+								for (int num19 = 0; num19 < num4; num19++)
+								{
+									array7[num19] = 0.73f;
+								}
+								int num20 = 0;
+								array9[num20] = Lang.menu[114];
+								if (this.selectedMenu == num20)
+								{
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 112;
+								}
+								num20++;
+								array9[num20] = Lang.menu[63];
+								if (this.selectedMenu == num20)
+								{
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 1111;
+								}
+								num20++;
+								array9[num20] = Lang.menu[64];
+								if (this.selectedMenu == num20)
+								{
+									Main.PlaySound(10, -1, -1, 1);
+									Main.selColor = Main.mouseColor;
+									Main.menuMode = 25;
+								}
+								num20++;
+								array9[num20] = Lang.menu[65];
+								if (this.selectedMenu == num20)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 26;
+								}
+								num20++;
+								array9[num20] = Lang.menu[66];
+								if (this.selectedMenu == num20)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 27;
+								}
+								num20++;
+								array9[num20] = Lang.menu[115];
+								if (this.selectedMenu == num20)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 272727;
+								}
+								num20++;
+								array9[num20] = Lang.menu[103];
+								if (this.selectedMenu == num20)
+								{
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 1213;
+								}
+								num20++;
+								array9[num20] = Lang.menu[5];
+								if (this.selectedMenu == num20)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 0;
+									Main.SaveSettings();
+								}
+							}
+							else if (Main.menuMode == 112)
+							{
+								num = 220;
+								num3 = 34;
+								num4 = 10;
+								array4[num4 - 1] = 18;
+								for (int num21 = 0; num21 < num4; num21++)
+								{
+									array7[num21] = 0.73f;
+								}
+								int num22 = 0;
+								if (Main.autoSave)
+								{
+									array9[num22] = Lang.menu[67];
+								}
+								else
+								{
+									array9[num22] = Lang.menu[68];
+								}
+								if (this.selectedMenu == num22)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									if (Main.autoSave)
+									{
+										Main.autoSave = false;
+									}
+									else
+									{
+										Main.autoSave = true;
+									}
+								}
+								num22++;
+								if (Main.autoPause)
+								{
+									array9[num22] = Lang.menu[69];
+								}
+								else
+								{
+									array9[num22] = Lang.menu[70];
+								}
+								if (this.selectedMenu == num22)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									if (Main.autoPause)
+									{
+										Main.autoPause = false;
+									}
+									else
+									{
+										Main.autoPause = true;
+									}
+								}
+								num22++;
+								if (Main.showItemText)
+								{
+									array9[num22] = Lang.menu[71];
+								}
+								else
+								{
+									array9[num22] = Lang.menu[72];
+								}
+								if (this.selectedMenu == num22)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									if (Main.showItemText)
+									{
+										Main.showItemText = false;
+									}
+									else
+									{
+										Main.showItemText = true;
+									}
+								}
+								num22++;
+								if (Main.mapEnabled)
+								{
+									array9[num22] = Lang.menu[112];
+								}
+								else
+								{
+									array9[num22] = Lang.menu[113];
+								}
+								if (this.selectedMenu == num22)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									if (Main.mapEnabled)
+									{
+										Main.mapEnabled = false;
+									}
+									else
+									{
+										Main.mapEnabled = true;
+									}
+								}
+								num22++;
+								array9[num22] = (Main.cSmartToggle ? Lang.menu[121] : Lang.menu[122]);
+								if (this.selectedMenu == num22)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									Main.cSmartToggle = !Main.cSmartToggle;
+								}
+								num22++;
+								array9[num22] = Lang.menu[123] + " " + Lang.menu[124 + Main.invasionProgressMode];
+								if (this.selectedMenu == num22)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									Main.invasionProgressMode++;
+									if (Main.invasionProgressMode >= 3)
+									{
+										Main.invasionProgressMode = 0;
+									}
+								}
+								num22++;
+								array9[num22] = (Main.placementPreview ? Lang.menu[128] : Lang.menu[129]);
+								if (this.selectedMenu == num22)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									Main.placementPreview = !Main.placementPreview;
+								}
+								num22++;
+								array9[num22] = (ChildSafety.Disabled ? Lang.menu[132] : Lang.menu[133]);
+								if (this.selectedMenu == num22)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									ChildSafety.Disabled = !ChildSafety.Disabled;
+								}
+								num22++;
+								array9[num22] = (ItemSlot.Options.HighlightNewItems ? Lang.inter[117] : Lang.inter[116]);
+								if (this.selectedMenu == num22)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									ItemSlot.Options.HighlightNewItems = !ItemSlot.Options.HighlightNewItems;
+								}
+								num22++;
+								array9[num22] = Lang.menu[5];
+								if (this.selectedMenu == num22)
+								{
+									Main.menuMode = 11;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+							}
+							else if (Main.menuMode == 111)
+							{
+								num = 240;
+								num3 = 60;
+								num4 = 4;
+								array9[0] = Lang.menu[73];
+								array9[1] = Main.PendingResolutionWidth + "x" + Main.PendingResolutionHeight;
+								array9[2] = Lang.menu[134];
+								array9[3] = Lang.menu[5];
+								array[0] = true;
+								array4[1] = 10;
+								array4[2] = 140;
+								array4[3] = 140;
+								if (this.selectedMenu == 1)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									int num23 = 0;
+									for (int num24 = 0; num24 < Main.numDisplayModes; num24++)
+									{
+										if (Main.displayWidth[num24] == Main.PendingResolutionWidth && Main.displayHeight[num24] == Main.PendingResolutionHeight)
+										{
+											num23 = num24;
+											break;
+										}
+									}
+									num23 = (num23 + 1) % Main.numDisplayModes;
+									Main.PendingResolutionWidth = Main.displayWidth[num23];
+									Main.PendingResolutionHeight = Main.displayHeight[num23];
+								}
+								if (this.selectedMenu == 2)
+								{
+									if (Main.graphics.IsFullScreen)
+									{
+										Main.SetResolution(Main.PendingResolutionWidth, Main.PendingResolutionHeight);
+									}
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 1111;
+								}
+								if (this.selectedMenu == 3)
+								{
+									Main.PendingResolutionWidth = Main.graphics.PreferredBackBufferWidth;
+									Main.PendingResolutionHeight = Main.graphics.PreferredBackBufferHeight;
+									Main.menuMode = 1111;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+							}
+							else if (Main.menuMode == 25)
+							{
+								flag = true;
+								num8 = 370;
+								num = 240;
+								num3 = 60;
+								Main.mouseColor = Main.selColor;
+								num4 = 3;
+								array9[0] = "";
+								array9[1] = Lang.menu[64];
+								array[1] = true;
+								array4[2] = 170;
+								array4[1] = 10;
+								array9[2] = Lang.menu[5];
+								if (this.selectedMenu == 2)
+								{
+									Main.menuMode = 11;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+							}
+							else if (Main.menuMode == 26)
+							{
+								flag2 = true;
+								num = 240;
+								num3 = 60;
+								num4 = 3;
+								array9[0] = "";
+								array9[1] = Lang.menu[65];
+								array[1] = true;
+								array4[2] = 170;
+								array4[1] = 10;
+								array9[2] = Lang.menu[5];
+								if (this.selectedMenu == 2)
+								{
+									Main.menuMode = 11;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+							}
+							else if (Main.menuMode == 28)
+							{
+								Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
+								flag3 = true;
+								num = 240;
+								num3 = 60;
+								num4 = 3;
+								array9[0] = "";
+								array9[1] = Lang.menu[52];
+								array[1] = true;
+								array4[2] = 170;
+								array4[1] = 10;
+								array9[2] = Lang.menu[5];
+								if (this.selectedMenu == 2)
+								{
+									Main.menuMode = 1111;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+							}
+							else if (Main.menuMode == 272727)
+							{
+								num = 200;
+								num3 = 30;
+								num4 = 14;
+								string[] array11 = new string[12];
+								array11[0] = Main.cMapStyle;
+								array11[1] = Main.cMapFull;
+								array11[2] = Main.cMapZoomIn;
+								array11[3] = Main.cMapZoomOut;
+								array11[4] = Main.cMapAlphaUp;
+								array11[5] = Main.cMapAlphaDown;
+								if (Main.setKey >= 0)
+								{
+									array11[Main.setKey] = "_";
+								}
+								array9[0] = Lang.menu[106] + array11[0];
+								array9[1] = Lang.menu[107] + array11[1];
+								array9[2] = Lang.menu[108] + array11[2];
+								array9[3] = Lang.menu[109] + array11[3];
+								array9[4] = Lang.menu[110] + array11[4];
+								array9[5] = Lang.menu[111] + array11[5];
+								for (int num25 = 0; num25 < 6; num25++)
+								{
+									array8[num25] = true;
+									array7[num25] = 0.55f;
+									array5[num25] = -140;
+								}
+								array7[6] = 0.8f;
+								array7[6] = 0.8f;
+								array4[6] = 6;
+								array9[6] = Lang.menu[86];
+								array4[7] = 16;
+								array9[7] = Lang.menu[5];
+								if (this.selectedMenu == 7)
+								{
+									Main.menuMode = 11;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+								else if (this.selectedMenu == 6)
+								{
+									Main.cMapStyle = "Tab";
+									Main.cMapFull = "M";
+									Main.cMapZoomIn = "Add";
+									Main.cMapZoomOut = "Subtract";
+									Main.cMapAlphaUp = "PageUp";
+									Main.cMapAlphaDown = "PageDown";
+									Main.setKey = -1;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+								else if (this.selectedMenu >= 0)
+								{
+									Main.setKey = this.selectedMenu;
+								}
+								if (Main.setKey >= 0)
+								{
+									Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.keyState.GetPressedKeys();
+									if (pressedKeys.Length > 0)
+									{
+										string a2 = string.Concat(pressedKeys[0]);
+										if (a2 != "None")
+										{
+											if (Main.setKey == 0)
+											{
+												Main.cMapStyle = a2;
+											}
+											if (Main.setKey == 1)
+											{
+												Main.cMapFull = a2;
+											}
+											if (Main.setKey == 2)
+											{
+												Main.cMapZoomIn = a2;
+											}
+											if (Main.setKey == 3)
+											{
+												Main.cMapZoomOut = a2;
+											}
+											if (Main.setKey == 4)
+											{
+												Main.cMapAlphaUp = a2;
+											}
+											if (Main.setKey == 5)
+											{
+												Main.cMapAlphaDown = a2;
+											}
+											Main.setKey = -1;
+										}
+									}
+								}
+							}
+							else if (Main.menuMode == 27)
+							{
+								num = 176;
+								num3 = 22;
+								num4 = 16;
+								string[] array12 = new string[]
+								{
+									Main.cUp,
+									Main.cDown,
+									Main.cLeft,
+									Main.cRight,
+									Main.cJump,
+									Main.cThrowItem,
+									Main.cInv,
+									Main.cHeal,
+									Main.cMana,
+									Main.cBuff,
+									Main.cHook,
+									Main.cTorch,
+									Main.cSmart,
+									Main.cMount
+								};
+								if (Main.setKey >= 0)
+								{
+									array12[Main.setKey] = "_";
+								}
+								array9[0] = Lang.menu[74] + array12[0];
+								array9[1] = Lang.menu[75] + array12[1];
+								array9[2] = Lang.menu[76] + array12[2];
+								array9[3] = Lang.menu[77] + array12[3];
+								array9[4] = Lang.menu[78] + array12[4];
+								array9[5] = Lang.menu[79] + array12[5];
+								array9[6] = Lang.menu[80] + array12[6];
+								array9[7] = Lang.menu[81] + array12[7];
+								array9[8] = Lang.menu[82] + array12[8];
+								array9[9] = Lang.menu[83] + array12[9];
+								array9[10] = Lang.menu[84] + array12[10];
+								array9[11] = Lang.menu[85] + array12[11];
+								array9[12] = Lang.menu[120] + array12[12];
+								array9[13] = Lang.menu[130] + array12[13];
+								for (int num26 = 0; num26 < 14; num26++)
+								{
+									array8[num26] = true;
+									array7[num26] = 0.45f;
+									array5[num26] = -80;
+								}
+								array7[14] = 0.8f;
+								array4[14] = 6;
+								array9[14] = Lang.menu[86];
+								array7[15] = 0.8f;
+								array4[15] = 16;
+								array9[15] = Lang.menu[5];
+								if (this.selectedMenu == 15)
+								{
+									Main.menuMode = 11;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+								else if (this.selectedMenu == 14)
+								{
+									Main.ResetKeyBindings();
+									Main.setKey = -1;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+								else if (this.selectedMenu >= 0)
+								{
+									Main.setKey = this.selectedMenu;
+								}
+								if (Main.setKey >= 0)
+								{
+									Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = Main.keyState.GetPressedKeys();
+									if (pressedKeys2.Length > 0)
+									{
+										string a3 = string.Concat(pressedKeys2[0]);
+										if (a3 != "None")
+										{
+											if (Main.setKey == 0)
+											{
+												Main.cUp = a3;
+											}
+											if (Main.setKey == 1)
+											{
+												Main.cDown = a3;
+											}
+											if (Main.setKey == 2)
+											{
+												Main.cLeft = a3;
+											}
+											if (Main.setKey == 3)
+											{
+												Main.cRight = a3;
+											}
+											if (Main.setKey == 4)
+											{
+												Main.cJump = a3;
+											}
+											if (Main.setKey == 5)
+											{
+												Main.cThrowItem = a3;
+											}
+											if (Main.setKey == 6)
+											{
+												Main.cInv = a3;
+											}
+											if (Main.setKey == 7)
+											{
+												Main.cHeal = a3;
+											}
+											if (Main.setKey == 8)
+											{
+												Main.cMana = a3;
+											}
+											if (Main.setKey == 9)
+											{
+												Main.cBuff = a3;
+											}
+											if (Main.setKey == 10)
+											{
+												Main.cHook = a3;
+											}
+											if (Main.setKey == 11)
+											{
+												Main.cTorch = a3;
+											}
+											if (Main.setKey == 12)
+											{
+												Main.cSmart = a3;
+											}
+											if (Main.setKey == 13)
+											{
+												Main.cMount = a3;
+											}
+											Main.setKey = -1;
+										}
+									}
+								}
+							}
+							else if (Main.menuMode == 12)
+							{
+								int num27 = (SocialAPI.Network != null) ? 1 : 0;
+								Main.menuServer = false;
+								array9[0] = Lang.menu[(SocialAPI.Network != null) ? 146 : 87];
+								array9[1] = Lang.menu[145];
+								array9[1 + num27] = Lang.menu[88];
+								array9[2 + num27] = Lang.menu[5];
+								if (this.selectedMenu == 0)
+								{
+									Main.LoadPlayers();
+									Main.menuMultiplayer = true;
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 1;
+								}
+								else if (this.selectedMenu == 1 + num27)
+								{
+									Main.LoadPlayers();
+									Main.PlaySound(10, -1, -1, 1);
+									Main.menuMode = 1;
+									Main.menuMultiplayer = true;
+									Main.menuServer = true;
+								}
+								else if (this.selectedMenu == 1)
+								{
+									Main.PlaySound(10, -1, -1, 1);
+									SocialAPI.Friends.OpenJoinInterface();
+								}
+								else if (this.selectedMenu == 2 + num27)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 0;
+								}
+								num4 = 3 + num27;
+							}
+							else if (Main.menuMode == 13)
+							{
+								string a4 = Main.getIP;
+								Main.getIP = Main.GetInputText(Main.getIP);
+								if (a4 != Main.getIP)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+								}
+								array9[0] = Lang.menu[89];
+								array2[9] = true;
+								if (Main.getIP != "")
+								{
+									if (Main.getIP.Substring(0, 1) == " ")
+									{
+										Main.getIP = "";
+									}
+									for (int num28 = 0; num28 < Main.getIP.Length; num28++)
+									{
+										if (Main.getIP != " ")
+										{
+											array2[9] = false;
+										}
+									}
+								}
+								this.textBlinkerCount++;
+								if (this.textBlinkerCount >= 20)
+								{
+									if (this.textBlinkerState == 0)
+									{
+										this.textBlinkerState = 1;
+									}
+									else
+									{
+										this.textBlinkerState = 0;
+									}
+									this.textBlinkerCount = 0;
+								}
+								array9[1] = Main.getIP;
+								if (this.textBlinkerState == 1)
+								{
+									string[] array10;
+									(array10 = array9)[1] = array10[1] + "|";
+									array5[1] = 1;
+								}
+								else
+								{
+									string[] array10;
+									(array10 = array9)[1] = array10[1] + " ";
+								}
+								array[0] = true;
+								array[1] = true;
+								array4[9] = 44;
+								array4[10] = 64;
+								array9[9] = Lang.menu[4];
+								array9[10] = Lang.menu[5];
+								num4 = 11;
+								num = 180;
+								num3 = 30;
+								array4[1] = 19;
+								for (int num29 = 2; num29 < 9; num29++)
+								{
+									int num30 = num29 - 2;
+									if (Main.recentWorld[num30] != null && Main.recentWorld[num30] != "")
+									{
+										array9[num29] = string.Concat(new object[]
+										{
+											Main.recentWorld[num30],
+											" (",
+											Main.recentIP[num30],
+											":",
+											Main.recentPort[num30],
+											")"
+										});
+									}
+									else
+									{
+										array9[num29] = "";
+										array[num29] = true;
+									}
+									array7[num29] = 0.6f;
+									array4[num29] = 40;
+								}
+								if (this.selectedMenu >= 2 && this.selectedMenu < 9)
+								{
+									Main.autoPass = false;
+									int num31 = this.selectedMenu - 2;
+									Netplay.ListenPort = Main.recentPort[num31];
+									Main.getIP = Main.recentIP[num31];
+									if (Netplay.SetRemoteIP(Main.getIP))
+									{
+										Main.menuMode = 10;
+										Netplay.StartTcpClient();
+									}
+								}
+								if (this.selectedMenu == 10)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 1;
+								}
+								if (this.selectedMenu == 9 || (!array2[2] && Main.inputTextEnter))
+								{
+									Main.PlaySound(12, -1, -1, 1);
+									Main.menuMode = 131;
+									Main.clrInput();
+								}
+							}
+							else if (Main.menuMode == 131)
+							{
+								int num32 = 7777;
+								string a5 = Main.getPort;
+								Main.getPort = Main.GetInputText(Main.getPort);
+								if (a5 != Main.getPort)
+								{
+									Main.PlaySound(12, -1, -1, 1);
+								}
+								array9[0] = Lang.menu[90];
+								array2[2] = true;
+								if (Main.getPort != "")
+								{
+									bool flag6 = false;
+									try
+									{
+										num32 = Convert.ToInt32(Main.getPort);
+										if (num32 > 0 && num32 <= 65535)
+										{
+											flag6 = true;
+										}
+									}
+									catch
+									{
+									}
+									if (flag6)
+									{
+										array2[2] = false;
+									}
+								}
+								this.textBlinkerCount++;
+								if (this.textBlinkerCount >= 20)
+								{
+									if (this.textBlinkerState == 0)
+									{
+										this.textBlinkerState = 1;
+									}
+									else
+									{
+										this.textBlinkerState = 0;
+									}
+									this.textBlinkerCount = 0;
+								}
+								array9[1] = Main.getPort;
+								if (this.textBlinkerState == 1)
+								{
+									string[] array10;
+									(array10 = array9)[1] = array10[1] + "|";
+									array5[1] = 1;
+								}
+								else
+								{
+									string[] array10;
+									(array10 = array9)[1] = array10[1] + " ";
+								}
+								array[0] = true;
+								array[1] = true;
+								array4[1] = -20;
+								array4[2] = 20;
+								array9[2] = Lang.menu[4];
+								array9[3] = Lang.menu[5];
+								num4 = 4;
+								if (this.selectedMenu == 3)
+								{
+									Main.PlaySound(11, -1, -1, 1);
+									Main.menuMode = 1;
+								}
+								if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
+								{
+									Netplay.ListenPort = num32;
+									Main.autoPass = false;
+									if (Netplay.SetRemoteIP(Main.getIP))
+									{
+										Main.menuMode = 10;
+										Netplay.StartTcpClient();
+									}
+								}
+							}
+							else if (Main.menuMode == 16)
+							{
+								num = 200;
+								num3 = 60;
+								array4[1] = 30;
+								array4[2] = 30;
+								array4[3] = 30;
+								array4[4] = 70;
+								array9[0] = Lang.menu[91];
+								array[0] = true;
+								array9[1] = Lang.menu[92];
+								array9[2] = Lang.menu[93];
+								array9[3] = Lang.menu[94];
+								array9[4] = Lang.menu[5];
+								num4 = 5;
+								if (this.selectedMenu == 4)
+								{
+									Main.menuMode = 6;
+									Main.PlaySound(11, -1, -1, 1);
+								}
+								else if (this.selectedMenu > 0)
+								{
+									if (this.selectedMenu == 1)
+									{
+										Main.maxTilesX = 4200;
+										Main.maxTilesY = 1200;
+									}
+									else if (this.selectedMenu == 2)
+									{
+										Main.maxTilesX = 6400;
+										Main.maxTilesY = 1800;
+									}
+									else
+									{
+										Main.maxTilesX = 8400;
+										Main.maxTilesY = 2400;
+									}
+									Main.clrInput();
+									Main.menuMode = -7;
+									Main.PlaySound(10, -1, -1, 1);
+									WorldGen.setWorldSize();
+								}
+							}
+						}
+					}
+					IL_4287:
+					if (Main.menuMode == 888)
+					{
+						Main.MenuUI.Draw(Main.spriteBatch, gameTime);
+					}
+					if (Main.menuMode != num5)
+					{
+						Main.blockMouse = true;
+						Main.menuSkip = 0;
+						num4 = 0;
+						for (int num33 = 0; num33 < Main.maxMenuItems; num33++)
+						{
+							this.menuItemScale[num33] = 0.8f;
+						}
+					}
+					if (!Main.mouseLeft)
+					{
+						Main.blockMouse = true;
+					}
+					int num34 = this.focusMenu;
+					this.selectedMenu = -1;
+					this.selectedMenu2 = -1;
+					this.focusMenu = -1;
+					for (int num35 = 0; num35 < num4; num35++)
+					{
+						if (array9[num35] != null)
+						{
+							if (!flag)
+							{
+								this.grabColorSlider = 0;
+								Main.hBar = -1f;
+								Main.sBar = -1f;
+								Main.lBar = -1f;
+							}
+							if (flag)
+							{
+								if (!Main.mouseLeft)
+								{
+									this.grabColorSlider = 0;
+									Main.blockMouse = false;
+								}
+								int num36 = num8;
+								int num37 = Main.screenWidth / 2 - this.hueTexture.Width / 2;
+								int num38 = 167;
+								Vector3 vector = Main.rgbToHsl(Main.selColor);
+								float num39 = vector.X;
+								float num40 = vector.Y;
+								float num41 = vector.Z;
+								if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f)
+								{
+									Main.hBar = num39;
+									Main.sBar = num40;
+									Main.lBar = num41;
+								}
+								else
+								{
+									num39 = Main.hBar;
+									num40 = Main.sBar;
+									num41 = Main.lBar;
+								}
+								Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num37, (float)num36), Microsoft.Xna.Framework.Color.White);
+								Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num37 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num36 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
+								if (((Main.mouseX > num37 - 4 && Main.mouseX < num37 + this.hueTexture.Width + 4 && Main.mouseY > num36 - 4 && Main.mouseY < num36 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
+								{
+									this.grabColorSlider = 1;
+									num39 = (float)(Main.mouseX - num37);
+									num39 /= (float)this.hueTexture.Width;
+									if (num39 < 0f)
+									{
+										num39 = 0f;
+									}
+									if (num39 > 1f)
+									{
+										num39 = 1f;
+									}
+									Main.hBar = num39;
+								}
+								num36 += 26;
+								Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num37, (float)num36), Microsoft.Xna.Framework.Color.White);
+								for (int num42 = 0; num42 <= num38; num42++)
+								{
+									float saturation = (float)num42 / (float)num38;
+									Microsoft.Xna.Framework.Color color4 = Main.hslToRgb(num39, saturation, num41);
+									Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num37 + num42 + 5), (float)(num36 + 4)), color4);
+								}
+								Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num37 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num36 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
+								if (((Main.mouseX > num37 - 4 && Main.mouseX < num37 + this.hueTexture.Width + 4 && Main.mouseY > num36 - 4 && Main.mouseY < num36 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
+								{
+									this.grabColorSlider = 2;
+									num40 = (float)(Main.mouseX - num37);
+									num40 /= (float)this.hueTexture.Width;
+									if (num40 < 0f)
+									{
+										num40 = 0f;
+									}
+									if (num40 > 1f)
+									{
+										num40 = 1f;
+									}
+									Main.sBar = num40;
+								}
+								num36 += 26;
+								Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num37, (float)num36), Microsoft.Xna.Framework.Color.White);
+								float num43 = 0.15f;
+								for (int num44 = 0; num44 <= num38; num44++)
+								{
+									float luminosity = (float)num44 / (float)num38;
+									Microsoft.Xna.Framework.Color color5 = Main.hslToRgb(num39, num40, luminosity);
+									Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num37 + num44 + 5), (float)(num36 + 4)), color5);
+								}
+								Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num37 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num43) / (1f - num43)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num36 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
+								if (((Main.mouseX > num37 - 4 && Main.mouseX < num37 + this.hueTexture.Width + 4 && Main.mouseY > num36 - 4 && Main.mouseY < num36 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
+								{
+									this.grabColorSlider = 3;
+									num41 = (float)(Main.mouseX - num37);
+									num41 /= (float)this.hueTexture.Width;
+									if (num41 < 0f)
+									{
+										num41 = 0f;
+									}
+									if (num41 > 1f)
+									{
+										num41 = 1f;
+									}
+									num41 = num41 * (1f - num43) + num43;
+									Main.lBar = num41;
+								}
+								Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
+							}
+							else if (flag)
+							{
+								string text3 = "";
+								for (int num45 = 0; num45 < 6; num45++)
+								{
+									int num46 = num8;
+									int num47 = 370 + Main.screenWidth / 2 - 400;
+									if (num45 == 0)
+									{
+										text3 = Lang.menu[95];
+									}
+									if (num45 == 1)
+									{
+										text3 = Lang.menu[96];
+										num46 += 30;
+									}
+									if (num45 == 2)
+									{
+										text3 = Lang.menu[97];
+										num46 += 60;
+									}
+									if (num45 == 3)
+									{
+										text3 = string.Concat(Main.selColor.R);
+										num47 += 90;
+									}
+									if (num45 == 4)
+									{
+										text3 = string.Concat(Main.selColor.G);
+										num47 += 90;
+										num46 += 30;
+									}
+									if (num45 == 5)
+									{
+										text3 = string.Concat(Main.selColor.B);
+										num47 += 90;
+										num46 += 60;
+									}
+									for (int num48 = 0; num48 < 5; num48++)
+									{
+										Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.Black;
+										if (num48 == 4)
+										{
+											color6 = color;
+											color6.R = (byte)((255 + color6.R) / 2);
+											color6.G = (byte)((255 + color6.R) / 2);
+											color6.B = (byte)((255 + color6.R) / 2);
+										}
+										int num49 = 255;
+										int num50 = (int)color6.R - (255 - num49);
+										if (num50 < 0)
+										{
+											num50 = 0;
+										}
+										color6 = new Microsoft.Xna.Framework.Color((int)((byte)num50), (int)((byte)num50), (int)((byte)num50), (int)((byte)num49));
+										int num51 = 0;
+										int num52 = 0;
+										if (num48 == 0)
+										{
+											num51 = -2;
+										}
+										if (num48 == 1)
+										{
+											num51 = 2;
+										}
+										if (num48 == 2)
+										{
+											num52 = -2;
+										}
+										if (num48 == 3)
+										{
+											num52 = 2;
+										}
+										Main.spriteBatch.DrawString(Main.fontDeathText, text3, new Vector2((float)(num47 + num51), (float)(num46 + num52)), color6, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
+									}
+								}
+								bool flag7 = false;
+								for (int num53 = 0; num53 < 2; num53++)
+								{
+									for (int num54 = 0; num54 < 3; num54++)
+									{
+										int num55 = num8 + num54 * 30 - 12;
+										int num56 = 360 + Main.screenWidth / 2 - 400;
+										float scale = 0.9f;
+										if (num53 == 0)
+										{
+											num56 -= 70;
+											num55 += 2;
+										}
+										else
+										{
+											num56 -= 40;
+										}
+										text3 = "-";
+										if (num53 == 1)
+										{
+											text3 = "+";
+										}
+										Vector2 vector2 = new Vector2(24f, 24f);
+										int num57 = 142;
+										if (Main.mouseX > num56 && (float)Main.mouseX < (float)num56 + vector2.X && Main.mouseY > num55 + 13 && (float)Main.mouseY < (float)(num55 + 13) + vector2.Y)
+										{
+											if (Main.focusColor != (num53 + 1) * (num54 + 10))
+											{
+												Main.PlaySound(12, -1, -1, 1);
+											}
+											Main.focusColor = (num53 + 1) * (num54 + 10);
+											flag7 = true;
+											num57 = 255;
+											if (Main.mouseLeft)
+											{
+												if (Main.colorDelay <= 1)
+												{
+													if (Main.colorDelay == 0)
+													{
+														Main.colorDelay = 40;
+													}
+													else
+													{
+														Main.colorDelay = 3;
+													}
+													int num58 = num53;
+													if (num53 == 0)
+													{
+														num58 = -1;
+														if (Main.selColor.R + Main.selColor.G + Main.selColor.B <= 150)
+														{
+															num58 = 0;
+														}
+													}
+													if (num54 == 0 && (int)Main.selColor.R + num58 >= 0 && (int)Main.selColor.R + num58 <= 255)
+													{
+														Main.selColor.R = (byte)((int)Main.selColor.R + num58);
+													}
+													if (num54 == 1 && (int)Main.selColor.G + num58 >= 0 && (int)Main.selColor.G + num58 <= 255)
+													{
+														Main.selColor.G = (byte)((int)Main.selColor.G + num58);
+													}
+													if (num54 == 2 && (int)Main.selColor.B + num58 >= 0 && (int)Main.selColor.B + num58 <= 255)
+													{
+														Main.selColor.B = (byte)((int)Main.selColor.B + num58);
+													}
+												}
+												Main.colorDelay--;
+											}
+											else
+											{
+												Main.colorDelay = 0;
+											}
+										}
+										for (int num59 = 0; num59 < 5; num59++)
+										{
+											Microsoft.Xna.Framework.Color color7 = Microsoft.Xna.Framework.Color.Black;
+											if (num59 == 4)
+											{
+												color7 = color;
+												color7.R = (byte)((255 + color7.R) / 2);
+												color7.G = (byte)((255 + color7.R) / 2);
+												color7.B = (byte)((255 + color7.R) / 2);
+											}
+											int num60 = (int)color7.R - (255 - num57);
+											if (num60 < 0)
+											{
+												num60 = 0;
+											}
+											color7 = new Microsoft.Xna.Framework.Color((int)((byte)num60), (int)((byte)num60), (int)((byte)num60), (int)((byte)num57));
+											int num61 = 0;
+											int num62 = 0;
+											if (num59 == 0)
+											{
+												num61 = -2;
+											}
+											if (num59 == 1)
+											{
+												num61 = 2;
+											}
+											if (num59 == 2)
+											{
+												num62 = -2;
+											}
+											if (num59 == 3)
+											{
+												num62 = 2;
+											}
+											Main.spriteBatch.DrawString(Main.fontDeathText, text3, new Vector2((float)(num56 + num61), (float)(num55 + num62)), color7, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
+										}
+									}
+								}
+								if (!flag7)
+								{
+									Main.focusColor = 0;
+									Main.colorDelay = 0;
+								}
+							}
+							if (flag3)
+							{
+								int num63 = 400;
+								string text4 = "";
+								for (int num64 = 0; num64 < 4; num64++)
+								{
+									int num65 = num63;
+									int num66 = 370 + Main.screenWidth / 2 - 400;
+									if (num64 == 0)
+									{
+										text4 = Lang.menu[52] + ": " + Main.bgScroll;
+									}
+									for (int num67 = 0; num67 < 5; num67++)
+									{
+										Microsoft.Xna.Framework.Color color8 = Microsoft.Xna.Framework.Color.Black;
+										if (num67 == 4)
+										{
+											color8 = color;
+											color8.R = (byte)((255 + color8.R) / 2);
+											color8.G = (byte)((255 + color8.R) / 2);
+											color8.B = (byte)((255 + color8.R) / 2);
+										}
+										int num68 = 255;
+										int num69 = (int)color8.R - (255 - num68);
+										if (num69 < 0)
+										{
+											num69 = 0;
+										}
+										color8 = new Microsoft.Xna.Framework.Color((int)((byte)num69), (int)((byte)num69), (int)((byte)num69), (int)((byte)num68));
+										int num70 = 0;
+										int num71 = 0;
+										if (num67 == 0)
+										{
+											num70 = -2;
+										}
+										if (num67 == 1)
+										{
+											num70 = 2;
+										}
+										if (num67 == 2)
+										{
+											num71 = -2;
+										}
+										if (num67 == 3)
+										{
+											num71 = 2;
+										}
+										Main.spriteBatch.DrawString(Main.fontDeathText, text4, new Vector2((float)(num66 + num70), (float)(num65 + num71)), color8, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
+									}
+								}
+								IngameOptions.rightHover = -1;
+								if (!Main.mouseLeft)
+								{
+									IngameOptions.rightLock = -1;
+								}
+								IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num63 + 12));
+								float num72 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, (float)Main.bgScroll / 100f);
+								if (IngameOptions.inBar || IngameOptions.rightLock == 2)
+								{
+									IngameOptions.rightHover = 2;
+									if (Main.mouseLeft && IngameOptions.rightLock == 2)
+									{
+										Main.bgScroll = (int)(num72 * 100f);
+										Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
+									}
+								}
+								if (IngameOptions.rightHover != -1)
+								{
+									IngameOptions.rightLock = IngameOptions.rightHover;
+								}
+							}
+							if (flag2)
+							{
+								int num73 = 400;
+								string text5 = "";
+								for (int num74 = 0; num74 < 6; num74++)
+								{
+									int num75 = num73;
+									int num76 = 370 + Main.screenWidth / 2 - 400;
+									switch (num74)
+									{
+									case 0:
+										text5 = Lang.menu[98];
+										break;
+									case 1:
+										text5 = Lang.menu[99];
+										num75 += 30;
+										break;
+									case 2:
+										text5 = Lang.menu[119];
+										num75 += 60;
+										break;
+									case 3:
+										text5 = Math.Round((double)(Main.soundVolume * 100f)) + "%";
+										num76 += 90;
+										break;
+									case 4:
+										text5 = Math.Round((double)(Main.musicVolume * 100f)) + "%";
+										num76 += 90;
+										num75 += 30;
+										break;
+									case 5:
+										text5 = Math.Round((double)(Main.ambientVolume * 100f)) + "%";
+										num76 += 90;
+										num75 += 60;
+										break;
+									}
+									Microsoft.Xna.Framework.Color textColor = color;
+									textColor.R = (byte)((255 + textColor.R) / 2);
+									textColor.G = (byte)((255 + textColor.R) / 2);
+									textColor.B = (byte)((255 + textColor.R) / 2);
+									int num77 = 255;
+									int num78 = (int)textColor.R - (255 - num77);
+									if (num78 < 0)
+									{
+										num78 = 0;
+									}
+									textColor = new Microsoft.Xna.Framework.Color((int)((byte)num78), (int)((byte)num78), (int)((byte)num78), (int)((byte)num77));
+									Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontDeathText, text5, (float)num76, (float)num75, textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 0.5f);
+								}
+								IngameOptions.rightHover = -1;
+								if (!Main.mouseLeft)
+								{
+									IngameOptions.rightLock = -1;
+								}
+								IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num73 - 18 + 30));
+								float num79 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.soundVolume);
+								if (IngameOptions.inBar || IngameOptions.rightLock == 2)
+								{
+									IngameOptions.rightHover = 2;
+									if (Main.mouseLeft && IngameOptions.rightLock == 2)
+									{
+										Main.soundVolume = num79;
+									}
+								}
+								IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num73 - 18 + 60));
+								float num80 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.musicVolume);
+								if (IngameOptions.inBar || IngameOptions.rightLock == 3)
+								{
+									IngameOptions.rightHover = 3;
+									if (Main.mouseLeft && IngameOptions.rightLock == 3)
+									{
+										Main.musicVolume = num80;
+									}
+								}
+								IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num73 - 18 + 90));
+								float num81 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.ambientVolume);
+								if (IngameOptions.inBar || IngameOptions.rightLock == 4)
+								{
+									IngameOptions.rightHover = 4;
+									if (Main.mouseLeft && IngameOptions.rightLock == 4)
+									{
+										Main.ambientVolume = num81;
+									}
+								}
+								if (IngameOptions.rightHover != -1)
+								{
+									IngameOptions.rightLock = IngameOptions.rightHover;
+								}
+							}
+							for (int num82 = 0; num82 < 5; num82++)
+							{
+								Microsoft.Xna.Framework.Color color9 = Microsoft.Xna.Framework.Color.Black;
+								if (num82 == 4)
+								{
+									switch (array6[num35])
+									{
+									case 0:
+										color9 = color;
+										break;
+									case 1:
+										color9 = Main.mcColor;
+										break;
+									case 2:
+										color9 = Main.hcColor;
+										break;
+									case 3:
+										color9 = Main.highVersionColor;
+										break;
+									case 4:
+									case 5:
+									case 6:
+										color9 = Main.errorColor;
+										break;
+									default:
+										color9 = color;
+										break;
+									}
+									color9.R = (byte)((255 + color9.R) / 2);
+									color9.G = (byte)((255 + color9.G) / 2);
+									color9.B = (byte)((255 + color9.B) / 2);
+								}
+								int num83 = (int)(255f * (this.menuItemScale[num35] * 2f - 1f));
+								if (array[num35])
+								{
+									num83 = 255;
+								}
+								int num84 = (int)color9.R - (255 - num83);
+								if (num84 < 0)
+								{
+									num84 = 0;
+								}
+								int num85 = (int)color9.G - (255 - num83);
+								if (num85 < 0)
+								{
+									num85 = 0;
+								}
+								int num86 = (int)color9.B - (255 - num83);
+								if (num86 < 0)
+								{
+									num86 = 0;
+								}
+								if (num34 == num35 && num82 == 4)
+								{
+									float num87 = (float)num83 / 255f;
+									num84 = (int)((float)num84 * (1f - num87) + 255f * num87);
+									num85 = (int)((float)num85 * (1f - num87) + 215f * num87);
+									num86 = (int)((float)num86 * (1f - num87) + 0f * num87);
+								}
+								color9 = new Microsoft.Xna.Framework.Color((int)((byte)num84), (int)((byte)num85), (int)((byte)num86), (int)((byte)num83));
+								if (array3[num35])
+								{
+									if (num82 == 4)
+									{
+										color9.R = (byte)((int)(color9.R * Main.mouseTextColor) / 300);
+										color9.G = (byte)((int)(color9.G * Main.mouseTextColor) / 300);
+										color9.B = (byte)((int)(color9.B * Main.mouseTextColor) / 300);
+										color9.A = (byte)((int)(color9.A * Main.mouseTextColor) / 300);
+									}
+									else
+									{
+										color9.A -= (byte)(Main.mouseTextColor / 5);
+									}
+								}
+								int num88 = 0;
+								int num89 = 0;
+								if (num82 == 0)
+								{
+									num88 = -2;
+								}
+								if (num82 == 1)
+								{
+									num88 = 2;
+								}
+								if (num82 == 2)
+								{
+									num89 = -2;
+								}
+								if (num82 == 3)
+								{
+									num89 = 2;
+								}
+								Vector2 origin = Main.fontDeathText.MeasureString(array9[num35]);
+								origin.X *= 0.5f;
+								origin.Y *= 0.5f;
+								float num90 = this.menuItemScale[num35];
+								if (Main.menuMode == 15 && num35 == 0)
+								{
+									num90 *= 0.35f;
+								}
+								else if (Main.netMode == 2)
+								{
+									num90 *= 0.5f;
+								}
+								num90 *= array7[num35];
+								if (!array8[num35])
+								{
+									Main.spriteBatch.DrawString(Main.fontDeathText, array9[num35], new Vector2((float)(num2 + num88 + array5[num35]), (float)(num + num3 * num35 + num89) + origin.Y * array7[num35] + (float)array4[num35]), color9, 0f, origin, num90, SpriteEffects.None, 0f);
+								}
+								else
+								{
+									Main.spriteBatch.DrawString(Main.fontDeathText, array9[num35], new Vector2((float)(num2 + num88 + array5[num35]), (float)(num + num3 * num35 + num89) + origin.Y * array7[num35] + (float)array4[num35]), color9, 0f, new Vector2(0f, origin.Y), num90, SpriteEffects.None, 0f);
+								}
+							}
+							if (!array8[num35])
+							{
+								int num91 = 0;
+								if (this.menuWide[num35])
+								{
+									num91 = 14;
+								}
+								this.menuWide[num35] = false;
+								if ((float)Main.mouseX > (float)num2 - (float)(array9[num35].Length * 10) * array7[num35] + (float)array5[num35] - (float)num91 && (float)Main.mouseX < (float)num2 + (float)(array9[num35].Length * 10) * array7[num35] + (float)array5[num35] + (float)num91 && Main.mouseY > num + num3 * num35 + array4[num35] && (float)Main.mouseY < (float)(num + num3 * num35 + array4[num35]) + 50f * array7[num35] && Main.hasFocus)
+								{
+									this.focusMenu = num35;
+									if (array[num35] || array2[num35])
+									{
+										this.focusMenu = -1;
+									}
+									else
+									{
+										if (num34 != this.focusMenu)
+										{
+											Main.PlaySound(12, -1, -1, 1);
+										}
+										if (Main.mouseLeftRelease && Main.mouseLeft)
+										{
+											this.selectedMenu = num35;
+										}
+										if (Main.mouseRightRelease && Main.mouseRight)
+										{
+											this.selectedMenu2 = num35;
+										}
+									}
+								}
+							}
+							else if (Main.mouseX > num2 + array5[num35] && (float)Main.mouseX < (float)num2 + (float)(array9[num35].Length * 20) * array7[num35] + (float)array5[num35] && Main.mouseY > num + num3 * num35 + array4[num35] && (float)Main.mouseY < (float)(num + num3 * num35 + array4[num35]) + 50f * array7[num35] && Main.hasFocus)
+							{
+								this.focusMenu = num35;
+								if (array[num35] || array2[num35])
+								{
+									this.focusMenu = -1;
+								}
+								else
+								{
+									if (num34 != this.focusMenu)
+									{
+										Main.PlaySound(12, -1, -1, 1);
+									}
+									if (Main.mouseLeftRelease && Main.mouseLeft)
+									{
+										this.selectedMenu = num35;
+									}
+									if (Main.mouseRightRelease && Main.mouseRight)
+									{
+										this.selectedMenu2 = num35;
+									}
+								}
+							}
+						}
+					}
+					for (int num92 = 0; num92 < Main.maxMenuItems; num92++)
+					{
+						if (num92 == this.focusMenu)
+						{
+							if (this.menuItemScale[num92] < 1f)
+							{
+								this.menuItemScale[num92] += 0.02f;
+							}
+							if (this.menuItemScale[num92] > 1f)
+							{
+								this.menuItemScale[num92] = 1f;
+							}
+						}
+						else if ((double)this.menuItemScale[num92] > 0.8)
+						{
+							this.menuItemScale[num92] -= 0.02f;
+						}
+					}
+					if (flag4)
+					{
+						Main.spriteBatch.End();
+						Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
+						Player pendingPlayer = Main.PendingPlayer;
+						pendingPlayer.PlayerFrame();
+						pendingPlayer.position.X = (float)num6 + Main.screenPosition.X;
+						pendingPlayer.position.Y = (float)num7 + Main.screenPosition.Y;
+						this.DrawPlayer(pendingPlayer, pendingPlayer.position, 0f, Vector2.Zero, 0f);
+						Main.spriteBatch.End();
+						Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
+					}
+					for (int num93 = 0; num93 < 5; num93++)
+					{
+						Microsoft.Xna.Framework.Color color10 = Microsoft.Xna.Framework.Color.Black;
+						if (num93 == 4)
+						{
+							color10 = color;
+							color10.R = (byte)((255 + color10.R) / 2);
+							color10.G = (byte)((255 + color10.R) / 2);
+							color10.B = (byte)((255 + color10.R) / 2);
+						}
+						color10.A = (byte)((float)color10.A * 0.3f);
+						int num94 = 0;
+						int num95 = 0;
+						if (num93 == 0)
+						{
+							num94 = -2;
+						}
+						if (num93 == 1)
+						{
+							num94 = 2;
+						}
+						if (num93 == 2)
+						{
+							num95 = -2;
+						}
+						if (num93 == 3)
+						{
+							num95 = 2;
+						}
+						string text6 = "Copyright © 2015 Re-Logic";
+						Vector2 origin2 = Main.fontMouseText.MeasureString(text6);
+						origin2.X *= 0.5f;
+						origin2.Y *= 0.5f;
+						Main.spriteBatch.DrawString(Main.fontMouseText, text6, new Vector2((float)Main.screenWidth - origin2.X + (float)num94 - 10f, (float)Main.screenHeight - origin2.Y + (float)num95 - 2f), color10, 0f, origin2, 1f, SpriteEffects.None, 0f);
+					}
+					for (int num96 = 0; num96 < 5; num96++)
+					{
+						Microsoft.Xna.Framework.Color color11 = Microsoft.Xna.Framework.Color.Black;
+						if (num96 == 4)
+						{
+							color11 = color;
+							color11.R = (byte)((255 + color11.R) / 2);
+							color11.G = (byte)((255 + color11.R) / 2);
+							color11.B = (byte)((255 + color11.R) / 2);
+						}
+						color11.A = (byte)((float)color11.A * 0.3f);
+						int num97 = 0;
+						int num98 = 0;
+						if (num96 == 0)
+						{
+							num97 = -2;
+						}
+						if (num96 == 1)
+						{
+							num97 = 2;
+						}
+						if (num96 == 2)
+						{
+							num98 = -2;
+						}
+						if (num96 == 3)
+						{
+							num98 = 2;
+						}
+						Vector2 origin3 = Main.fontMouseText.MeasureString(Main.versionNumber);
+						origin3.X *= 0.5f;
+						origin3.Y *= 0.5f;
+						Main.spriteBatch.DrawString(Main.fontMouseText, Main.versionNumber, new Vector2(origin3.X + (float)num97 + 10f, (float)Main.screenHeight - origin3.Y + (float)num98 - 2f), color11, 0f, origin3, 1f, SpriteEffects.None, 0f);
+					}
+					Vector2 value = Main.DrawThickCursor(false);
+					Main.spriteBatch.Draw(Main.cursorTextures[0], new Vector2((float)Main.mouseX, (float)Main.mouseY) + value + Vector2.One, null, new Microsoft.Xna.Framework.Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f)), 0f, default(Vector2), Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
+					Main.spriteBatch.Draw(Main.cursorTextures[0], new Vector2((float)Main.mouseX, (float)Main.mouseY) + value, null, Main.cursorColor, 0f, default(Vector2), Main.cursorScale, SpriteEffects.None, 0f);
+					if (Main.fadeCounter > 0)
+					{
+						Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
+						Main.fadeCounter--;
+						float num99 = (float)Main.fadeCounter / 75f * 255f;
+						byte b2 = (byte)num99;
+						white = new Microsoft.Xna.Framework.Color((int)b2, (int)b2, (int)b2, (int)b2);
+						Main.spriteBatch.Draw(Main.fadeTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), white);
+					}
+					Main.spriteBatch.End();
+					if (Main.mouseLeft)
+					{
+						Main.mouseLeftRelease = false;
+					}
+					else
+					{
+						Main.mouseLeftRelease = true;
+					}
+					if (Main.mouseRight)
+					{
+						Main.mouseRightRelease = false;
+						return;
+					}
+					Main.mouseRightRelease = true;
+				}
+		*/
 
 		public static void ResetKeyBindings()
 		{
@@ -39933,6 +44258,7 @@
 
 		protected void DrawUnderworldBackground(bool flat)
 		{
+			
 			if (Main.screenPosition.Y + (float)Main.screenHeight < (float)(Main.maxTilesY - 220) * 16f)
 			{
 				return;
@@ -40590,8 +44916,7 @@
 									color3.B = (byte)((float)color3.B * z);
 									Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color3);
 								}
-								IL_1879:
-								;
+							IL_1879:;
 							}
 						}
 					}
@@ -41762,8 +46087,7 @@
 									color3.B = (byte)((float)color3.B * num7);
 									Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
 								}
-								IL_182C:
-								;
+							IL_182C:;
 							}
 						}
 					}
@@ -42368,7 +46692,7 @@
 				}
 			}
 			this.DrawBackground();
-			IL_BE:
+		IL_BE:
 			TimeLogger.DetailedDrawReset();
 			Main.spriteBatch.End();
 			Main.tileBatch.End();
@@ -42376,6 +46700,7 @@
 			base.GraphicsDevice.SetRenderTarget(null);
 		}
 
+		/*
 		protected void DrawToMap()
 		{
 			if (!Main.mapEnabled)
@@ -42543,6 +46868,7 @@
 			Main.loadMap = false;
 			Main.loadMapLock = false;
 		}
+		*/
 
 		protected void DrawToMap_Section(int secX, int secY)
 		{
@@ -42562,15 +46888,15 @@
 			}
 			int num9 = 0;
 			Microsoft.Xna.Framework.Color arg_6A_0 = Microsoft.Xna.Framework.Color.Transparent;
-			for (int i = num3; i < num4; i++)
-			{
-				for (int j = num; j < num2; j++)
-				{
-					MapTile mapTile = Main.Map[j, i];
-					mapColorCacheArray[num9] = MapHelper.GetMapTileXnaColor(ref mapTile);
-					num9++;
-				}
-			}
+			//for (int i = num3; i < num4; i++)
+			//{
+			//	for (int j = num; j < num2; j++)
+			//	{
+			//		MapTile mapTile = Main.Map[j, i];
+			//		mapColorCacheArray[num9] = MapHelper.GetMapTileXnaColor(ref mapTile);
+			//		num9++;
+			//	}
+			//}
 			base.GraphicsDevice.SetRenderTarget(this.mapTarget[num5, num6]);
 			Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
 			double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
@@ -42630,6 +46956,7 @@
 			return text;
 		}
 
+		/*
 		protected void DrawMap()
 		{
 			string text = "";
@@ -43689,6 +48016,7 @@
 			}
 			TimeLogger.DetailedDrawTime(9);
 		}
+		*/
 
 		public void DrawItems()
 		{
@@ -44202,7 +48530,7 @@
 			Main.renderCount = 99;
 			for (int k = 0; k < 3; k++)
 			{
-				Lighting.LightTiles(x, num6, y, num7);
+				//Lighting.LightTiles(x, num6, y, num7);
 			}
 			if ((float)(settings.Area.X * 16) <= vector.X - 16f || (float)(settings.Area.Y * 16) <= vector.Y - 16f || (float)((settings.Area.X + settings.Area.Width) * 16) >= vector.X + (float)num3 + 16f || (float)((settings.Area.Y + settings.Area.Height) * 16) >= vector.Y + (float)num4 + 16f)
 			{
@@ -44424,16 +48752,16 @@
 			if (Main.mapEnabled)
 			{
 				Main.spriteBatch.Begin();
-				for (int num36 = area.X; num36 < area.X + area.Width; num36++)
-				{
-					for (int num37 = area.Y; num37 < area.Y + area.Height; num37++)
-					{
-						if (!Main.Map.IsRevealed(num36, num37))
-						{
-							Main.spriteBatch.Draw(Main.blackTileTexture, new Vector2((float)num36 * 16f, (float)num37 * 16f) - Main.screenPosition, Microsoft.Xna.Framework.Color.Black);
-						}
-					}
-				}
+				//for (int num36 = area.X; num36 < area.X + area.Width; num36++)
+				//{
+				//	for (int num37 = area.Y; num37 < area.Y + area.Height; num37++)
+				//	{
+				//		if (!Main.Map.IsRevealed(num36, num37))
+				//		{
+				//			Main.spriteBatch.Draw(Main.blackTileTexture, new Vector2((float)num36 * 16f, (float)num37 * 16f) - Main.screenPosition, Microsoft.Xna.Framework.Color.Black);
+				//		}
+				//	}
+				//}
 				Main.spriteBatch.End();
 			}
 			Main.renderCount = 99;
@@ -44484,7 +48812,7 @@
 				}
 			}
 			this.DrawTiles(true, -1);
-			IL_5B:
+		IL_5B:
 			TimeLogger.DetailedDrawReset();
 			Main.spriteBatch.End();
 			TimeLogger.DetailedDrawTime(28);
@@ -44514,7 +48842,7 @@
 				}
 			}
 			this.DrawTiles(false, -1);
-			IL_55:
+		IL_55:
 			TimeLogger.DetailedDrawReset();
 			Main.spriteBatch.End();
 			TimeLogger.DetailedDrawTime(29);
@@ -45719,8 +50047,7 @@
 							}
 						}
 					}
-					IL_E80:
-					;
+				IL_E80:;
 				}
 			}
 			if (!Main.drewLava)
@@ -45786,7 +50113,7 @@
 					}
 				}
 				return false;
-				IL_E6:
+			IL_E6:
 				if (Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type])
 				{
 					int frameX = (int)tile.frameX;
@@ -46104,7 +50431,7 @@
 				}
 			}
 			this.DrawWalls();
-			IL_7A:
+		IL_7A:
 			TimeLogger.DetailedDrawReset();
 			Main.tileBatch.End();
 			Main.spriteBatch.End();
@@ -47083,12 +51410,12 @@
 			if (i >= 0 && !Main.backgroundLoaded[i])
 			{
 				Main.backgroundTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Background_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Background_",
+					i
+				}));
 				Main.backgroundWidth[i] = Main.backgroundTexture[i].Width;
 				Main.backgroundHeight[i] = Main.backgroundTexture[i].Height;
 				Main.backgroundLoaded[i] = true;
@@ -47100,12 +51427,12 @@
 			if (!Main.NPCLoaded[i] || Main.npcTexture[i] == null)
 			{
 				Main.npcTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"NPC_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"NPC_",
+					i
+				}));
 				Main.NPCLoaded[i] = true;
 			}
 		}
@@ -47115,12 +51442,12 @@
 			if (!Main.projectileLoaded[i])
 			{
 				Main.projectileTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Projectile_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Projectile_",
+					i
+				}));
 				Main.projectileLoaded[i] = true;
 			}
 		}
@@ -47130,12 +51457,12 @@
 			if (!Main.goreLoaded[i])
 			{
 				Main.goreTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Gore_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Gore_",
+					i
+				}));
 				Main.goreLoaded[i] = true;
 			}
 		}
@@ -47145,12 +51472,12 @@
 			if (!Main.wallLoaded[i])
 			{
 				Main.wallTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Wall_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Wall_",
+					i
+				}));
 				Main.wallLoaded[i] = true;
 			}
 		}
@@ -47160,12 +51487,12 @@
 			if (!Main.tileSetsLoaded[i])
 			{
 				Main.tileTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Tiles_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Tiles_",
+					i
+				}));
 				Main.tileSetsLoaded[i] = true;
 			}
 		}
@@ -47177,12 +51504,12 @@
 				try
 				{
 					Main.itemFlameTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-							{
-								"Images",
-								Path.DirectorySeparatorChar,
-								"ItemFlame_",
-								i
-							}));
+					{
+						"Images",
+						Path.DirectorySeparatorChar,
+						"ItemFlame_",
+						i
+					}));
 				}
 				catch
 				{
@@ -47196,12 +51523,12 @@
 			if (!Main.wingsLoaded[i])
 			{
 				Main.wingsTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Wings_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Wings_",
+					i
+				}));
 				Main.wingsLoaded[i] = true;
 			}
 		}
@@ -47211,19 +51538,19 @@
 			if (!Main.hairLoaded[i])
 			{
 				Main.playerHairTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Player_Hair_",
-							i + 1
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Player_Hair_",
+					i + 1
+				}));
 				Main.playerHairAltTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Player_HairAlt_",
-							i + 1
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Player_HairAlt_",
+					i + 1
+				}));
 				Main.hairLoaded[i] = true;
 			}
 		}
@@ -47233,12 +51560,12 @@
 			if (!Main.armorHeadLoaded[i])
 			{
 				Main.armorHeadTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Armor_Head_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Armor_Head_",
+					i
+				}));
 				Main.armorHeadLoaded[i] = true;
 			}
 		}
@@ -47248,26 +51575,26 @@
 			if (!Main.armorBodyLoaded[i])
 			{
 				Main.femaleBodyTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Female_Body_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Female_Body_",
+					i
+				}));
 				Main.armorBodyTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Armor_Body_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Armor_Body_",
+					i
+				}));
 				Main.armorArmTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Armor_Arm_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Armor_Arm_",
+					i
+				}));
 				Main.armorBodyLoaded[i] = true;
 			}
 		}
@@ -47277,12 +51604,12 @@
 			if (!Main.armorLegsLoaded[i])
 			{
 				Main.armorLegTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
-						{
-							"Images",
-							Path.DirectorySeparatorChar,
-							"Armor_Legs_",
-							i
-						}));
+				{
+					"Images",
+					Path.DirectorySeparatorChar,
+					"Armor_Legs_",
+					i
+				}));
 				Main.armorLegsLoaded[i] = true;
 			}
 		}
@@ -48874,7 +53201,7 @@
 			if (Main.loadMap)
 			{
 				Main.refreshMap = false;
-				this.DrawToMap();
+			//	this.DrawToMap();
 				TimeLogger.DetailedDrawTime(1);
 			}
 			if (Lighting.lightMode >= 2)
@@ -49142,13 +53469,13 @@
 				}
 			}
 			Main.CheckMonoliths();
-			if (Main.showSplash)
-			{
-				this.DrawSplash(gameTime);
-				TimeLogger.SplashDrawTime(stopwatch.Elapsed.TotalMilliseconds);
-				TimeLogger.EndDrawFrame();
-				return;
-			}
+			//if (Main.showSplash)
+			//{
+			//	this.DrawSplash(gameTime);
+			//	TimeLogger.SplashDrawTime(stopwatch.Elapsed.TotalMilliseconds);
+			//	TimeLogger.EndDrawFrame();
+			//	return;
+			//}
 			Main.sunCircle += 0.01f;
 			if ((double)Main.sunCircle > 6.285)
 			{
@@ -49165,8 +53492,8 @@
 					Main.renderNow = false;
 					Main.renderCount = 99;
 					this.Draw(gameTime);
-					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
-					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
+				//	Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
+				//	Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
 					this.RenderTiles();
 					Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
 					Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
@@ -49277,12 +53604,12 @@
 							Main.refreshMap = false;
 							Main.sectionManager.ClearMapDraw();
 						}
-						this.DrawToMap();
+					//	this.DrawToMap();
 						Main.updateMap = false;
 					}
 					else if (MapHelper.numUpdateTile > 0)
 					{
-						this.DrawToMap();
+					//	this.DrawToMap();
 					}
 					TimeLogger.DetailedDrawTime(4);
 				}
@@ -50224,8 +54551,12 @@
 			if (Main.gameMenu)
 			{
 				Main.tranSpeed = 0.02f;
+
+				//Main.bgStyle = Main.bgStylePreview;
+
 				if (!Main.dayTime)
 				{
+
 					Main.bgStyle = 1;
 				}
 				else
@@ -50528,7 +54859,7 @@
 			{
 				this.DrawUnderworldBackground(false);
 			}
-			IL_45A1:
+		IL_45A1:
 			TimeLogger.DetailedDrawTime(8);
 			if (Main.gameMenu || Main.netMode == 2)
 			{
@@ -50578,7 +54909,7 @@
 			}
 			if (!Main.drawSkip)
 			{
-				Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
+			//	Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
 			}
 			TimeLogger.DetailedDrawReset();
 			if (!Main.mapFullscreen)
@@ -50654,7 +54985,7 @@
 						}
 						this.DrawGoreBehind();
 					}
-					IL_4A3F:
+				IL_4A3F:
 					MoonlordDeathDrama.DrawPieces(Main.spriteBatch);
 					MoonlordDeathDrama.DrawExplosions(Main.spriteBatch);
 					if (Main.player[Main.myPlayer].detectCreature)
@@ -50737,7 +55068,7 @@
 					{
 						try
 						{
-							this.DrawMap();
+						//	this.DrawMap();
 							goto IL_4D8B;
 						}
 						catch (Exception e4)
@@ -50746,9 +55077,9 @@
 							goto IL_4D8B;
 						}
 					}
-					this.DrawMap();
-				}
-				IL_4D8B:
+				//	this.DrawMap();
+				}
+			IL_4D8B:
 				TimeLogger.DetailedDrawReset();
 				Main.spriteBatch.End();
 				TimeLogger.DetailedDrawTime(35);
@@ -50789,7 +55120,7 @@
 					}
 				}
 				this.DrawGore();
-				IL_4E81:
+			IL_4E81:
 				Main.spriteBatch.End();
 				this.DrawDust();
 				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
@@ -50918,12 +55249,12 @@
 							if (Main.itemText[num80].stack > 1)
 							{
 								text = string.Concat(new object[]
-									{
-										text,
-										" (",
-										Main.itemText[num80].stack,
-										")"
-									});
+								{
+									text,
+									" (",
+									Main.itemText[num80].stack,
+									")"
+								});
 							}
 							Vector2 vector3 = Main.fontMouseText.MeasureString(text);
 							Vector2 origin2 = new Vector2(vector3.X * 0.5f, vector3.Y * 0.5f);
@@ -50982,12 +55313,12 @@
 					if (Main.netMode == 1 && Netplay.Connection.StatusText != "" && Netplay.Connection.StatusText != null)
 					{
 						string text2 = string.Concat(new object[]
-							{
-								Netplay.Connection.StatusText,
-								": ",
-								(int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f),
-								"%"
-							});
+						{
+							Netplay.Connection.StatusText,
+							": ",
+							(int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f),
+							"%"
+						});
 						Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2(628f - Main.fontMouseText.MeasureString(text2).X * 0.5f + (float)(Main.screenWidth - 800), 84f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
 					if (Main.BlackFadeIn > 0)
@@ -51022,7 +55353,7 @@
 						}
 						this.DrawInterface(gameTime);
 					}
-					IL_5B16:
+				IL_5B16:
 					TimeLogger.DetailedDrawTime(27);
 				}
 				else
@@ -51063,7 +55394,7 @@
 			{
 				Main.player[Main.myPlayer].ToggleInv();
 			}
-			this.DrawMap();
+			//this.DrawMap();
 			this.DrawFPS();
 			this.DrawPlayerChat();
 			TimeLogger.MapDrawTime(stopwatch.Elapsed.TotalMilliseconds);
@@ -53418,7 +57749,7 @@
 			Main.screenMaximized = (((Form)Control.FromHandle(Main.instance.Window.Handle)).WindowState == FormWindowState.Maximized);
 			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 #else
-			Main.screenMaximized = false;
+            Main.screenMaximized = false;
 #endif
 			if (!Main.instance.IsActive && (Main.screenMaximized || Main.graphics.IsFullScreen))
 			{
@@ -53473,9 +57804,9 @@
 				}
 			}
 #else
-			if (fullscreen || !flag)
-			{
-			}
+            if (fullscreen || !flag)
+            {
+            }
 #endif
 			width &= 2147483646;
 			height &= 2147483646;
@@ -53509,13 +57840,13 @@
 				}
 				UserInterface.ActiveInstance.Recalculate();
 				Console.WriteLine(string.Concat(new object[]
-						{
-							"Resolution changed to: ",
-							width,
-							"x",
-							height,
-							"."
-						}));
+				{
+					"Resolution changed to: ",
+					width,
+					"x",
+					height,
+					"."
+				}));
 			}
 			if (!Main.graphics.SynchronizeWithVerticalRetrace)
 			{
@@ -53531,19 +57862,19 @@
 
 		public static void OpenPlayerSelect(Main.OnPlayerSelected method)
 		{
-			if (Main.gameMenu && (Main.menuMode == 10 || Main.menuMode == 14))
+			if (Main.gameMenu && (Main.menuMode == 10 /*|| Main.menuMode == 14*/))
 			{
 				return;
 			}
 			if (!Main.gameMenu)
 			{
 				WorldGen.SaveAndQuit(delegate
-					{
-						Main.LoadPlayers();
-						Main.MenuUI.SetState(Main._characterSelectMenu);
-						Main.menuMode = 888;
-						Main._pendingCharacterSelect = method;
-					});
+				{
+					Main.LoadPlayers();
+					Main.MenuUI.SetState(Main._characterSelectMenu);
+					Main.menuMode = 888;
+					Main._pendingCharacterSelect = method;
+				});
 				return;
 			}
 			Main.LoadPlayers();
@@ -53560,5 +57891,42 @@
 				Main._hasPendingNetmodeChange = true;
 			}
 		}
+
+		private Texture2D BitmapToTexture2D(Bitmap image)
+		{
+			int capacity = image.Height * image.Width * 4;
+			MemoryStream stream = new MemoryStream(capacity);
+			image.Save(stream, ImageFormat.Png);
+			return Texture2D.FromStream(base.GraphicsDevice, stream);
+		}
+
+		
+	}
+	public enum MenuModes
+	{
+		SelectDifficulty = -7,
+		ChooseWorldSize = 0,
+		EnterWorldName = 7,
+		Settings = 11,
+		ChallengeOption = 113,
+
+		ResetAllSettings,
+		MicroBiomes = 1000,
+		DownedFound = 1001,
+		Downed = 1002,
+		Found = 1003,
+		VariousSpawns = 1004,
+		Ores,
+		OreAmount,
+		GraphicStyles,
+		Backgrounds,
+		SurfaceBackgrounds,
+		UndergroundBackgrounds,
+		Miscellaneous,
+		Terrain,
+		Chests,
+		Debug,
+		Traps,
+		SavedSettings,
 	}
 }

